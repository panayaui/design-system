{
    "pipes": [],
    "interfaces": [
        {
            "name": "IActionButton",
            "id": "interface-IActionButton-6b98e01bc5358f8162fdacc7859dc5bb",
            "file": "projects/design-system-lib/src/lib/action-button/action-button.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IActionButton {\r\n  label: string;\r\n  disabled?: boolean;\r\n  iconBeforeName?: string;\r\n  iconBeforeWidth?: string;\r\n  iconBeforeHeight?: string;\r\n  iconBeforeStrokeWidth?: number;\r\n  iconBeforeStrokeColor?: string;\r\n  isMenuTrigger?: boolean;\r\n  isStandalone?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "iconBeforeHeight",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "iconBeforeName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "iconBeforeStrokeColor",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "iconBeforeStrokeWidth",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "iconBeforeWidth",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "isMenuTrigger",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isStandalone",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IAlertData",
            "id": "interface-IAlertData-d5dd3a4328cabd97ecff13ef89e80685",
            "file": "projects/design-system-lib/src/lib/alert/alert.interface.ts",
            "type": "interface",
            "sourceCode": "import {IIcon} from '../icon/icon.interface';\r\n\r\nexport interface IAlertData {\r\n  icon?: IIcon;\r\n  messageMain?: string;\r\n  actionName?: string;\r\n  messageSub?: string;\r\n  closeBtnName?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "actionName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "closeBtnName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "type": "IIcon",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "messageMain",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "messageSub",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IButton",
            "id": "interface-IButton-a33b085d8ec879cc77ca79d3cdcc1715",
            "file": "projects/design-system-lib/src/lib/button/button.interface.ts",
            "type": "interface",
            "sourceCode": "import {ButtonTypeEnum} from './button-type.enum';\r\nimport {Input} from '@angular/core';\r\n\r\nexport interface IButton {\r\n  label: string;\r\n  ariaLabel: string;\r\n  large: boolean;\r\n  disabled: boolean;\r\n  iconBefore: string;\r\n  iconBeforeWidth: string;\r\n  iconBeforeHeight: string;\r\n  iconBeforeStrokeWidth: number;\r\n  iconBeforeStrokeColor: string;\r\n  iconAfter: string;\r\n  iconAfterWidth: string;\r\n  iconAfterHeight: string;\r\n  iconAfterStrokeWidth: number;\r\n  iconAfterStrokeColor: string;\r\n  buttonType: ButtonTypeEnum;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "buttonType",
                    "type": "ButtonTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "iconAfter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "iconAfterHeight",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "iconAfterStrokeColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "iconAfterStrokeWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "iconAfterWidth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "iconBefore",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "iconBeforeHeight",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "iconBeforeStrokeColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "iconBeforeStrokeWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "iconBeforeWidth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "large",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICheckbox",
            "id": "interface-ICheckbox-fb62af5d1c72b56155b92ea9023e484d",
            "file": "projects/design-system-lib/src/lib/checkbox/checkbox.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ICheckbox {\r\n  label?: string;\r\n  ariaLabel?: string;\r\n  checked?: boolean;\r\n  disabled?: boolean;\r\n  selectAll?: boolean;\r\n  indeterminate?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "indeterminate",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "selectAll",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICheckboxGroup",
            "id": "interface-ICheckboxGroup-10a83bcee8d8f9ebfbf95336af8bd69f",
            "file": "src/stories/checkbox/checkbox-group/checkbox-group.interface.ts",
            "type": "interface",
            "sourceCode": "import {ICheckbox} from 'projects/design-system-lib/src/public-api';\r\n\r\nexport default interface ICheckboxGroup {\r\n  groupTitle: string;\r\n  checkboxGroup: ICheckbox[];\r\n  error: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "checkboxGroup",
                    "type": "ICheckbox[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "groupTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IChip",
            "id": "interface-IChip-10e905bfdc2859843d2edefee2fe9321",
            "file": "projects/design-system-lib/src/lib/chips/chip-button.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IChip {\r\n  label: string;\r\n  values?: string[];\r\n  iconRemove?: boolean;\r\n  full?: boolean;\r\n  active?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "full",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "iconRemove",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "values",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDatepicker",
            "id": "interface-IDatepicker-2b7f00bfb8debcf76de9d8a7fb2ebb82",
            "file": "projects/design-system-lib/src/lib/input/datepicker/datepicker.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IDatepicker {\r\n  ariaLabel?: string;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  readonly?: boolean;\r\n  value?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IDaterange",
            "id": "interface-IDaterange-0ed54fc800636df2d017aa0579b72a11",
            "file": "projects/design-system-lib/src/lib/input/daterange/daterange.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IDaterange {\r\n  ariaLabel?: string;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  readonly?: boolean;\r\n  value?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IEntity",
            "id": "interface-IEntity-2682c6a5d2913343651d95882fdf1217",
            "file": "projects/design-system-lib/src/lib/entity-header/entity.interface.ts",
            "type": "interface",
            "sourceCode": "import {ValidatorFn} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {EntityTypeEnum} from './entity-type.enum';\r\n\r\nexport interface IEntity {\r\n  type: EntityTypeEnum;\r\n  id: number;\r\n  entityName?: string;\r\n  validators?: ValidatorFn[];\r\n  matcher?: ErrorStateMatcher;\r\n}\r\n",
            "properties": [
                {
                    "name": "entityName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "matcher",
                    "type": "ErrorStateMatcher",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "type": "EntityTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "validators",
                    "type": "ValidatorFn[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IExpansionPanel",
            "id": "interface-IExpansionPanel-efc27f797265662ce742c5bee2d5f881",
            "file": "projects/design-system-lib/src/lib/expansion-panel/expansion-panel.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IExpansionPanel {\r\n  header: {\r\n    titleMain: string,\r\n    titleSub?: string,\r\n  };\r\n  content: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "header",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IHashtag",
            "id": "interface-IHashtag-63ece8e466adf822b858a92c78ea9fa3",
            "file": "projects/design-system-lib/src/lib/hashtag/hashtag.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IHashtag {\r\n  label: string;\r\n  iconRemove?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "iconRemove",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IIcon",
            "id": "interface-IIcon-82b68807905acccaafbefdcbabe091c3",
            "file": "projects/design-system-lib/src/lib/icon/icon.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IIcon {\r\n  iconName: string; // required\r\n  width?: string;\r\n  height?: string;\r\n  fill?: string;\r\n  stroke?: string;\r\n  strokeWidth?: number;\r\n  strokeLinecap?: string;\r\n  strokeLinejoin?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "fill",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "height",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "iconName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "stroke",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "strokeLinecap",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "strokeLinejoin",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "strokeWidth",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "width",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IInputNumeric",
            "id": "interface-IInputNumeric-acf19a7abffe54d0112421ec6c047948",
            "file": "projects/design-system-lib/src/lib/input/numeric/input-numeric.interface.ts",
            "type": "interface",
            "sourceCode": "import {ValidatorFn} from '@angular/forms';\r\nimport {InputNumericSizeEnum} from './input-numeric-size.enum';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\n\r\nexport interface IInputNumeric {\r\n  type?: string;\r\n  label?: string;\r\n  ariaLabel?: string;\r\n  placeholder?: number;\r\n  errorMessage?: string;\r\n  disabled?: boolean;\r\n  readonly?: boolean;\r\n  value?: number;\r\n  validators?: ValidatorFn[];\r\n  labelLast?: boolean;\r\n  size?: InputNumericSizeEnum;\r\n  matcher?: ErrorStateMatcher;\r\n  iconName?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "iconName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "labelLast",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "matcher",
                    "type": "ErrorStateMatcher",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "placeholder",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "size",
                    "type": "InputNumericSizeEnum",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "validators",
                    "type": "ValidatorFn[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "value",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IInputText",
            "id": "interface-IInputText-fb3fefe61b7e0d2c9b181abee2318ce8",
            "file": "projects/design-system-lib/src/lib/input/text/input-text.interface.ts",
            "type": "interface",
            "sourceCode": "import {ValidatorFn} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\n\r\nexport interface IInputText {\r\n  type?: string;\r\n  label?: string;\r\n  ariaLabel?: string;\r\n  placeholder?: string;\r\n  errorMessage?: string;\r\n  disabled?: boolean;\r\n  readonly?: boolean;\r\n  value: string;\r\n  validators: ValidatorFn[];\r\n  matcher?: ErrorStateMatcher;\r\n  iconName?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "iconName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "matcher",
                    "type": "ErrorStateMatcher",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "placeholder",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "readonly",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "validators",
                    "type": "ValidatorFn[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IInputTextTableLine",
            "id": "interface-IInputTextTableLine-0ba20145223af59a664867c47bba2f90",
            "file": "projects/design-system-lib/src/lib/input/table-layout/input-text-table-line.interface.ts",
            "type": "interface",
            "sourceCode": "import {IInputText} from '../text/input-text.interface';\r\n\r\nexport interface IInputTextTableLine {\r\n  tableHeader: {\r\n    name: string;\r\n    attention?: boolean;\r\n    required?: boolean;\r\n  };\r\n  tableData: IInputText;\r\n}\r\n",
            "properties": [
                {
                    "name": "tableData",
                    "type": "IInputText",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tableHeader",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IMenuButton",
            "id": "interface-IMenuButton-17b6b4ae8f4d81dda8470d7cd6ca64d9",
            "file": "projects/design-system-lib/src/lib/menu/menu-button.interface.ts",
            "type": "interface",
            "sourceCode": "import {IIcon} from '../icon/icon.interface';\r\nimport {ButtonTypeEnum} from '../button/button-type.enum';\r\n\r\nexport interface IMenuButton {\r\n  label: string;\r\n  buttonType: ButtonTypeEnum;\r\n  icon: IIcon;\r\n}\r\n",
            "properties": [
                {
                    "name": "buttonType",
                    "type": "ButtonTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "type": "IIcon",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IMenuFreeTextItem",
            "id": "interface-IMenuFreeTextItem-6c4922bfbba5b0c56719495c3d300aa3",
            "file": "projects/design-system-lib/src/lib/menu/menu-free-text/menu-free-text.component.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  Component,\r\n  Input, OnInit,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {MatMenuTrigger} from '@angular/material/menu';\r\nimport {IMenuButton} from '../menu-button.interface';\r\nimport {ButtonTypeEnum} from '../../button/button-type.enum';\r\n\r\ninterface IMenuFreeTextItem {\r\n  name: string;\r\n  inputValue?: string;\r\n  selected?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'p-menu-free-text',\r\n  templateUrl: './menu-free-text.component.html',\r\n  styleUrls: ['./menu-free-text.component.scss'],\r\n})\r\nexport class MenuFreeTextComponent implements OnInit{\r\n  @Input() menuList: IMenuFreeTextItem[];\r\n  @Input() footerBtnFirst: IMenuButton;\r\n  @Input() footerBtnLast: IMenuButton;\r\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;\r\n  public selectedItem: IMenuFreeTextItem;\r\n  public isInputShown: boolean;\r\n  public buttonType = ButtonTypeEnum;\r\n\r\n  ngOnInit(): void {\r\n    this.findSelectedItem();\r\n  }\r\n\r\n  selectCompleted(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  openMenu(): void {\r\n    this.menuTrigger.openMenu();\r\n  }\r\n\r\n  selectCanceled(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  findSelectedItem(): void {\r\n    this.selectedItem = this.menuList.find( item => item.selected );\r\n    this.isInputShown = this.selectedItem.hasOwnProperty('inputValue');\r\n  }\r\n\r\n  setSelectedItem(newSelectedItem): void {\r\n    this.selectedItem.selected = false;\r\n    newSelectedItem.selected = true;\r\n    this.findSelectedItem();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "inputValue",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IMenuRadioOption",
            "id": "interface-IMenuRadioOption-9076f8795e80ac1bc7708b15d113445e",
            "file": "projects/design-system-lib/src/lib/menu/menu-radio-group/menu-radio-group.component.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {MatMenuTrigger} from '@angular/material/menu';\r\nimport {IMenuButton} from '../menu-button.interface';\r\nimport {IRadioButton} from '../../radio-button/radio-button.interface';\r\nimport {InputNumericSizeEnum} from '../../input/numeric/input-numeric-size.enum';\r\nimport {IDatepicker} from '../../input/datepicker/datepicker.interface';\r\nimport {ButtonTypeEnum} from '../../button/button-type.enum';\r\n\r\ninterface IMenuRadioOption extends IRadioButton {\r\n  numericInputValue?: number;\r\n  menuList?: any[];\r\n  dateStart?: IDatepicker;\r\n  dateEnd?: IDatepicker;\r\n}\r\n\r\n@Component({\r\n  selector: 'p-menu-radio-group',\r\n  templateUrl: './menu-radio-group.component.html',\r\n  styleUrls: ['./menu-radio-group.component.scss'],\r\n})\r\nexport class MenuRadioGroupComponent {\r\n  @Input() menuList: IMenuRadioOption[];\r\n  @Input() footerBtnFirst: IMenuButton;\r\n  @Input() footerBtnLast: IMenuButton;\r\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;\r\n  public inputNumericSize = InputNumericSizeEnum;\r\n  public buttonType = ButtonTypeEnum;\r\n\r\n  findMenuTriggerName(menuList): void {\r\n    return menuList.find( item => item.selected === true).name;\r\n  }\r\n\r\n  openMenu(): void {\r\n    this.menuTrigger.openMenu();\r\n  }\r\n\r\n  selectCompleted(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  selectCanceled(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "dateEnd",
                    "type": "IDatepicker",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "dateStart",
                    "type": "IDatepicker",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "menuList",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "numericInputValue",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IRadioButton"
        },
        {
            "name": "IModalData",
            "id": "interface-IModalData-0c2e0e2711f239aa19e802008d711499",
            "file": "projects/design-system-lib/src/lib/modal/modal.interface.ts",
            "type": "interface",
            "sourceCode": "import {IIcon} from '../icon/icon.interface';\r\nimport {IButton} from '../button/button.interface';\r\n\r\nexport interface IModalData {\r\n  headerIcon?: IIcon;\r\n  headerText?: string;\r\n  textParagraph?: string;\r\n  actions: IButton[];\r\n}\r\n",
            "properties": [
                {
                    "name": "actions",
                    "type": "IButton[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "headerIcon",
                    "type": "IIcon",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "headerText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "textParagraph",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IRadioButton",
            "id": "interface-IRadioButton-5f07fcc5f8ba64c3734041af19e3ad8d",
            "file": "projects/design-system-lib/src/lib/radio-button/radio-button.interface.ts",
            "type": "interface",
            "sourceCode": "export interface IRadioButton {\r\n  value: any;\r\n  label?: string;\r\n  ariaLabel?: string;\r\n  checked?: boolean;\r\n  disabled?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISidenavInner",
            "id": "interface-ISidenavInner-1901a41e62f54c42d81fa1c9c247488e",
            "file": "projects/design-system-lib/src/lib/sidenav/inner/sidenav-inner.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ISidenavInner {\r\n  header: {\r\n    headerName: string,\r\n  };\r\n  content?: {\r\n    name: string,\r\n    selected: boolean\r\n  }[];\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "type": "literal type[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "header",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ISidenavMain",
            "id": "interface-ISidenavMain-522a01acc28323bb1a35d8b340c3ab68",
            "file": "projects/design-system-lib/src/lib/sidenav/main/sidenav-main.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ISidenavMain {\r\n  header: {\r\n    headerName: string,\r\n    headerIcon?: string,\r\n  };\r\n  content: {\r\n    name: string,\r\n    link: string,\r\n    selected: boolean\r\n  }[];\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "header",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITab",
            "id": "interface-ITab-e149248ab8818480bb0c0cbde0111f0d",
            "file": "projects/design-system-lib/src/lib/tab-group/tab.interface.ts",
            "type": "interface",
            "sourceCode": "import {IIcon} from '../icon/icon.interface';\r\n\r\nexport interface ITab {\r\n  labelName: string;\r\n  labelIcon?: IIcon;\r\n  labelNotification?: boolean;\r\n  labelCounter?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "labelCounter",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "labelIcon",
                    "type": "IIcon",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "labelName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "labelNotification",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IToggleOption",
            "id": "interface-IToggleOption-de3608518d970bbce9bddc253539896d",
            "file": "projects/design-system-lib/src/lib/toggle/toggle.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {IIcon} from '../icon/icon.interface';\r\n\r\ninterface IToggleOption {\r\n  optionName: string;\r\n  icon: IIcon;\r\n  checked: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'p-toggle',\r\n  templateUrl: './toggle.component.html',\r\n  styleUrls: ['./toggle.component.scss'],\r\n})\r\nexport class ToggleComponent {\r\n  @Input() optionsListName: string;\r\n  @Input() optionsList: IToggleOption[];\r\n  @Input() disabled: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "icon",
                    "type": "IIcon",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "optionName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ITreeNode",
            "id": "interface-ITreeNode-7108b7a346416d5a258c4efa08e03fa3",
            "file": "projects/design-system-lib/src/lib/tree/tree.interface.ts",
            "type": "interface",
            "sourceCode": "import {LabelTypesEnum} from '../labels/label-types.enum';\r\n\r\nexport interface ITreeNode {\r\n  name: string;\r\n  selected?: boolean;\r\n  isCycle?: boolean;\r\n  label?: LabelTypesEnum;\r\n  children?: ITreeNode[];\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "type": "ITreeNode[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isCycle",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "type": "LabelTypesEnum",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-e3ea1f4631d62652a5623d3ab757b2fc",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  async navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl);\r\n  }\r\n\r\n  async getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText();\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomErrorStateMatcher",
            "id": "class-CustomErrorStateMatcher-4dcb8b0672b9a3ec836d91e83906f144",
            "file": "src/stories/entity-header/custom-error-state-matcher.ts",
            "type": "class",
            "sourceCode": "import {ErrorStateMatcher} from '@angular/material/core';\r\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\r\n\r\nexport class CustomErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    return true;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl | null"
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ]
        },
        {
            "name": "CustomErrorStateMatcher",
            "id": "class-CustomErrorStateMatcher-4dcb8b0672b9a3ec836d91e83906f144-1",
            "file": "src/stories/input/custom-error-state-matcher.ts",
            "type": "class",
            "sourceCode": "import {ErrorStateMatcher} from '@angular/material/core';\r\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\r\n\r\nexport class CustomErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    return true;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "isErrorState",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl | null"
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "form",
                            "type": "FormGroupDirective | NgForm | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ErrorStateMatcher"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CustomErrorStateMatcher-1"
        },
        {
            "name": "EntityTypeEnum",
            "id": "class-EntityTypeEnum-e17d0583c3c878d48a82eea9e534d795",
            "file": "projects/design-system-lib/src/lib/entity-header/entity-type.enum.ts",
            "type": "class",
            "sourceCode": "export class EntityTypeEnum {\r\n  static readonly DEFECT = new EntityTypeEnum('DEFECT', { name: 'defect', iconName: 'chrome', editable: true } );\r\n  static readonly FEATURE = new EntityTypeEnum('FEATURE', { name: 'feature', iconName: 'compass', editable: true } );\r\n  static readonly REQUIREMENT = new EntityTypeEnum('REQUIREMENT', { name: 'requirement', iconName: 'clipboard', editable: true } );\r\n  static readonly WORKSTREAM = new EntityTypeEnum('WORKSTREAM', { name: 'workstream', iconName: 'clock', editable: true } );\r\n  static readonly ANALYSIS = new EntityTypeEnum('ANALYSIS', { name: 'analysis', iconName: 'cloud-drizzle', editable: true } );\r\n  static readonly USERSTORY = new EntityTypeEnum('USERSTORY', { name: 'user story', iconName: 'cloud-off', editable: true } );\r\n  static readonly TASK = new EntityTypeEnum('TASK', { name: 'task', iconName: 'cloud-lightning', editable: true } );\r\n  static readonly CORRECTION = new EntityTypeEnum('CORRECTION', { name: 'correction', iconName: 'cloud-rain', editable: true } );\r\n  static readonly TEST = new EntityTypeEnum('TEST', { name: 'test', iconName: 'cloud-snow', editable: true } );\r\n  static readonly QUICKTEST = new EntityTypeEnum('QUICKTEST', { name: 'quick test', iconName: 'coffee', editable: true } );\r\n  static readonly AUTOMATEDTEST = new EntityTypeEnum('AUTOMATEDTEST', { name: 'automated test', iconName: 'command', editable: true } );\r\n  static readonly PROJECT = new EntityTypeEnum('PROJECT', { name: 'project', iconName: 'copy', editable: false } );\r\n  static readonly CYCLE = new EntityTypeEnum('CYCLE', { name: 'cycle', iconName: 'cpu', editable: false } );\r\n  static readonly FOLDER = new EntityTypeEnum('FOLDER', { name: 'folder', iconName: 'credit-card', editable: false } );\r\n  static readonly BUSINESSPROCESS = new EntityTypeEnum('BUSINESSPROCESS', { name: 'business process', iconName: 'crosshair', editable: false } );\r\n\r\n  private constructor( private readonly key: string,\r\n                       public readonly value: { name: string, iconName: string, editable: boolean } ) {}\r\n\r\n  toString(): string {\r\n    return this.key;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "literal type"
                    }
                ],
                "line": 16,
                "modifierKind": [
                    112
                ],
                "jsdoctags": [
                    {
                        "name": "key",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "ANALYSIS",
                    "defaultValue": "new EntityTypeEnum('ANALYSIS', { name: 'analysis', iconName: 'cloud-drizzle', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "AUTOMATEDTEST",
                    "defaultValue": "new EntityTypeEnum('AUTOMATEDTEST', { name: 'automated test', iconName: 'command', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "BUSINESSPROCESS",
                    "defaultValue": "new EntityTypeEnum('BUSINESSPROCESS', { name: 'business process', iconName: 'crosshair', editable: false } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "CORRECTION",
                    "defaultValue": "new EntityTypeEnum('CORRECTION', { name: 'correction', iconName: 'cloud-rain', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "CYCLE",
                    "defaultValue": "new EntityTypeEnum('CYCLE', { name: 'cycle', iconName: 'cpu', editable: false } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "DEFECT",
                    "defaultValue": "new EntityTypeEnum('DEFECT', { name: 'defect', iconName: 'chrome', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "FEATURE",
                    "defaultValue": "new EntityTypeEnum('FEATURE', { name: 'feature', iconName: 'compass', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "FOLDER",
                    "defaultValue": "new EntityTypeEnum('FOLDER', { name: 'folder', iconName: 'credit-card', editable: false } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "PROJECT",
                    "defaultValue": "new EntityTypeEnum('PROJECT', { name: 'project', iconName: 'copy', editable: false } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "QUICKTEST",
                    "defaultValue": "new EntityTypeEnum('QUICKTEST', { name: 'quick test', iconName: 'coffee', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "REQUIREMENT",
                    "defaultValue": "new EntityTypeEnum('REQUIREMENT', { name: 'requirement', iconName: 'clipboard', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "TASK",
                    "defaultValue": "new EntityTypeEnum('TASK', { name: 'task', iconName: 'cloud-lightning', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "TEST",
                    "defaultValue": "new EntityTypeEnum('TEST', { name: 'test', iconName: 'cloud-snow', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "USERSTORY",
                    "defaultValue": "new EntityTypeEnum('USERSTORY', { name: 'user story', iconName: 'cloud-off', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "value",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114,
                        132
                    ]
                },
                {
                    "name": "WORKSTREAM",
                    "defaultValue": "new EntityTypeEnum('WORKSTREAM', { name: 'workstream', iconName: 'clock', editable: true } )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "toString",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActionButtonComponent",
            "id": "component-ActionButtonComponent-907906d95161a15bbfb395db17b075ab",
            "file": "projects/design-system-lib/src/lib/action-button/action-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-action-button",
            "styleUrls": [
                "./action-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "iconBeforeHeight",
                    "defaultValue": "'auto'",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "iconBeforeName",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "iconBeforeStrokeColor",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "iconBeforeStrokeWidth",
                    "line": 14,
                    "type": "number"
                },
                {
                    "name": "iconBeforeWidth",
                    "defaultValue": "'auto'",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "isMenuTrigger",
                    "defaultValue": "false",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "isStandalone",
                    "defaultValue": "true",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'p-action-button',\r\n  templateUrl: './action-button.component.html',\r\n  styleUrls: ['./action-button.component.scss'],\r\n})\r\nexport class ActionButtonComponent {\r\n  @Input() label: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() iconBeforeName: string;\r\n  @Input() iconBeforeWidth: string = 'auto';\r\n  @Input() iconBeforeHeight: string = 'auto';\r\n  @Input() iconBeforeStrokeWidth: number;\r\n  @Input() iconBeforeStrokeColor: string;\r\n  @Input() isMenuTrigger: boolean = false;\r\n  @Input() isStandalone: boolean = true;\r\n  public isActive: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n$action-btn-height: 38px;\r\n\r\n.p-action-btn {\r\n  @include resetButton;\r\n  display: flex;\r\n  align-items: center;\r\n  font-family: $font-family-basic;\r\n  font-size: $small-font-size;\r\n  height: $action-btn-height;\r\n  padding-right: $gap-base;\r\n  padding-left: $gap-base;\r\n  border-radius: $btn-border-radius;\r\n  white-space: nowrap;\r\n\r\n  &.standalone {\r\n    color: $secondary-a-700;\r\n    font-weight: 600;\r\n    &:not(:disabled):not(.active):hover,\r\n    &:not(:disabled):not(.active):focus {\r\n      background-color: $primary-c-50;\r\n    }\r\n  }\r\n  &:not(.standalone) {\r\n    color: $primary-a-900;\r\n    font-weight: 400;\r\n    &:not(:disabled):not(.active):hover,\r\n    &:not(:disabled):not(.active):focus {\r\n      color: $secondary-a-700;\r\n    }\r\n  }\r\n\r\n  &.active {\r\n    color: $secondary-a-700;\r\n    background-color: $primary-c-50;\r\n  }\r\n\r\n  &:disabled {\r\n    color: $gray-scale-600;\r\n    pointer-events: none;\r\n  }\r\n\r\n  // class of the before icon\r\n  &-icon {\r\n    margin-right: $gap-small;\r\n  }\r\n\r\n  // class of the after icon (chevron-down)\r\n  &-arrow {\r\n    margin-left: $gap-small;\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./action-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button class=\"p-action-btn\"\r\n        [ngClass]=\"{'menu-trigger' : isMenuTrigger, 'active' : isActive, 'standalone' : isStandalone}\"\r\n        [disabled]=\"disabled\"\r\n        (click)=\"isActive = true\"\r\n        (blur)=\"isActive = false\">\r\n  <p-icon *ngIf=\"iconBeforeName\"\r\n          class=\"p-action-btn-icon\"\r\n          [iconName]=\"iconBeforeName\"\r\n          [width]=\"iconBeforeWidth\"\r\n          [height]=\"iconBeforeHeight\"\r\n          [stroke]=\"iconBeforeStrokeColor\"\r\n          [strokeWidth]=\"iconBeforeStrokeWidth\"\r\n          [disabled]=\"disabled\"></p-icon>\r\n  <span class=\"p-action-btn-label\">{{label}}</span>\r\n  <p-icon *ngIf=\"isMenuTrigger\"\r\n          class=\"p-action-btn-arrow\"\r\n          iconName=\"chevron-down\"\r\n          [width]=\"17\"\r\n          [disabled]=\"disabled\"></p-icon>\r\n</button>\r\n"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-071f9bd18b5f47a15529434f5fe80056",
            "file": "projects/design-system-lib/src/lib/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "IAlertData",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "onAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject} from '@angular/core';\r\nimport {MAT_SNACK_BAR_DATA, MatSnackBarRef} from '@angular/material/snack-bar';\r\nimport {IAlertData} from './alert.interface';\r\n\r\n@Component({\r\n  selector: 'p-alert',\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.scss'],\r\n})\r\n\r\nexport class AlertComponent {\r\n  constructor(private snackBarRef: MatSnackBarRef<AlertComponent>,\r\n              @Inject(MAT_SNACK_BAR_DATA) public data: IAlertData){}\r\n\r\n  onAction(): void {\r\n    alert('Alert action was triggered!');\r\n  }\r\n\r\n  dismiss(): void {\r\n    this.snackBarRef.dismiss();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n$alert-height: 43px;\r\n$alert-padding: 12px;\r\n$alert-elements-gap: 5px;\r\n\r\n::ng-deep .p-alert {\r\n  display: flex;\r\n  align-items: center;\r\n  min-width: -moz-fit-content;\r\n  min-width: fit-content;\r\n  color: $primary-a-900;\r\n  height: $alert-height;\r\n  padding: 0;\r\n  background: transparent;\r\n  border-radius: 0;\r\n  box-shadow: none;\r\n  &-primary {\r\n    color: $gray-scale-1;\r\n    background-color: $primary-a-900;\r\n  }\r\n  &-secondary {\r\n    background-color: $secondary-a-50;\r\n  }\r\n  &-warning {\r\n    background-color: $supportive-alert-50;\r\n  }\r\n  &-medium {\r\n    background-color: $supportive-medium-50;\r\n  }\r\n  &-success {\r\n    background-color: $supportive-success-50;\r\n  }\r\n\r\n  &-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding-right: $alert-padding;\r\n    padding-left: $alert-padding;\r\n    white-space: nowrap;\r\n  }\r\n\r\n  &-icon,\r\n  &-message-main,\r\n  &-message-sub,\r\n  &-action {\r\n    & + & {\r\n      margin-left: $alert-elements-gap;\r\n    }\r\n  }\r\n\r\n  &-message-main,\r\n  &-message-sub {\r\n    font-family: $font-family-basic;\r\n    font-size: $small-font-size;\r\n  }\r\n\r\n  &-action {\r\n    @include resetLink;\r\n    font-family: $font-family-basic;\r\n    font-size: $small-font-size;\r\n    color: $secondary-a-700;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n    ::ng-deep .p-alert-primary & {\r\n      color: $secondary-a-500;\r\n    }\r\n  }\r\n\r\n  &-close {\r\n    @include resetButton;\r\n    display: inline-block;\r\n    font-size: 0;\r\n    width: 20px;\r\n    height: 20px;\r\n    margin-right: -5px;\r\n    margin-bottom: 10px;\r\n    margin-left: 6px;\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<AlertComponent>"
                    },
                    {
                        "name": "data",
                        "type": "IAlertData"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "snackBarRef",
                        "type": "MatSnackBarRef<AlertComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IAlertData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"p-alert-container\">\r\n  <p-icon *ngIf=\"data?.icon\"\r\n          class=\"p-alert-icon\"\r\n          [iconName]=\"data.icon?.iconName\"\r\n          [width]=\"data.icon?.width\"\r\n          [height]=\"data.icon?.height\"\r\n          [fill]=\"data.icon?.fill\"\r\n          [stroke]=\"data.icon?.stroke\"\r\n          [strokeWidth]=\"data.icon?.strokeWidth\"\r\n          [strokeLinecap]=\"data.icon?.strokeLinecap\"\r\n          [strokeLinejoin]=\"data.icon?.strokeLinejoin\"></p-icon>\r\n  <span class=\"p-alert-message-main\" *ngIf=\"data?.messageMain\">\r\n    {{data.messageMain}}\r\n  </span>\r\n  <a href=\"\" class=\"p-alert-action\" *ngIf=\"data?.actionName\"\r\n          (click)=\"onAction()\">\r\n    {{data.actionName}}\r\n  </a>\r\n  <span class=\"p-alert-message-sub\" *ngIf=\"data?.messageSub\">\r\n    {{data.messageSub}}\r\n  </span>\r\n  <button class=\"p-alert-close\" *ngIf=\"data?.closeBtnName\"\r\n          (click)=\"dismiss()\">\r\n    {{data.closeBtnName}}\r\n    <p-icon class=\"p-alert-close-icon\"\r\n            [iconName]=\"'x'\"\r\n            [width]=\"14\"\r\n            [height]=\"14\"></p-icon>\r\n  </button>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "AlertTriggerComponent",
            "id": "component-AlertTriggerComponent-7affd442a538d9c0c370c22999527339",
            "file": "src/stories/alert/alert-trigger.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "alert-trigger",
            "styleUrls": [
                "./alert-trigger.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert-trigger.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 13,
                    "type": "IAlertData"
                },
                {
                    "name": "duration",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "horizontalPosition",
                    "defaultValue": "'center'",
                    "line": 15,
                    "type": "MatSnackBarHorizontalPosition"
                },
                {
                    "name": "panelClass",
                    "line": 18,
                    "type": "string | string[]"
                },
                {
                    "name": "triggerBtnName",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "type",
                    "defaultValue": "AlertEnum.Primary",
                    "line": 14,
                    "type": "AlertEnum"
                },
                {
                    "name": "verticalPosition",
                    "defaultValue": "'top'",
                    "line": 16,
                    "type": "MatSnackBarVerticalPosition"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "triggerAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {MatSnackBar, MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition} from '@angular/material/snack-bar';\r\nimport {AlertComponent} from 'projects/design-system-lib/src/lib/alert/alert.component';\r\nimport {AlertEnum} from 'projects/design-system-lib/src/lib/alert/alert.enum';\r\nimport {IAlertData} from 'projects/design-system-lib/src/lib/alert/alert.interface';\r\n\r\n@Component({\r\n  selector: 'alert-trigger',\r\n  templateUrl: './alert-trigger.component.html',\r\n  styleUrls: ['./alert-trigger.component.scss']\r\n})\r\nexport class AlertTriggerComponent {\r\n  @Input() data: IAlertData;\r\n  @Input() type: AlertEnum = AlertEnum.Primary; // required\r\n  @Input() horizontalPosition: MatSnackBarHorizontalPosition = 'center';\r\n  @Input() verticalPosition: MatSnackBarVerticalPosition = 'top';\r\n  @Input() duration: number;\r\n  @Input() panelClass: string | string[];\r\n  @Input() triggerBtnName: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) {}\r\n\r\n  triggerAlert(): void {\r\n    this.panelClass = ['p-alert', 'p-alert-' + this.type];\r\n    this.snackBar.openFromComponent(AlertComponent, {\r\n      data: this.data,\r\n      panelClass: this.panelClass, // required\r\n      horizontalPosition: this.horizontalPosition,\r\n      verticalPosition: this.verticalPosition,\r\n      duration: this.duration\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alert-trigger.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button class=\"p-btn p-btn-small p-btn-secondary\"\r\n        (click)=\"triggerAlert()\">\r\n  {{triggerBtnName}}\r\n</button>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b73be872e5a1dcc1348b5ee76dbf362e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "{\r\n    icon: { iconName: 'bell'},\r\n    messageMain: 'Notification message.',\r\n    actionName: 'Action',\r\n    messageSub: 'Notification message.',\r\n    closeBtnName: 'Close'\r\n  }",
                    "line": 14
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkboxList",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "filterAriaLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "filterPlaceholder",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "footerBtnFirst",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "footerBtnLast",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "headerBtnFirst",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "headerBtnLast",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "inputMax",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "inputMin",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "inputTable",
                    "defaultValue": "inputTable",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "labelType",
                    "defaultValue": "LabelTypesEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "menuList",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "menuListFreeText",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "menuListRadio",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "menuTriggerName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "optionsList",
                    "defaultValue": "[{\r\n    optionName: 'First',\r\n    checked: true\r\n  },\r\n  {\r\n    optionName: 'Second'\r\n  }]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "optionsListName",
                    "defaultValue": "'twoLabelsToggle'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "validator",
                    "defaultValue": "Validators.required",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {ButtonTypeEnum} from 'projects/design-system-lib/src/public-api';\r\nimport {InputNumericSizeEnum} from 'projects/design-system-lib/src/public-api';\r\nimport {ReactiveFormsModule, Validators} from '@angular/forms';\r\nimport {LabelTypesEnum} from 'projects/design-system-lib/src/lib/labels/label-types.enum';\r\nimport {inputTable} from '../stories/input/inputTable';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  @Input() data = {\r\n    icon: { iconName: 'bell'},\r\n    messageMain: 'Notification message.',\r\n    actionName: 'Action',\r\n    messageSub: 'Notification message.',\r\n    closeBtnName: 'Close'\r\n  };\r\n  menuTriggerName: string;\r\n  menuList: any;\r\n  footerBtnFirst: any;\r\n  footerBtnLast: any;\r\n  filterAriaLabel: string;\r\n  filterPlaceholder: string;\r\n  headerBtnFirst: any;\r\n  headerBtnLast: any;\r\n  checkboxList: any;\r\n  validator = Validators.required;\r\n  labelType = LabelTypesEnum;\r\n  menuListRadio: any;\r\n  menuListFreeText: any;\r\n  inputMin: any;\r\n  inputMax: any;\r\n  optionsListName = 'twoLabelsToggle';\r\n  optionsList = [{\r\n    optionName: 'First',\r\n    checked: true\r\n  },\r\n  {\r\n    optionName: 'Second'\r\n  }];\r\n  inputTable = inputTable;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.menuTriggerName = 'Menu';\r\n    this.menuList = [\r\n      { name: 'Alabama',\r\n        disabled: false\r\n      },\r\n      { name: 'Alaska disabled',\r\n        disabled: true\r\n      },\r\n      { name: 'California',\r\n        disabled: false\r\n      },\r\n      { name: 'Colorado',\r\n        disabled: false\r\n      },\r\n      { name: 'Delaware',\r\n        disabled: false\r\n      },\r\n      { name: 'Florida selected disabled',\r\n        disabled: true,\r\n        selected: true\r\n      },\r\n      { name: 'Georgia',\r\n        disabled: false\r\n      },\r\n      { name: 'Hawaii',\r\n        disabled: false\r\n      },\r\n      { name: 'Idaho',\r\n        disabled: true\r\n      },\r\n      { name: 'Illinois',\r\n        disabled: false\r\n      },\r\n      { name: 'Indiana',\r\n        disabled: false\r\n      },\r\n      { name: 'Iowa',\r\n        disabled: false\r\n      },\r\n      { name: 'Kansas',\r\n        disabled: true,\r\n        selected: true\r\n      },\r\n      { name: 'Kentucky',\r\n        disabled: false\r\n      }\r\n    ];\r\n\r\n    this.footerBtnFirst = {\r\n      label: 'Done',\r\n      buttonType: ButtonTypeEnum.Primary\r\n    };\r\n    this.footerBtnLast = {\r\n      label: 'Cancel',\r\n      buttonType: ButtonTypeEnum.Secondary\r\n    };\r\n    this.filterAriaLabel = 'Find Label';\r\n    this.filterPlaceholder = 'Find Label';\r\n\r\n    this.headerBtnFirst = {\r\n      label: 'Clear selected',\r\n      buttonType: ButtonTypeEnum.Tertiary,\r\n      icon: {\r\n        iconName: 'eraser',\r\n        width: '15',\r\n        height: '15'\r\n      }\r\n    };\r\n    this.headerBtnLast = {\r\n      label: 'Not equal to'\r\n    };\r\n    this.checkboxList = [\r\n      {\r\n        checkbox: { label: 'Last'},\r\n        inputNum: { label: 'Release(s)', value: 1}\r\n      },\r\n      {\r\n        checkbox: { label: 'Last'},\r\n        inputNum: { label: 'Release(s)', value: 1}\r\n      },\r\n      {\r\n        checkbox: { label: 'Last'},\r\n        inputNum: { label: 'Release(s)', value: 1}\r\n      },\r\n      {\r\n        checkbox: { label: 'Last'},\r\n        inputNum: { label: 'Release(s)', value: 1}\r\n      },\r\n      {\r\n        checkbox: { label: 'Next'},\r\n        inputNum: { label: 'Release(s)', value: 1}\r\n      }\r\n    ];\r\n    this.menuListRadio =  [\r\n      { label: 'All' },\r\n      { label: 'Today' },\r\n      { label: 'Yesterday' },\r\n      { label: 'Tomorrow' },\r\n      { label: 'This',\r\n        menuList: [\r\n          { name: 'week (Starts Sunday)', selected: true},\r\n          { name: 'week (Starts Monday)'},\r\n          { name: 'month'},\r\n          { name: 'year'}\r\n        ]\r\n      },\r\n      { label: 'Last',\r\n        numericInputValue: 1,\r\n        menuList: [\r\n          { name: 'Day(s)', selected: true},\r\n          { name: 'Week(s)'},\r\n          { name: 'Month(s)'},\r\n          { name: 'Year(s)'}\r\n        ]\r\n      },\r\n      { label: 'Next',\r\n        numericInputValue: 1,\r\n        menuList: [\r\n          { name: 'Day(s)', selected: true},\r\n          { name: 'Week(s)'},\r\n          { name: 'Month(s)'},\r\n          { name: 'Year(s)'}\r\n        ]\r\n      },\r\n      { label: 'Blanks' },\r\n      { label: 'Between',\r\n        dateStart: {\r\n          ariaLabel: 'date start'\r\n        },\r\n        dateEnd: {\r\n          ariaLabel: 'date start'\r\n        }\r\n      }\r\n    ];\r\n    this.menuListFreeText = [\r\n      { name: 'Contains', inputValue: '', selected: true },\r\n      { name: 'Not contains', inputValue: 'smth', selected: false },\r\n      { name: 'Empty', selected: false },\r\n      { name: 'Not empty', selected: false }\r\n    ];\r\n    this.inputMin = { label: 'Min', value: null };\r\n    this.inputMax = { label: 'Max', value: 1 };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 44
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p-input-text-table-layout title='Resolution'\r\n                           [table]=\"inputTable\"></p-input-text-table-layout>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-7e92cc6eed14e2b4dfc64ac30dd8c0ae",
            "file": "projects/design-system-lib/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum.Primary",
                    "line": 24,
                    "type": "ButtonTypeEnum"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "iconAfter",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "iconAfterHeight",
                    "defaultValue": "'auto'",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "iconAfterStrokeColor",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "iconAfterStrokeWidth",
                    "line": 22,
                    "type": "number"
                },
                {
                    "name": "iconAfterWidth",
                    "defaultValue": "'auto'",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "iconBefore",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "iconBeforeHeight",
                    "defaultValue": "'auto'",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "iconBeforeStrokeColor",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "iconBeforeStrokeWidth",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "iconBeforeWidth",
                    "defaultValue": "'auto'",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "large",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 25,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {ButtonTypeEnum} from './button-type.enum';\r\n\r\n@Component({\r\n  selector: 'p-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\nexport class ButtonComponent {\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string;\r\n  @Input() large: boolean = false;\r\n  @Input() disabled: boolean = false;\r\n  @Input() iconBefore: string;\r\n  @Input() iconBeforeWidth: string = 'auto';\r\n  @Input() iconBeforeHeight: string = 'auto';\r\n  @Input() iconBeforeStrokeWidth: number;\r\n  @Input() iconBeforeStrokeColor: string;\r\n  @Input() iconAfter: string;\r\n  @Input() iconAfterWidth: string = 'auto';\r\n  @Input() iconAfterHeight: string = 'auto';\r\n  @Input() iconAfterStrokeWidth: number;\r\n  @Input() iconAfterStrokeColor: string;\r\n  @Input() buttonType: ButtonTypeEnum = ButtonTypeEnum.Primary;\r\n  @Output() onClickTask: EventEmitter<any> = new EventEmitter();\r\n\r\n  public get classes(): string[] {\r\n    const classParams = [];\r\n    this.iconBefore ? classParams.push('p-btn-icon-before') : null;\r\n    this.iconAfter ? classParams.push('p-btn-icon-after') : null;\r\n    classParams.push(`p-btn-${this.buttonType}`);\r\n    if (this.buttonType !== ButtonTypeEnum.IsIcon) {\r\n      this.large  ? classParams.push('p-btn-large') : classParams.push('p-btn-small');\r\n    }\r\n    return classParams;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n::ng-deep .p-btn {\r\n  @include resetButton;\r\n  font-family: $font-family-basic;\r\n  font-size: $small-font-size;\r\n  font-weight: 500;\r\n  line-height: 20px;\r\n  min-width: 80px;\r\n  padding-right: $gap-double-plus;\r\n  padding-left: $gap-double-plus;\r\n  border-radius: $btn-border-radius;\r\n  white-space: nowrap;\r\n  transition: all 400ms;\r\n\r\n  &-large {\r\n    height: $btn-large-height;\r\n  }\r\n\r\n  &-small {\r\n    height: $btn-small-height;\r\n  }\r\n\r\n  &:disabled {\r\n    pointer-events: none;\r\n  }\r\n\r\n  &-primary {\r\n    color: $gray-scale-1;\r\n    background-color: $secondary-a-700;\r\n    &:hover {\r\n      background-color: $secondary-a-800;\r\n    }\r\n    &:focus {\r\n      background-color: $secondary-a-800;\r\n    }\r\n    &:disabled {\r\n      color: $gray-scale-700;\r\n      background-color: $secondary-a-50;\r\n    }\r\n  }\r\n\r\n  &-secondary {\r\n    color: $secondary-a-700;\r\n    background-color: $gray-scale-1;\r\n    border: 1px solid $secondary-a-700;\r\n    &:hover {\r\n      background-color: $primary-c-50;\r\n    }\r\n    &:focus {\r\n      background-color: $primary-c-50;\r\n    }\r\n    &:disabled {\r\n      color: $gray-scale-700;\r\n      border-color: $secondary-a-500;\r\n    }\r\n  }\r\n\r\n  &-tertiary {\r\n    color: $secondary-a-700;\r\n    background-color: $gray-scale-1;\r\n    &:hover {\r\n      background-color: $primary-c-50;\r\n    }\r\n    &:focus {\r\n      background-color: $primary-c-50;\r\n    }\r\n    &:disabled {\r\n      color: $gray-scale-700;\r\n    }\r\n  }\r\n\r\n  &-distructive {\r\n    color: $gray-scale-1;\r\n    background-color: $supportive-alert-500;\r\n    &:hover {\r\n      background-color: $supportive-alert-700;\r\n    }\r\n    &:focus {\r\n      background-color: $supportive-alert-700;\r\n    }\r\n    &:disabled {\r\n      color: $gray-scale-700;\r\n      background-color: $supportive-alert-50;\r\n    }\r\n  }\r\n\r\n  // class of the action-button\r\n  &-icon-before {\r\n    padding-left: $gap-double;\r\n    .p-btn-label {\r\n      margin-left: $gap-base;\r\n    }\r\n  }\r\n  // class of the action-button\r\n  &-icon-after {\r\n    padding-right: $gap-double;\r\n    .p-btn-label {\r\n      margin-right: $gap-base;\r\n    }\r\n  }\r\n\r\n  // class of the icon\r\n  &-icon-pre,\r\n  &-icon-post {\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  &-isIcon {\r\n    line-height: unset;\r\n    min-width: unset;\r\n    padding: $gap-small;\r\n    &:disabled {\r\n      color: $gray-scale-700;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 27
                    }
                }
            },
            "templateData": "<button class=\"p-btn\"\r\n        [ngClass]=\"classes\"\r\n        [disabled]=\"disabled\"\r\n        attr.aria-label=\"{{ariaLabel}}\"\r\n        (click)=\"onClickTask.emit($event)\">\r\n  <p-icon *ngIf=\"iconBefore\"\r\n          class=\"p-btn-icon-pre\"\r\n          [iconName]=\"iconBefore\"\r\n          [width]=\"iconBeforeWidth\"\r\n          [height]=\"iconBeforeHeight\"\r\n          [stroke]=\"iconBeforeStrokeColor\"\r\n          [strokeWidth]=\"iconBeforeStrokeWidth\"\r\n          [disabled]=\"disabled\"></p-icon>\r\n  <span class=\"p-btn-label\" *ngIf=\"label\">{{label}}</span>\r\n  <p-icon *ngIf=\"iconAfter\"\r\n          class=\"p-btn-icon-post\"\r\n          [iconName]=\"iconAfter\"\r\n          [width]=\"iconAfterWidth\"\r\n          [height]=\"iconAfterHeight\"\r\n          [stroke]=\"iconAfterStrokeColor\"\r\n          [strokeWidth]=\"iconAfterStrokeWidth\"\r\n          [disabled]=\"disabled\"></p-icon>\r\n</button>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-9a9df3c9f656cee337ed236827d3bf1f",
            "file": "projects/design-system-lib/src/lib/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "indeterminate",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "selectAll",
                    "defaultValue": "false",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'p-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n})\r\nexport class CheckboxComponent {\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string;\r\n  @Input() checked: boolean = false;\r\n  @Input() disabled: boolean = false;\r\n  @Input() selectAll: boolean = false;\r\n  @Input() indeterminate: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n::ng-deep.p-checkbox {\r\n  // material styles override\r\n  .mat-checkbox-label {\r\n    font-family: $font-family-basic;\r\n    font-size: $small-font-size;\r\n  }\r\n  .mat-checkbox-frame {\r\n    background-color: $gray-scale-1;\r\n    border-width: 1px;\r\n    border-color: $gray-scale-400;\r\n  }\r\n  .mat-ripple-element {\r\n    display: none;\r\n  }\r\n\r\n  // hover\r\n  // focus\r\n  &:not(.mat-checkbox-disabled):hover,\r\n  &.cdk-focused {\r\n    .mat-checkbox-frame {\r\n      border-color: $secondary-a-700;\r\n    }\r\n    .mat-checkbox-mixedmark {\r\n      background-color: $secondary-a-700;\r\n    }\r\n  }\r\n\r\n  // disabled\r\n  &.mat-checkbox-disabled {\r\n    &:not(.mat-checkbox-checked) .mat-checkbox-frame {\r\n      background-color: $primary-c-50;\r\n      border-color: $gray-scale-400;\r\n    }\r\n    .mat-checkbox-label {\r\n      color: $gray-scale-600;\r\n    }\r\n  }\r\n\r\n  // checked\r\n  &.mat-checkbox-checked {\r\n    .mat-checkbox-background {\r\n      background-color: $secondary-a-700;\r\n    }\r\n    // checked + hover\r\n    &:not(.mat-checkbox-disabled):hover {\r\n      .mat-checkbox-background {\r\n        background-color: $secondary-a-800;\r\n      }\r\n    }\r\n\r\n    // checked + disabled\r\n    &.mat-checkbox-disabled {\r\n      .mat-checkbox-background {\r\n        background-color: $secondary-a-200;\r\n      }\r\n    }\r\n  }\r\n  .mat-checkbox-checkmark-path {\r\n    stroke: $gray-scale-1 !important;\r\n    stroke-width: 3px;\r\n  }\r\n  .mat-checkbox-checkmark {\r\n    width: 88%;\r\n    left: 1px;\r\n  }\r\n  .mat-checkbox-checkmark {\r\n    fill: $gray-scale-1;\r\n  }\r\n\r\n  // select all\r\n  &.select-all {\r\n    .mat-checkbox-frame {\r\n      border-color: $primary-a-900;\r\n    }\r\n  }\r\n\r\n  // indeterminate\r\n  &.mat-checkbox-indeterminate {\r\n    .mat-checkbox-background {\r\n      background-color: transparent;\r\n    }\r\n    .mat-checkbox-frame {\r\n      border-width: 1px;\r\n      border-color: $primary-a-900;\r\n    }\r\n    .mat-checkbox-checkmark {\r\n      transform: rotate(0);\r\n    }\r\n  }\r\n  .mat-checkbox-mixedmark {\r\n    width: calc(100% - 8px);\r\n    height: 2px;\r\n    background-color: $primary-a-900;\r\n  }\r\n}\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-checkbox\r\n  class=\"p-checkbox\"\r\n  [ngClass]=\"{'select-all': selectAll}\"\r\n  [aria-label]=\"ariaLabel\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  [indeterminate]=\"indeterminate\">\r\n  <ng-container *ngIf=\"label\">\r\n    {{label}}\r\n  </ng-container>\r\n</mat-checkbox>\r\n"
        },
        {
            "name": "CheckboxGroupComponent",
            "id": "component-CheckboxGroupComponent-744316ee38c69f0373d437d712b0d135",
            "file": "src/stories/checkbox/checkbox-group/checkbox-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-checkbox-group",
            "styleUrls": [
                "./checkbox-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkboxGroup",
                    "line": 11,
                    "type": "ICheckbox[]"
                },
                {
                    "name": "error",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "groupTitle",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {ICheckbox} from 'projects/design-system-lib/src/public-api';\r\n\r\n@Component({\r\n  selector: 'p-checkbox-group',\r\n  templateUrl: './checkbox-group.component.html',\r\n  styleUrls: ['./checkbox-group.component.scss'],\r\n})\r\nexport default class CheckboxGroupComponent {\r\n  @Input() groupTitle: string;\r\n  @Input() checkboxGroup: ICheckbox[];\r\n  @Input() error: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n.checkbox-group {\r\n  &-title {\r\n    font-family: $font-family-basic;\r\n    font-size: $tiny-font-size;\r\n    font-weight: 700;\r\n    line-height: 18px;\r\n  }\r\n  &-list {\r\n    @include resetUl;\r\n  }\r\n  &-item {\r\n    margin-top: 10px;\r\n  }\r\n  &-error {\r\n    font-family: $font-family-basic;\r\n    font-size: $tiny-font-size;\r\n    line-height: 18px;\r\n    color: $supportive-alert-500;\r\n    margin-top: 10px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./checkbox-group.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"checkbox-group\">\r\n  <h3 class=\"checkbox-group-title\">{{groupTitle}}</h3>\r\n    <ul class=\"checkbox-group-list\">\r\n      <li *ngFor=\"let checkbox of checkboxGroup\" class=\"checkbox-group-item\">\r\n        <p-checkbox [label]=\"checkbox.label\"\r\n                    [ariaLabel]=\"checkbox.ariaLabel\"\r\n                    [checked]=\"checkbox.checked\"\r\n                    [disabled]=\"checkbox.disabled\">\r\n        </p-checkbox>\r\n      </li>\r\n    </ul>\r\n  <p *ngIf=\"error\" class=\"checkbox-group-error\">{{error}}</p>\r\n</div>\r\n"
        },
        {
            "name": "CheckboxGroupPageComponent",
            "id": "component-CheckboxGroupPageComponent-acfc98b95e9e264deed6de805334a97d",
            "file": "src/stories/checkbox/checkbox-group-page/checkbox-group-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-checkbox-group-page",
            "styleUrls": [
                "./checkbox-group-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox-group-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkboxGroupPage",
                    "line": 10,
                    "type": "ICheckboxGroup[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport ICheckboxGroup from '../checkbox-group/checkbox-group.interface';\r\n\r\n@Component({\r\n  selector: 'p-checkbox-group-page',\r\n  templateUrl: './checkbox-group-page.component.html',\r\n  styleUrls: ['./checkbox-group-page.component.scss'],\r\n})\r\nexport default class CheckboxGroupPageComponent {\r\n  @Input() checkboxGroupPage: ICheckboxGroup[];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n.checkbox-group-page {\r\n  .page-main {\r\n    margin-top: 110px;\r\n  }\r\n  &-list {\r\n    display: flex;\r\n    @include resetUl;\r\n  }\r\n  &-item:not(:first-child) {\r\n    margin-left: 140px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./checkbox-group-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"page checkbox-group-page\">\r\n    <header class=\"page-header\">\r\n      <h1 class=\"page-title\">Checkbox / <span class=\"page-header-highlighted\">Examples</span></h1>\r\n    </header>\r\n\r\n    <main class=\"page-main\">\r\n      <ul class=\"checkbox-group-page-list\">\r\n        <li *ngFor=\"let group of checkboxGroupPage\" class=\"checkbox-group-page-item\">\r\n          <p-checkbox-group [groupTitle]=\"group.groupTitle\"\r\n                          [checkboxGroup]=\"group.checkboxGroup\"\r\n                          [error]=\"group.error\">\r\n          </p-checkbox-group>\r\n        </li>\r\n      </ul>\r\n\r\n    </main>\r\n</div>\r\n"
        },
        {
            "name": "CheckboxPageComponent",
            "id": "component-CheckboxPageComponent-e1c761147f5ebe593344e9c2c0672193",
            "file": "src/stories/checkbox/checkbox-page/checkbox-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-checkbox-page",
            "styleUrls": [
                "./checkbox-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkboxesPage",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "originalOrder",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {KeyValue} from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'p-checkbox-page',\r\n  templateUrl: './checkbox-page.component.html',\r\n  styleUrls: ['./checkbox-page.component.scss'],\r\n})\r\nexport default class CheckboxPageComponent {\r\n  @Input() checkboxesPage: any;\r\n\r\n  originalOrder = (a: KeyValue<number, string>, b: KeyValue<number, string>): number => {\r\n    return 0;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"page checkboxes\">\r\n    <header class=\"page-header\">\r\n      <h1 class=\"page-title\">Checkbox / <span class=\"page-header-highlighted\">Base</span></h1>\r\n    </header>\r\n\r\n    <main class=\"page-main\">\r\n      <ul class=\"page-list header-list\">\r\n        <li class=\"list-header\"></li>\r\n        <li class=\"list-header\">[checked]=false</li>\r\n        <li class=\"list-header\">\r\n          [checked]=false\r\n          <br/>\r\n          [disabled]=true\r\n        </li>\r\n        <li class=\"list-header\">\r\n          [checked]=true\r\n        </li>\r\n        <li class=\"list-header\">\r\n          [checked]=true\r\n          <br/>\r\n          [disabled]=true\r\n        </li>\r\n        <li class=\"list-header\">\r\n          [selectAll]=true\r\n        </li>\r\n        <li class=\"list-header\">\r\n          [indeterminate]=true\r\n        </li>\r\n      </ul>\r\n\r\n      <ul *ngFor=\"let checkboxType of checkboxesPage | keyvalue: originalOrder\"\r\n          class=\"page-list content-list {{checkboxType.key}}\">\r\n        <li class=\"list-header\">\r\n          [{{checkboxType.key}}]=\"Label\"\r\n        </li>\r\n        <li *ngFor=\"let checkbox of checkboxType.value\" class=\"list-item\">\r\n          <p-checkbox [label]=\"checkbox.label\"\r\n                          [ariaLabel]=\"checkbox.ariaLabel\"\r\n                          [checked]=\"checkbox.checked\"\r\n                          [disabled]=\"checkbox.disabled\"\r\n                          [selectAll]=\"checkbox.selectAll\"\r\n                          [indeterminate]=\"checkbox.indeterminate\">\r\n          </p-checkbox>\r\n        </li>\r\n      </ul>\r\n\r\n    </main>\r\n</div>\r\n"
        },
        {
            "name": "ChipButtonComponent",
            "id": "component-ChipButtonComponent-10e41d32899a860737da274918f5199a",
            "file": "projects/design-system-lib/src/lib/chips/button/chip-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-chip-button",
            "styleUrls": [
                "./chip-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "full",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "iconRemove",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "values",
                    "line": 11,
                    "type": "string[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "removeChip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {ButtonTypeEnum} from '../../button/button-type.enum';\r\n\r\n@Component({\r\n  selector: 'p-chip-button',\r\n  templateUrl: './chip-button.component.html',\r\n  styleUrls: ['./chip-button.component.scss'],\r\n})\r\nexport class ChipButtonComponent {\r\n  @Input() label: string;\r\n  @Input() values: string[];\r\n  @Input() iconRemove: boolean;\r\n  @Input() full: boolean;\r\n  @Input() active: boolean;\r\n  @Output() onClickTask: EventEmitter<any> = new EventEmitter();\r\n  public buttonType = ButtonTypeEnum;\r\n\r\n  public get valuesInTooltip(): string {\r\n    let tooltipText = '';\r\n    this.values.forEach( value => tooltipText = `${tooltipText} \\n ${value}`);\r\n    return tooltipText;\r\n  }\r\n\r\n  removeChip(): void {\r\n    console.log('remove chip');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n$chip-height: 27px;\r\n\r\n.p-chip {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  height: $chip-height;\r\n  padding-right: $gap-small;\r\n  padding-left: $gap-small;\r\n  background-color: $gray-scale-1;\r\n  border: 1px solid currentColor;\r\n  border-radius: 16px;\r\n  cursor: pointer;\r\n  &:hover,\r\n  &:active,\r\n  &.active {\r\n    color: $secondary-a-700;\r\n  }\r\n\r\n  &-label {\r\n    margin-left: $gap-small;\r\n    &:after {\r\n      content: ':';\r\n    }\r\n  }\r\n\r\n  &-values {\r\n    @include resetUl;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-right: $gap-small;\r\n  }\r\n\r\n  &-value-item {\r\n    display: flex;\r\n    margin-left: $gap-small;\r\n    &:not(:last-child):after {\r\n      content: ';';\r\n    }\r\n  }\r\n\r\n  &-remove,\r\n  &-menuTrigger {\r\n    display: flex;\r\n    align-items: center;\r\n    ::ng-deep .p-btn-isIcon {\r\n      padding: 0;\r\n    }\r\n  }\r\n\r\n  &.full {\r\n    background-color: $secondary-a-50;\r\n  }\r\n}\r\n",
                    "styleUrl": "./chip-button.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "valuesInTooltip": {
                    "name": "valuesInTooltip",
                    "getSignature": {
                        "name": "valuesInTooltip",
                        "type": "string",
                        "returnType": "string",
                        "line": 18
                    }
                }
            },
            "templateData": "<mat-basic-chip class=\"p-chip\"\r\n                [disableRipple]=\"true\"\r\n                [ngClass]=\"{'full' : full, 'active' : active }\"\r\n                [matTooltip]=\"valuesInTooltip\"\r\n                matTooltipPosition=\"above\"\r\n                matTooltipClass=\"p-tooltip above\"\r\n                (click)=\"onClickTask.emit($event)\">\r\n  <p-button *ngIf=\"iconRemove\"\r\n            class=\"p-chip-remove\"\r\n            matChipRemove\r\n            ariaLabel=\"Remove Chip\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            iconBefore=\"x\"\r\n            iconBeforeWidth=\"12\"\r\n            iconBeforeStrokeWidth=\"2\"\r\n            (click)=\"removeChip()\"></p-button>\r\n  <span class=\"p-chip-label paragraph-2-default\">{{label}}</span>\r\n  <ul class=\"p-chip-values paragraph-2-default\" *ngIf=\"values?.length\">\r\n    <li class=\"p-chip-value-item\" *ngFor=\"let value of values\">\r\n      {{value}}\r\n    </li>\r\n  </ul>\r\n  <p-icon class=\"p-chip-menuTrigger\"\r\n          iconName=\"chevron-down\"\r\n          width=\"14\"\r\n          [strokeWidth]=\"2\"></p-icon>\r\n</mat-basic-chip>\r\n\r\n"
        },
        {
            "name": "ChipsComponent",
            "id": "component-ChipsComponent-7fddac8c97b823404e71bb7220de3945",
            "file": "projects/design-system-lib/src/lib/chips/bar/chips.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-chips",
            "styleUrls": [
                "./chips.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chips.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "chips",
                    "line": 11,
                    "type": "IChip[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 13,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "valuesInTooltip",
                    "args": [
                        {
                            "name": "values",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {IChip} from '../chip-button.interface';\r\nimport {ButtonTypeEnum} from '../../button/button-type.enum';\r\n\r\n@Component({\r\n  selector: 'p-chips',\r\n  templateUrl: './chips.component.html',\r\n  styleUrls: ['./chips.component.scss'],\r\n})\r\nexport class ChipsComponent {\r\n  @Input() chips: IChip[];\r\n  @Input() ariaLabel: string;\r\n  @Output() onClickTask: EventEmitter<any> = new EventEmitter();\r\n  public buttonType = ButtonTypeEnum;\r\n\r\n  valuesInTooltip(values: string[]): string {\r\n    let tooltipText = '';\r\n    values.forEach( value => tooltipText = `${tooltipText} \\n ${value}`);\r\n    return tooltipText;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../button/chip-button.component\";\r\n\r\n.p-chips-list {\r\n  .p-chip + .p-chip {\r\n    margin-left: $gap-base;\r\n  }\r\n}\r\n",
                    "styleUrl": "./chips.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-chip-list class=\"p-chips-list\" attr.aria-label=\"{{ariaLabel}}\">\r\n  <mat-basic-chip *ngFor=\"let chip of chips\"\r\n                  class=\"p-chip\"\r\n                  [disableRipple]=\"true\"\r\n                  [ngClass]=\"{'full' : chip.full, 'active' : chip.active }\"\r\n                  [matTooltip]=\"valuesInTooltip(chip.values)\"\r\n                  matTooltipPosition=\"above\"\r\n                  matTooltipClass=\"p-tooltip above\"\r\n                  (click)=\"onClickTask.emit($event)\">\r\n    <p-button *ngIf=\"chip.iconRemove\"\r\n              class=\"p-chip-remove\"\r\n              matChipRemove\r\n              ariaLabel=\"Remove Chip\"\r\n              [buttonType]=\"buttonType.IsIcon\"\r\n              iconBefore=\"x\"\r\n              iconBeforeWidth=\"12\"\r\n              iconBeforeStrokeWidth=\"2\"\r\n              (onClickTask)=\"removeChip()\"></p-button>\r\n    <span class=\"p-chip-label paragraph-2-default\">{{chip.label}}</span>\r\n    <ul class=\"p-chip-values paragraph-2-default\" *ngIf=\"chip.values?.length\">\r\n      <li class=\"p-chip-value-item\" *ngFor=\"let value of chip.values\">\r\n        {{value}}\r\n      </li>\r\n    </ul>\r\n    <p-icon class=\"p-chip-menuTrigger\"\r\n            iconName=\"chevron-down\"\r\n            width=\"14\"\r\n            [strokeWidth]=\"2\"></p-icon>\r\n  </mat-basic-chip>\r\n</mat-chip-list>\r\n"
        },
        {
            "name": "ChipsWithActionButtonsComponent",
            "id": "component-ChipsWithActionButtonsComponent-d61e5acf225fb1697ddec1fa3cb6fe7a",
            "file": "src/stories/chips/chips-with-action-buttons/chips-with-action-buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-chips-and-actions",
            "styleUrls": [
                "./chips-with-action-buttons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chips-with-action-buttons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "chips",
                    "line": 11,
                    "type": "IChip[]"
                },
                {
                    "name": "chipsAriaLabel",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "firstButton",
                    "line": 13,
                    "type": "IActionButton"
                },
                {
                    "name": "lastButton",
                    "line": 14,
                    "type": "IActionButton"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {IChip} from 'projects/design-system-lib/src/public-api';\r\nimport {IActionButton} from 'projects/design-system-lib/src/public-api';\r\n\r\n@Component({\r\n  selector: 'p-chips-and-actions',\r\n  templateUrl: './chips-with-action-buttons.component.html',\r\n  styleUrls: ['./chips-with-action-buttons.component.scss'],\r\n})\r\nexport class ChipsWithActionButtonsComponent {\r\n  @Input() chips: IChip[];\r\n  @Input() chipsAriaLabel: string;\r\n  @Input() firstButton: IActionButton;\r\n  @Input() lastButton: IActionButton;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../projects/design-system-lib/src/lib/assets/styles/custom\";\r\n\r\n.p-chips-and-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  * + * {\r\n    margin-left: $gap-base;\r\n  }\r\n}\r\n",
                    "styleUrl": "./chips-with-action-buttons.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-chips-and-actions\">\r\n  <p-action-button\r\n    [label]=\"firstButton.label\"\r\n    [disabled]=\"firstButton.disabled\"\r\n    [iconBeforeName]=\"firstButton.iconBeforeName\"\r\n    [iconBeforeWidth]=\"firstButton.iconBeforeWidth\"\r\n    [iconBeforeHeight]=\"firstButton.iconBeforeHeight\"\r\n    [iconBeforeStrokeWidth]=\"firstButton.iconBeforeStrokeWidth\"\r\n    [iconBeforeStrokeColor]=\"firstButton.iconBeforeStrokeColor\"\r\n    [isMenuTrigger]=\"firstButton.isMenuTrigger\"\r\n    [isStandalone]=\"firstButton.isStandalone\"></p-action-button>\r\n\r\n  <p-chips class=\"p-chips-comp\"\r\n           [chips]=\"chips\"\r\n           [ariaLabel]=\"chipsAriaLabel\"></p-chips>\r\n\r\n  <p-action-button\r\n    [label]=\"lastButton.label\"\r\n    [disabled]=\"lastButton.disabled\"\r\n    [iconBeforeName]=\"lastButton.iconBeforeName\"\r\n    [iconBeforeWidth]=\"lastButton.iconBeforeWidth\"\r\n    [iconBeforeHeight]=\"lastButton.iconBeforeHeight\"\r\n    [iconBeforeStrokeWidth]=\"lastButton.iconBeforeStrokeWidth\"\r\n    [iconBeforeStrokeColor]=\"lastButton.iconBeforeStrokeColor\"\r\n    [isMenuTrigger]=\"lastButton.isMenuTrigger\"\r\n    [isStandalone]=\"lastButton.isStandalone\"></p-action-button>\r\n</div>\r\n"
        },
        {
            "name": "ColorPaletteComponent",
            "id": "component-ColorPaletteComponent-6025b3bb51e6d6e30bf504c98150525e",
            "file": "src/stories/colors/color-palette.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-colors",
            "styleUrls": [
                "./color-palette.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-palette.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "originalOrder",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "palette",
                    "defaultValue": "palette",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "reverseKeyOrder",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\r\nimport {KeyValue} from '@angular/common';\r\n\r\nconst palette = {\r\n  primary: {\r\n    a: {\r\n      900: {name: 'P-A 900', labelColor: 'white'}\r\n    },\r\n    b: {\r\n      300: { name: 'P-B 300', labelColor: 'white' }\r\n    },\r\n    c: {\r\n      50: {name: 'P-C 50', labelColor: 'black'}\r\n    }\r\n  },\r\n  secondary: {\r\n    a: { 800: { name: 'S-A 800', labelColor: 'white' },\r\n      700: { name: 'S-A 700', labelColor: 'white' },\r\n      600: { name: 'S-A 600', labelColor: 'white' },\r\n      500: { name: 'S-A 500', labelColor: 'black' },\r\n      200: { name: 'S-A 200', labelColor: 'black' },\r\n      100: { name: 'S-A 100', labelColor: 'black' },\r\n      50: { name: 'S-A 50', labelColor: 'black' } },\r\n    b: { 700: { name: 'S-B 700', labelColor: 'white' },\r\n      500: { name: 'S-B 500', labelColor: 'white' },\r\n      400: { name: 'S-B 400', labelColor: 'white' },\r\n      300: { name: 'S-B 300', labelColor: 'white' },\r\n      200: { name: 'S-B 200', labelColor: 'black' },\r\n      100: { name: 'S-B 100', labelColor: 'black' },\r\n      50: { name: 'S-B 500', labelColor: 'black' }\r\n    }\r\n  },\r\n  gray: {\r\n    scale: { 800: { name: 'grayscale 800', labelColor: 'white' },\r\n        700: { name: 'grayscale 700', labelColor: 'white' },\r\n        600: { name: 'grayscale 600', labelColor: 'white' },\r\n        500: { name: 'grayscale 500', labelColor: 'white' },\r\n        400: { name: 'grayscale 400', labelColor: 'black' },\r\n        100: { name: 'grayscale 100', labelColor: 'black' },\r\n        50: { name: 'grayscale 50', labelColor: 'black' },\r\n        5: { name: 'grayscale 5', labelColor: 'black' },\r\n        1: { name: 'grayscale 1', labelColor: 'black' }\r\n    }\r\n  },\r\n  supportive: {\r\n    alert: {\r\n      800: { name: 'Alert 800', labelColor: 'white' },\r\n      700: { name: 'Alert 700', labelColor: 'white' },\r\n      600: { name: 'Alert 600', labelColor: 'black' },\r\n      500: { name: 'Alert 500', labelColor: 'black' },\r\n      50: { name: 'Alert 50', labelColor: 'black' }\r\n    },\r\n    low: {\r\n      400: { name: 'Low 400', labelColor: 'black' },\r\n      300: { name: 'Low 300', labelColor: 'black' }\r\n    },\r\n    medium: {\r\n      500: { name: 'Medium 500', labelColor: 'black' },\r\n      400: { name: 'Medium 400', labelColor: 'black' },\r\n      50: { name: 'Medium 50', labelColor: 'black' }\r\n    },\r\n    success: {\r\n      500: { name: 'Success 500', labelColor: 'black' },\r\n      400: { name: 'Success 400', labelColor: 'black' },\r\n      50: { name: 'Success 50', labelColor: 'black' }\r\n    }\r\n  },\r\n  dev: {\r\n    a: {\r\n      200: { name: 'A 200', labelColor: 'white' },\r\n      100: { name: 'A 100', labelColor: 'white' }\r\n    },\r\n    b: {\r\n      300: { name: 'B 300', labelColor: 'white' },\r\n      200: { name: 'B 200', labelColor: 'white' }\r\n    },\r\n    c: {\r\n      400: { name: 'C 400', labelColor: 'white' },\r\n      300: { name: 'C 300', labelColor: 'white' }\r\n    }\r\n  }\r\n};\r\n\r\n@Component({\r\n  selector: 'p-colors',\r\n  templateUrl: './color-palette.component.html',\r\n  styleUrls: ['./color-palette.component.scss'],\r\n})\r\nexport default class ColorPaletteComponent {\r\n  public palette = palette;\r\n\r\n  originalOrder = (a: KeyValue<number, string>, b: KeyValue<number, string>): number => {\r\n    return 0;\r\n  }\r\n\r\n  reverseKeyOrder = (a: KeyValue<number, string>, b: KeyValue<number, string>): number => {\r\n    return -1;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../projects/design-system-lib/src/lib/assets/styles/params/colors\";\r\n\r\n$colorScheme: (\r\n  primary-a-900: $primary-a-900,\r\n  primary-b-300: $primary-b-300,\r\n  primary-c-50: $primary-c-50,\r\n  secondary-a-800: $secondary-a-800,\r\n  secondary-a-700: $secondary-a-700,\r\n  secondary-a-600: $secondary-a-600,\r\n  secondary-a-500: $secondary-a-500,\r\n  secondary-a-200: $secondary-a-200,\r\n  secondary-a-100: $secondary-a-100,\r\n  secondary-a-50: $secondary-a-50,\r\n  secondary-b-700: $secondary-b-700,\r\n  secondary-b-500: $secondary-b-500,\r\n  secondary-b-400: $secondary-b-400,\r\n  secondary-b-300: $secondary-b-300,\r\n  secondary-b-200: $secondary-b-200,\r\n  secondary-b-100: $secondary-b-100,\r\n  secondary-b-50: $secondary-b-50,\r\n  gray-scale-800: $gray-scale-800,\r\n  gray-scale-700: $gray-scale-700,\r\n  gray-scale-600: $gray-scale-600,\r\n  gray-scale-500: $gray-scale-500,\r\n  gray-scale-400: $gray-scale-400,\r\n  gray-scale-100: $gray-scale-100,\r\n  gray-scale-50: $gray-scale-50,\r\n  gray-scale-5: $gray-scale-5,\r\n  gray-scale-1: $gray-scale-1,\r\n  supportive-alert-800: $supportive-alert-800,\r\n  supportive-alert-700: $supportive-alert-700,\r\n  supportive-alert-600: $supportive-alert-600,\r\n  supportive-alert-500: $supportive-alert-500,\r\n  supportive-alert-50: $supportive-alert-50,\r\n  supportive-low-400: $supportive-low-400,\r\n  supportive-low-300: $supportive-low-300,\r\n  supportive-medium-500 :$supportive-medium-500,\r\n  supportive-medium-400 :$supportive-medium-400,\r\n  supportive-medium-50: $supportive-medium-50,\r\n  supportive-success-500: $supportive-success-500,\r\n  supportive-success-400: $supportive-success-400,\r\n  supportive-success-50: $supportive-success-50,\r\n  dev-a-200: $dev-a-200,\r\n  dev-a-100: $dev-a-100,\r\n  dev-b-300: $dev-b-300,\r\n  dev-b-200: $dev-b-200,\r\n  dev-c-400: $dev-c-400,\r\n  dev-c-300: $dev-c-300,\r\n);\r\n\r\n$box-width: 209px;\r\n$box-height: 87px;\r\n$box-gap: 23px;\r\n\r\n@each $name, $value in $colorScheme {\r\n  .#{$name} {\r\n    background-color: $value;\r\n  }\r\n}\r\n\r\n.page {\r\n  width: fit-content;\r\n}\r\n\r\n.color {\r\n  &-scheme {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 1900px;\r\n    &-group {\r\n      margin-bottom: 193px;\r\n      &:nth-child(odd) {\r\n        width: $box-width * 3 + $box-gap * 2;\r\n        margin-right: 259px;\r\n      }\r\n      &:nth-child(even) {\r\n        flex-basis: $box-width * 4 + $box-gap * 3;\r\n      }\r\n    }\r\n    &-title {\r\n      font-size: 17px;\r\n      color: $gray-scale-700;\r\n      line-height: 21.37px;\r\n      text-transform: capitalize;\r\n      flex-basis: 100%;\r\n      padding-bottom: 14px;\r\n    }\r\n    &-container {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      width: fit-content;\r\n      padding-top: 50px;\r\n      border-top: 1px solid $black;\r\n    }\r\n  }\r\n\r\n  &-column {\r\n    & ~ & {\r\n      margin-left: $box-gap;\r\n    }\r\n  }\r\n\r\n  &-box {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    font-size: 17px;\r\n    line-height: 21px;\r\n    width: $box-width;\r\n    height: $box-height;\r\n    padding-left: 25px;\r\n    padding-right: 25px;\r\n    &.white {\r\n      color: $gray-scale-1;\r\n      font-weight: 500;\r\n    }\r\n    &.black {\r\n      color: $primary-a-900;\r\n      font-weight: 700;\r\n    }\r\n  }\r\n\r\n  &-box-name,\r\n  &-box-class {\r\n    line-height: 21.37px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-palette.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"page\">\r\n  <header class=\"page-header\">\r\n    <h1 class=\"page-title\">Colors / <span class=\"page-title-highlighted\">Scheme</span></h1>\r\n  </header>\r\n\r\n  <main class=\"page-main\">\r\n    <div *ngIf=\"palette\" class=\"color-scheme\">\r\n      <div *ngFor=\"let group of palette | keyvalue: originalOrder\"\r\n           class=\"color-scheme-group {{group.key}}\">\r\n        <ng-template [ngIf]=\"group.key === 'gray'\" [ngIfElse]=\"regularTitle\">\r\n          <h2 class=\"color-scheme-title\">Grayscale</h2>\r\n        </ng-template>\r\n\r\n        <ng-template #regularTitle>\r\n          <h2 class=\"color-scheme-title\">{{group.key}}</h2>\r\n        </ng-template>\r\n\r\n        <div class=\"color-scheme-container\">\r\n          <div *ngFor=\"let column of group.value | keyvalue: originalOrder\"\r\n               class=\"color-column color-{{group.key}}-{{column.key}}\">\r\n            <div *ngFor=\"let box of column.value | keyvalue: reverseKeyOrder\"\r\n                 class=\"color-box {{group.key}}-{{column.key}}-{{box.key}} {{box.value.labelColor}}\">\r\n              <p class=\"color-box-class\">${{group.key}}-{{column.key}}-{{box.key}}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </main>\r\n</div>\r\n"
        },
        {
            "name": "ComboComponent",
            "id": "component-ComboComponent-3e6332ba6c5290f37fcb6b387c9947ec",
            "file": "src/stories/menu/combobox/combo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-combo",
            "styleUrls": [
                "./combo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./combo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonFirst",
                    "line": 29,
                    "type": "IMenuButton"
                },
                {
                    "name": "buttonLast",
                    "line": 30,
                    "type": "IMenuButton"
                },
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "line": 23
                },
                {
                    "name": "checkboxList",
                    "line": 53,
                    "type": "literal type[]"
                },
                {
                    "name": "filterAriaLabel",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "filterPlaceholder",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "footerBtnFirst",
                    "line": 39,
                    "type": "IMenuButton"
                },
                {
                    "name": "footerBtnLast",
                    "line": 40,
                    "type": "IMenuButton"
                },
                {
                    "name": "freeTextMenuList",
                    "line": 68,
                    "type": "any"
                },
                {
                    "name": "freeTextMenuTrigger",
                    "line": 67,
                    "type": "IChip"
                },
                {
                    "name": "groupTitle",
                    "line": 28,
                    "type": "any"
                },
                {
                    "name": "hashtagList",
                    "line": 43,
                    "type": "IHashtag[]"
                },
                {
                    "name": "headerBtnFirst",
                    "line": 37,
                    "type": "IMenuButton"
                },
                {
                    "name": "headerBtnLast",
                    "line": 38,
                    "type": "ICheckbox"
                },
                {
                    "name": "inputMax",
                    "line": 63,
                    "type": "IInputNumeric"
                },
                {
                    "name": "inputMin",
                    "line": 62,
                    "type": "IInputNumeric"
                },
                {
                    "name": "multiMenuList",
                    "line": 36,
                    "type": "any"
                },
                {
                    "name": "multiMenuTrigger",
                    "line": 35,
                    "type": "IActionButton"
                },
                {
                    "name": "radioMenuList",
                    "line": 47,
                    "type": "any"
                },
                {
                    "name": "radioMenuTrigger",
                    "line": 46,
                    "type": "IChip"
                },
                {
                    "name": "rangeMenuList",
                    "line": 61,
                    "type": "any"
                },
                {
                    "name": "rangeMenuTrigger",
                    "line": 60,
                    "type": "IChip"
                },
                {
                    "name": "singleMenuList",
                    "line": 27,
                    "type": "any"
                },
                {
                    "name": "singleMenuTrigger",
                    "line": 26,
                    "type": "IInputText | IActionButton"
                },
                {
                    "name": "tabsMenuList",
                    "line": 52,
                    "type": "any"
                },
                {
                    "name": "tabsMenuTrigger",
                    "line": 51,
                    "type": "IChip"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "freeTextMenu",
                    "type": "MenuFreeTextComponent",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MenuFreeTextComponent"
                        }
                    ]
                },
                {
                    "name": "radioMenu",
                    "type": "MenuRadioGroupComponent",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MenuRadioGroupComponent"
                        }
                    ]
                },
                {
                    "name": "rangeMenu",
                    "type": "MenuRangeComponent",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MenuRangeComponent"
                        }
                    ]
                },
                {
                    "name": "tabsMenu",
                    "type": "MenuRadioGroupComponent",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MenuTabsComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openFreeTextMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100
                },
                {
                    "name": "openRadioMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "openRangeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "openTabsMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "publishArray",
                    "args": [
                        {
                            "name": "selectedList",
                            "type": ""
                        },
                        {
                            "name": "trigger",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "selectedList",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "trigger",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCompleted",
                    "args": [
                        {
                            "name": "selectedList",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "selectedList",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, ViewChild} from '@angular/core';\r\nimport {\r\n  ButtonTypeEnum,\r\n  IActionButton,\r\n  IMenuButton,\r\n  ICheckbox,\r\n  IInputText,\r\n  IChip,\r\n  MenuRadioGroupComponent,\r\n  MenuTabsComponent,\r\n  MenuRangeComponent,\r\n  MenuFreeTextComponent,\r\n  IInputNumeric, IHashtag\r\n} from 'projects/design-system-lib/src/public-api';\r\n\r\n\r\n@Component({\r\n  selector: 'p-combo',\r\n  templateUrl: './combo.component.html',\r\n  styleUrls: ['./combo.component.scss']\r\n})\r\nexport class ComboComponent {\r\n  @Input() buttonType = ButtonTypeEnum;\r\n\r\n  // single select + input / action button\r\n  @Input() singleMenuTrigger: IInputText | IActionButton;\r\n  @Input() singleMenuList: any;\r\n  @Input() groupTitle: any;\r\n  @Input() buttonFirst: IMenuButton;\r\n  @Input() buttonLast: IMenuButton;\r\n  @Input() filterAriaLabel: string;\r\n  @Input() filterPlaceholder: string;\r\n\r\n  // multi select + action button\r\n  @Input() multiMenuTrigger: IActionButton;\r\n  @Input() multiMenuList: any;\r\n  @Input() headerBtnFirst: IMenuButton;\r\n  @Input() headerBtnLast: ICheckbox;\r\n  @Input() footerBtnFirst: IMenuButton;\r\n  @Input() footerBtnLast: IMenuButton;\r\n\r\n  // multi select + hashtag-bar\r\n  @Input() hashtagList: IHashtag[];\r\n\r\n  // radio group + chip\r\n  @Input() radioMenuTrigger: IChip;\r\n  @Input() radioMenuList: any;\r\n  @ViewChild(MenuRadioGroupComponent) radioMenu: MenuRadioGroupComponent;\r\n\r\n  // tabs + chip\r\n  @Input() tabsMenuTrigger: IChip;\r\n  @Input() tabsMenuList: any;\r\n  @Input() checkboxList: {\r\n    checkbox: ICheckbox,\r\n    inputNum?: IInputNumeric\r\n  }[];\r\n  @ViewChild(MenuTabsComponent) tabsMenu: MenuRadioGroupComponent;\r\n\r\n  // range + chip\r\n  @Input() rangeMenuTrigger: IChip;\r\n  @Input() rangeMenuList: any;\r\n  @Input() inputMin: IInputNumeric;\r\n  @Input() inputMax: IInputNumeric;\r\n  @ViewChild(MenuRangeComponent) rangeMenu: MenuRangeComponent;\r\n\r\n  // free text + chip\r\n  @Input() freeTextMenuTrigger: IChip;\r\n  @Input() freeTextMenuList: any;\r\n  @ViewChild(MenuFreeTextComponent) freeTextMenu: MenuFreeTextComponent;\r\n\r\n  constructor() {}\r\n\r\n  selectCompleted(selectedList): void {\r\n    console.log(selectedList);\r\n    const newHashtagList = this.hashtagList;\r\n    selectedList.map( item => newHashtagList.push({ label: item.name }));\r\n    console.log(newHashtagList);\r\n    this.hashtagList = newHashtagList;\r\n  }\r\n\r\n  openRadioMenu(): void {\r\n    this.radioMenu.openMenu();\r\n  }\r\n\r\n  openTabsMenu(): void {\r\n    this.tabsMenu.openMenu();\r\n  }\r\n\r\n  publishArray(selectedList, trigger): void {\r\n    console.log(selectedList);\r\n    const selectedNames: string[] = [];\r\n    selectedList.forEach( item => selectedNames.push(item.name));\r\n    trigger.values = selectedNames;\r\n  }\r\n\r\n  openRangeMenu(): void {\r\n    this.rangeMenu.openMenu();\r\n  }\r\n\r\n  openFreeTextMenu(): void {\r\n    this.freeTextMenu.openMenu();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./combo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 69
            },
            "templateData": "<!--Singe select-->\r\n<ng-container *ngIf=\"singleMenuTrigger && !groupTitle\">\r\n  <p-menu-single-select [menuList]=\"singleMenuList\"\r\n                        [buttonFirst]=\"buttonFirst\"\r\n                        [buttonLast]=\"buttonLast\">\r\n    <!--ng-content-->\r\n    <p-input-text [value]=\"singleMenuTrigger.value\"\r\n                  [ariaLabel]=\"singleMenuTrigger.ariaLabel\"\r\n                  [iconName]=\"singleMenuTrigger.iconName\"></p-input-text>\r\n    <!-- -->\r\n  </p-menu-single-select>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"singleMenuTrigger && groupTitle && !filterPlaceholder\">\r\n  <p-menu-single-select [menuList]=\"singleMenuList\"\r\n                        [groupTitle]=\"groupTitle\"\r\n                        [buttonFirst]=\"buttonFirst\"\r\n                        [buttonLast]=\"buttonLast\">\r\n    <!--ng-content-->\r\n    <p-input-text [value]=\"singleMenuTrigger.value\"\r\n                  [ariaLabel]=\"singleMenuTrigger.ariaLabel\"\r\n                  [iconName]=\"singleMenuTrigger.iconName\"></p-input-text>\r\n    <!-- -->\r\n  </p-menu-single-select>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"singleMenuTrigger && groupTitle && filterPlaceholder\">\r\n  <p-menu-single-select [menuList]=\"singleMenuList\"\r\n                        [groupTitle]=\"groupTitle\"\r\n                        [filterAriaLabel]=\"filterAriaLabel\"\r\n                        [filterPlaceholder]=\"filterPlaceholder\"\r\n                        [buttonFirst]=\"buttonFirst\"\r\n                        [buttonLast]=\"buttonLast\">\r\n    <!--ng-content-->\r\n    <p-action-button [label]=\"singleMenuTrigger.label\"\r\n                     [iconBeforeName]=\"singleMenuTrigger.iconBeforeName\"\r\n                     [iconBeforeWidth]=\"singleMenuTrigger.iconBeforeWidth\"\r\n                     [iconBeforeHeight]=\"singleMenuTrigger.iconBeforeHeight\"\r\n                     [iconBeforeStrokeWidth]=\"singleMenuTrigger.iconBeforeStrokeWidth\"\r\n                     [iconBeforeStrokeColor]=\"singleMenuTrigger.iconBeforeStrokeColor\"\r\n                     [isMenuTrigger]=\"true\"\r\n                     [isStandalone]=\"singleMenuTrigger.isStandalone\"></p-action-button>\r\n    <!-- -->\r\n  </p-menu-single-select>\r\n</ng-container>\r\n\r\n<!--Multi select-->\r\n<ng-container *ngIf=\"multiMenuTrigger && !filterPlaceholder && !headerBtnFirst\">\r\n  <p-menu-multi-select [menuList]=\"multiMenuList\"\r\n                        [headerBtnFirst]=\"headerBtnFirst\"\r\n                        [headerBtnLast]=\"headerBtnLast\"\r\n                        [footerBtnFirst]=\"footerBtnFirst\"\r\n                        [footerBtnLast]=\"footerBtnLast\">\r\n    <!--ng-content-->\r\n    <p-action-button [label]=\"multiMenuTrigger.label\"\r\n                     [iconBeforeName]=\"multiMenuTrigger.iconBeforeName\"\r\n                     [iconBeforeWidth]=\"multiMenuTrigger.iconBeforeWidth\"\r\n                     [iconBeforeHeight]=\"multiMenuTrigger.iconBeforeHeight\"\r\n                     [iconBeforeStrokeWidth]=\"multiMenuTrigger.iconBeforeStrokeWidth\"\r\n                     [iconBeforeStrokeColor]=\"multiMenuTrigger.iconBeforeStrokeColor\"\r\n                     [isMenuTrigger]=\"true\"\r\n                     [isStandalone]=\"multiMenuTrigger.isStandalone\"></p-action-button>\r\n    <!-- -->\r\n  </p-menu-multi-select>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"multiMenuTrigger && filterPlaceholder && !headerBtnFirst && !hashtagList\">\r\n  <p-menu-multi-select [menuList]=\"multiMenuList\"\r\n                       [filterPlaceholder]=\"filterPlaceholder\"\r\n                       [filterAriaLabel]=\"filterAriaLabel\"\r\n                       [footerBtnFirst]=\"footerBtnFirst\"\r\n                       [footerBtnLast]=\"footerBtnLast\">\r\n    <!--ng-content-->\r\n    <p-action-button [label]=\"multiMenuTrigger.label\"\r\n                     [iconBeforeName]=\"multiMenuTrigger.iconBeforeName\"\r\n                     [iconBeforeWidth]=\"multiMenuTrigger.iconBeforeWidth\"\r\n                     [iconBeforeHeight]=\"multiMenuTrigger.iconBeforeHeight\"\r\n                     [iconBeforeStrokeWidth]=\"multiMenuTrigger.iconBeforeStrokeWidth\"\r\n                     [iconBeforeStrokeColor]=\"multiMenuTrigger.iconBeforeStrokeColor\"\r\n                     [isMenuTrigger]=\"true\"\r\n                     [isStandalone]=\"multiMenuTrigger.isStandalone\"></p-action-button>\r\n    <!-- -->\r\n  </p-menu-multi-select>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"multiMenuTrigger && filterPlaceholder && !headerBtnFirst && hashtagList\">\r\n  <p-menu-multi-select [menuList]=\"multiMenuList\"\r\n                       [filterPlaceholder]=\"filterPlaceholder\"\r\n                       [filterAriaLabel]=\"filterAriaLabel\"\r\n                       [footerBtnFirst]=\"footerBtnFirst\"\r\n                       [footerBtnLast]=\"footerBtnLast\"\r\n                       (onSelectCompleted)=\"selectCompleted($event)\">\r\n    <!--ng-content-->\r\n    <p-hashtag-bar [hashtagList]=\"hashtagList\"></p-hashtag-bar>\r\n    <!-- -->\r\n  </p-menu-multi-select>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"multiMenuTrigger && filterPlaceholder && headerBtnFirst\">\r\n  <p-menu-multi-select [menuList]=\"multiMenuList\"\r\n                       [filterPlaceholder]=\"filterPlaceholder\"\r\n                       [filterAriaLabel]=\"filterAriaLabel\"\r\n                       [headerBtnFirst]=\"headerBtnFirst\"\r\n                       [headerBtnLast]=\"headerBtnLast\"\r\n                       [footerBtnFirst]=\"footerBtnFirst\"\r\n                       [footerBtnLast]=\"footerBtnLast\">\r\n    <!--ng-content-->\r\n    <p-action-button [label]=\"multiMenuTrigger.label\"\r\n                     [iconBeforeName]=\"multiMenuTrigger.iconBeforeName\"\r\n                     [iconBeforeWidth]=\"multiMenuTrigger.iconBeforeWidth\"\r\n                     [iconBeforeHeight]=\"multiMenuTrigger.iconBeforeHeight\"\r\n                     [iconBeforeStrokeWidth]=\"multiMenuTrigger.iconBeforeStrokeWidth\"\r\n                     [iconBeforeStrokeColor]=\"multiMenuTrigger.iconBeforeStrokeColor\"\r\n                     [isMenuTrigger]=\"true\"\r\n                     [isStandalone]=\"multiMenuTrigger.isStandalone\"></p-action-button>\r\n    <!-- -->\r\n  </p-menu-multi-select>\r\n</ng-container>\r\n\r\n<!--Radio group-->\r\n<ng-container *ngIf=\"radioMenuTrigger\">\r\n  <p-menu-radio-group [menuList]=\"radioMenuList\"\r\n                      [footerBtnFirst]=\"footerBtnFirst\"\r\n                      [footerBtnLast]=\"footerBtnLast\">\r\n    <!--ng-content-->\r\n    <p-chip-button [label]=\"radioMenuTrigger.label\"\r\n                    [values]=\"radioMenuTrigger.values\"\r\n                    [iconRemove]=\"radioMenuTrigger.iconRemove\"\r\n                    [full]=\"radioMenuTrigger.full\"\r\n                    [active]=\"radioMenuTrigger.active\"\r\n                    (onClickTask)=\"openRadioMenu()\"></p-chip-button>\r\n    <!-- -->\r\n  </p-menu-radio-group>\r\n</ng-container>\r\n\r\n<!--Tabs-->\r\n<ng-container *ngIf=\"tabsMenuTrigger\">\r\n  <p-menu-tabs [menuList]=\"tabsMenuList\"\r\n               [filterPlaceholder]=\"filterPlaceholder\"\r\n               [filterAriaLabel]=\"filterAriaLabel\"\r\n               [headerBtnFirst]=\"headerBtnFirst\"\r\n               [headerBtnLast]=\"headerBtnLast\"\r\n               [footerBtnFirst]=\"footerBtnFirst\"\r\n               [footerBtnLast]=\"footerBtnLast\"\r\n               [checkboxList]=\"checkboxList\"\r\n               (onClickTask)=\"publishArray($event, tabsMenuTrigger)\">\r\n    <!--ng-content-->\r\n    <p-chip-button [label]=\"tabsMenuTrigger.label\"\r\n                   [values]=\"tabsMenuTrigger.values\"\r\n                   [iconRemove]=\"tabsMenuTrigger.iconRemove\"\r\n                   [full]=\"tabsMenuTrigger.full\"\r\n                   [active]=\"tabsMenuTrigger.active\"\r\n                   (onClickTask)=\"openTabsMenu()\"></p-chip-button>\r\n    <!-- -->\r\n  </p-menu-tabs>\r\n</ng-container>\r\n\r\n<!--Range-->\r\n<ng-container *ngIf=\"rangeMenuTrigger\">\r\n  <p-menu-range [inputMax]=\"inputMax\"\r\n                [inputMin]=\"inputMin\"\r\n                [footerBtnFirst]=\"footerBtnFirst\"\r\n                [footerBtnLast]=\"footerBtnLast\">\r\n    <!--ng-content-->\r\n    <p-chip-button [label]=\"rangeMenuTrigger.label\"\r\n                   [values]=\"rangeMenuTrigger.values\"\r\n                   [iconRemove]=\"rangeMenuTrigger.iconRemove\"\r\n                   [full]=\"rangeMenuTrigger.full\"\r\n                   [active]=\"rangeMenuTrigger.active\"\r\n                   (onClickTask)=\"openRangeMenu()\"></p-chip-button>\r\n    <!-- -->\r\n  </p-menu-range>\r\n</ng-container>\r\n\r\n<!--Range-->\r\n<ng-container *ngIf=\"freeTextMenuTrigger\">\r\n  <p-menu-free-text [menuList]=\"freeTextMenuList\"\r\n                    [footerBtnFirst]=\"footerBtnFirst\"\r\n                    [footerBtnLast]=\"footerBtnLast\">\r\n    <!--ng-content-->\r\n    <p-chip-button [label]=\"freeTextMenuTrigger.label\"\r\n                   [values]=\"freeTextMenuTrigger.values\"\r\n                   [iconRemove]=\"freeTextMenuTrigger.iconRemove\"\r\n                   [full]=\"freeTextMenuTrigger.full\"\r\n                   [active]=\"freeTextMenuTrigger.active\"\r\n                   (onClickTask)=\"openFreeTextMenu()\"></p-chip-button>\r\n    <!-- -->\r\n  </p-menu-free-text>\r\n</ng-container>\r\n\r\n\r\n"
        },
        {
            "name": "DatepickerComponent",
            "id": "component-DatepickerComponent-a0d551e2a24df6290f57f2d21674c1b9",
            "file": "projects/design-system-lib/src/lib/input/datepicker/datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-datepicker",
            "styleUrls": [
                "./datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 38,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 39,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "dateInput",
                    "defaultValue": "new EventEmitter()",
                    "line": 40,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isOpened",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "picker",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'picker'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openDatepicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "streamClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\r\nimport {formatDate } from '@angular/common';\r\nimport {DateAdapter, MAT_DATE_FORMATS, NativeDateAdapter} from '@angular/material/core';\r\n\r\n// export const PICK_FORMATS = {\r\n//   parse: {dateInput: {month: 'short', year: 'numeric', day: 'numeric'}},\r\n//   display: {\r\n//     dateInput: 'input',\r\n//     monthYearLabel: {year: 'numeric', month: 'short'},\r\n//     dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\r\n//     monthYearA11yLabel: {year: 'numeric', month: 'long'}\r\n//   }\r\n// };\r\n//\r\n// class PickDateAdapter extends NativeDateAdapter {\r\n//   format(date: Date, displayFormat: Object): string {\r\n//     if (displayFormat === 'input') {\r\n//       return formatDate(date,'dd-MMM-yyyy', this.locale);\r\n//     } else {\r\n//       return date.toDateString();\r\n//     }\r\n//   }\r\n// }\r\n\r\n@Component({\r\n  selector: 'p-datepicker',\r\n  templateUrl: './datepicker.component.html',\r\n  styleUrls: ['./datepicker.component.scss'],\r\n  // providers: [\r\n  //   {provide: DateAdapter, useClass: PickDateAdapter},\r\n  //   {provide: MAT_DATE_FORMATS, useValue: PICK_FORMATS}\r\n  // ]\r\n})\r\nexport class DatepickerComponent {\r\n  @Input() ariaLabel: string;\r\n  @Input() placeholder: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() value: string;\r\n  @Output() dateChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() dateInput: EventEmitter<any> = new EventEmitter();\r\n  @ViewChild('picker') picker;\r\n  public isOpened: boolean = false;\r\n\r\n  openDatepicker(): void {\r\n    this.isOpened = true;\r\n    this.picker.open();\r\n  }\r\n\r\n  streamClosed(): void {\r\n    this.isOpened = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n@import '../text/input-text.component';\r\n\r\n$date-hover-focus-selector: \".mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover, .cdk-keyboard-focused .mat-calendar-body-active, .cdk-program-focused .mat-calendar-body-active\";\r\n$date-hover-selector: \".mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover\";\r\n$date-content-selector: \".mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical)\";\r\n\r\n// input trigger & icon & preview (Tuesday, March 16, 2021)\r\n.p-datepicker {\r\n  cursor: pointer;\r\n  .p-input-text-input {\r\n    cursor: pointer;\r\n  }\r\n  ::ng-deep &.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button {\r\n    width: 30px;\r\n    height: 30px;\r\n  }\r\n  .p-datepicker-icon {\r\n    font-size: 15px;\r\n    color: $primary-a-900;\r\n    opacity: 0;\r\n    transition: opacity 280ms;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 8px;\r\n  }\r\n  ::ng-deep .mat-form-field-flex:hover .p-datepicker-icon,\r\n  .p-datepicker-icon.shown {\r\n      opacity: 1;\r\n  }\r\n  ::ng-deep .cdk-program-focused,\r\n  ::ng-deep .cdk-keyboard-focused {\r\n    .mat-button-focus-overlay {\r\n      opacity: 0;\r\n    }\r\n  }\r\n  ::ng-deep .mat-button-ripple {\r\n    display: none;\r\n  }\r\n\r\n  &-preview {\r\n    text-align: center;\r\n    //transform: translateY(300px);\r\n  }\r\n}\r\n\r\n// datepicker panel\r\n::ng-deep .mat-datepicker-content {\r\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.1),\r\n              0px 2px 6px rgba(0, 0, 0, 0.04),\r\n              0px -3px 6px rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n::ng-deep .p-datepicker-panel {\r\n  // header buttons\r\n  .mat-calendar-controls {\r\n    margin: 0;\r\n    justify-content: space-between;\r\n  }\r\n  .mat-calendar-period-button {\r\n    font-family: $font-family-basic;\r\n    font-size: $small-font-size;\r\n    color: $secondary-a-700;\r\n    height: $btn-small-height;\r\n    line-height: $btn-small-height;\r\n    border-radius: $btn-border-radius;\r\n    order: 2;\r\n    &:hover,\r\n    &:focus {\r\n      background-color: $primary-c-50;\r\n    }\r\n  }\r\n  .mat-calendar-previous-button,\r\n  .mat-calendar-next-button {\r\n    width: 36px;\r\n    height: 36px;\r\n    &:after {\r\n      margin: 13px;\r\n      border-color: $primary-a-900;\r\n      //border-top-width: 1.5px;\r\n    }\r\n    &:hover,\r\n    &:focus {\r\n      background-color: $primary-c-50;\r\n    }\r\n  }\r\n\r\n  .mat-calendar-previous-button {\r\n    order: 1;\r\n    &:after {\r\n      //border-left-width: 1.5px;\r\n    }\r\n  }\r\n  .mat-calendar-next-button {\r\n    order: 3;\r\n    &:after {\r\n      //border-right-width: 1.5px;\r\n    }\r\n  }\r\n\r\n  .mat-calendar-spacer {\r\n    display: none;\r\n  }\r\n\r\n  .mat-calendar-arrow {\r\n    display: none;\r\n  }\r\n  // hover\r\n  .mat-button:hover:not(.mat-button-disabled),\r\n  .mat-calendar-controls .mat-icon-button {\r\n    .mat-button-focus-overlay {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  // month\r\n  mat-month-view .mat-calendar-table {\r\n    margin-top: $gap-base;\r\n  }\r\n\r\n  // days of week\r\n  .mat-calendar-table-header th {\r\n    font-family: $font-family-basic;\r\n    font-size: $base-font-size;\r\n    color: $gray-scale-800;\r\n  }\r\n\r\n  // divider line\r\n  .mat-calendar-table-header-divider {\r\n    display: none;\r\n  }\r\n\r\n  // current month indication\r\n  tr:first-child .mat-calendar-body-label {\r\n    font-size: 0;\r\n    &[colspan=\"7\"] {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  // dates\r\n  .mat-calendar-body-cell-content {\r\n    font-family: $font-family-basic;\r\n    font-size: $small-font-size;\r\n    color: $primary-a-900;\r\n  }\r\n\r\n  // hover & focus\r\n  #{$date-hover-focus-selector} {\r\n    &>#{$date-content-selector}:not(.mat-calendar-body-today) {\r\n      background-color: $secondary-a-50;\r\n    }\r\n  }\r\n\r\n  // today\r\n  .mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {\r\n    background-color: $secondary-a-200;\r\n    border: none;\r\n  }\r\n\r\n  // today on hover & focus\r\n  #{$date-hover-focus-selector} {\r\n    &>.mat-calendar-body-today#{$date-content-selector} {\r\n      background-color: $secondary-a-200;\r\n    }\r\n  }\r\n\r\n  // selected\r\n  .mat-calendar-body-selected {\r\n    font-weight: 500;\r\n    color: $gray-scale-1;\r\n    background-color: $secondary-a-700;\r\n    box-shadow: none;\r\n  }\r\n\r\n  #{$date-hover-selector} {\r\n    &>.mat-calendar-body-selected {\r\n      color: $gray-scale-1;\r\n      background-color: $secondary-a-800;\r\n    }\r\n  }\r\n\r\n  // years\r\n  mat-multi-year-view,\r\n  mat-year-view {\r\n    .mat-calendar-body-cell-content {\r\n      height: 32px;\r\n    }\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./datepicker.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-form-field class=\"p-datepicker p-input-text\" appearance=\"standard\">\r\n  <input matInput\r\n         [matDatepicker]=\"picker\"\r\n         class=\"p-input-text-input\"\r\n         attr.aria-label=\"{{ariaLabel}}\"\r\n         autocomplete=\"off\"\r\n         readonly\r\n         (click)=\"openDatepicker()\"\r\n         (focus)=\"openDatepicker()\">\r\n  <p-icon class=\"p-datepicker-icon\"\r\n          [class.shown]=\"isOpened\"\r\n          iconName=\"calendar\"\r\n          width=\"16\"\r\n          height=\"auto\">\r\n  </p-icon>\r\n  <mat-datepicker #picker\r\n                  (closed)=\"streamClosed()\"\r\n                  panelClass=\"p-datepicker-panel\"></mat-datepicker>\r\n</mat-form-field>\r\n\r\n<!--<p class=\"p-datepicker-preview paragraph-2-link\">-->\r\n  <!--Tuesday, March 16, 2021-->\r\n<!--</p>-->\r\n"
        },
        {
            "name": "DaterangeComponent",
            "id": "component-DaterangeComponent-307bdd76348ba6b0d7d83e80b40393f4",
            "file": "projects/design-system-lib/src/lib/input/daterange/daterange.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-daterange",
            "styleUrls": [
                "./daterange.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./daterange.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 38,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 39,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "dateInput",
                    "defaultValue": "new EventEmitter()",
                    "line": 40,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputEndDate",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputEndDate'"
                        }
                    ]
                },
                {
                    "name": "isFilled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isOpened",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "picker",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'picker'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openDatepicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "streamClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, Output, ViewChild} from '@angular/core';\r\nimport {formatDate } from '@angular/common';\r\nimport {DateAdapter, MAT_DATE_FORMATS, NativeDateAdapter} from '@angular/material/core';\r\n\r\n// export const PICK_FORMATS = {\r\n//   parse: {dateInput: {month: 'short', year: 'numeric', day: 'numeric'}},\r\n//   display: {\r\n//     dateInput: 'input',\r\n//     monthYearLabel: {year: 'numeric', month: 'short'},\r\n//     dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\r\n//     monthYearA11yLabel: {year: 'numeric', month: 'long'}\r\n//   }\r\n// };\r\n//\r\n// class PickDateAdapter extends NativeDateAdapter {\r\n//   format(date: Date, displayFormat: Object): string {\r\n//     if (displayFormat === 'input') {\r\n//       return formatDate(date,'dd-MMM-yyyy', this.locale);\r\n//     } else {\r\n//       return date.toDateString();\r\n//     }\r\n//   }\r\n// }\r\n\r\n@Component({\r\n  selector: 'p-daterange',\r\n  templateUrl: './daterange.component.html',\r\n  styleUrls: ['./daterange.component.scss'],\r\n  // providers: [\r\n  //   {provide: DateAdapter, useClass: PickDateAdapter},\r\n  //   {provide: MAT_DATE_FORMATS, useValue: PICK_FORMATS}\r\n  // ]\r\n})\r\nexport class DaterangeComponent {\r\n  @Input() ariaLabel: string;\r\n  @Input() placeholder: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() value: string;\r\n  @Output() dateChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() dateInput: EventEmitter<any> = new EventEmitter();\r\n  @ViewChild('picker') picker;\r\n  @ViewChild('inputEndDate') inputEndDate: ElementRef;\r\n  public isOpened: boolean = false;\r\n  public isFilled: boolean = false;\r\n\r\n  openDatepicker(): void {\r\n    this.isOpened = true;\r\n    this.picker.open();\r\n  }\r\n\r\n  streamClosed(): void {\r\n    this.inputEndDate.nativeElement.value ? this.isFilled = true : this.isFilled = false;\r\n    this.isOpened = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n@import '../datepicker/datepicker.component';\r\n\r\n$date-hover-focus-selector: \".mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover, .cdk-keyboard-focused .mat-calendar-body-active, .cdk-program-focused .mat-calendar-body-active\";\r\n$date-hover-selector: \".mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover\";\r\n$date-content-selector: \".mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical)\";\r\n\r\n::ng-deep .p-daterange {\r\n  .p-input-text-input {\r\n    width: 100%;\r\n  }\r\n\r\n  .mat-date-range-input-separator {\r\n    opacity: 0;\r\n    transition: none;\r\n  }\r\n\r\n  .filled .mat-date-range-input-separator {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n::ng-deep .mat-calendar-body-in-range {\r\n  .mat-calendar-body-cell-content,\r\n  &:before,\r\n  &:after {\r\n    font-weight: 500;\r\n    color: $gray-scale-1;\r\n    background-color: $secondary-a-700;\r\n  }\r\n  &:hover {\r\n    .mat-calendar-body-cell-content,\r\n    &:before,\r\n    &:after {\r\n      background-color: $secondary-a-800 !important;\r\n    }\r\n  }\r\n}\r\n\r\n::ng-deep .cdk-overlay-pane.mat-datepicker-popup {\r\n  padding-top: 2px;\r\n}\r\n\r\n",
                    "styleUrl": "./daterange.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-form-field class=\"p-daterange p-datepicker p-input-text\"\r\n                appearance=\"standard\">\r\n  <mat-date-range-input [rangePicker]=\"picker\"\r\n                        class=\"p-input-text-input\"\r\n                        [class.filled]=\"isFilled\">\r\n    <input matStartDate\r\n           attr.aria-label=\"Start date\"\r\n           autocomplete=\"off\"\r\n           readonly\r\n           class=\"p-input-text-input-start\"\r\n           (click)=\"openDatepicker()\"\r\n           (focus)=\"openDatepicker()\">\r\n    <input matEndDate\r\n           #inputEndDate\r\n           attr.aria-label=\"End date\"\r\n           autocomplete=\"off\"\r\n           readonly\r\n           class=\"p-input-text-input-end\"\r\n           (click)=\"openDatepicker()\"\r\n           (focus)=\"openDatepicker()\">\r\n  </mat-date-range-input>\r\n  <p-icon class=\"p-datepicker-icon\"\r\n          [class.shown]=\"isOpened\"\r\n          iconName=\"calendar\"\r\n          width=\"16\"\r\n          height=\"auto\"\r\n          (click)=\"openDatepicker()\">\r\n  </p-icon>\r\n  <mat-date-range-picker #picker\r\n                         (closed)=\"streamClosed()\"\r\n                         panelClass=\"p-datepicker-panel\">\r\n  </mat-date-range-picker>\r\n</mat-form-field>\r\n\r\n<!--<p class=\"p-datepicker-preview paragraph-2-link\">-->\r\n  <!--Tuesday, March 16, 2021-->\r\n<!--</p>-->\r\n"
        },
        {
            "name": "EntityHeaderComponent",
            "id": "component-EntityHeaderComponent-6b3aac39f2e73907ba58c81aa97d1ecb",
            "file": "projects/design-system-lib/src/lib/entity-header/entity-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-entity-header",
            "styleUrls": [
                "./entity-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./entity-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "entity",
                    "line": 11,
                    "type": "IEntity"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {IEntity} from './entity.interface';\r\nimport {ButtonTypeEnum} from '../button/button-type.enum';\r\n\r\n@Component({\r\n  selector: 'p-entity-header',\r\n  templateUrl: './entity-header.component.html',\r\n  styleUrls: ['./entity-header.component.scss'],\r\n})\r\nexport class EntityHeaderComponent {\r\n  @Input() entity: IEntity;\r\n  public buttonType = ButtonTypeEnum;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n.p-entity-header {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &-back {\r\n    margin-right: 2px;\r\n    ::ng-deep .p-btn-isIcon {\r\n      padding: 4px 2px;\r\n    }\r\n    &:hover {\r\n      background-color: $primary-c-50;\r\n    }\r\n  }\r\n\r\n  &-icon {\r\n\r\n  }\r\n\r\n  &-title {\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 1 1;\r\n    margin-left: $gap-small;\r\n  }\r\n\r\n  &-input {\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 1 1;\r\n    &:before {\r\n      content: '';\r\n      display: block;\r\n      width: 2px;\r\n      height: 14px;\r\n      margin-left: $gap-double;\r\n      margin-right: $gap-base;\r\n      border-right: 2px solid currentColor;\r\n    }\r\n  }\r\n\r\n  &-text {\r\n    letter-spacing: 0;\r\n    text-transform: none;\r\n    margin-left: 12px;\r\n  }\r\n\r\n\r\n}\r\n",
                    "styleUrl": "./entity-header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-entity-header\">\r\n  <p-button *ngIf=\"entity.type.value.editable\"\r\n            class=\"p-entity-header-back\"\r\n            ariaLabel=\"Back to listBack to list\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            iconBefore=\"chevron-left\"\r\n            iconBeforeWidth=\"16\"\r\n            iconBeforeStrokeWidth=\"3\"\r\n            iconBeforeStrokeColor=\"#4132C8\"\r\n            matTooltip=\"Back to list\"\r\n            matTooltipPosition=\"above\"\r\n            matTooltipClass=\"p-tooltip above\"></p-button>\r\n\r\n  <p-icon class=\"p-entity-header-icon\"\r\n          [iconName]=\"entity.type.value.iconName\"\r\n          width=\"18\"\r\n          height=\"18\"></p-icon>\r\n\r\n  <h1 class=\"p-entity-header-title headline-1-bold\">\r\n    {{ entity.type.value.name }}\r\n    {{ entity.id }}\r\n\r\n    <ng-template [ngIf]=\"entity.type.value.editable\" [ngIfElse]=\"notEditableTitle\">\r\n      <p-input-header class=\"p-entity-header-input\"\r\n                      ariaLabel=\"Entity name\"\r\n                      placeholder=\"Add entity name\"\r\n                      [value]=\"entity.entityName\"\r\n                      [validators]=\"entity.validators\"\r\n                      [matcher]=\"entity.matcher\"></p-input-header>\r\n    </ng-template>\r\n\r\n    <ng-template #notEditableTitle>\r\n      <span class=\"p-entity-header-text headline-1-sub-semibold\">{{entity.entityName}}</span>\r\n    </ng-template>\r\n  </h1>\r\n</div>\r\n"
        },
        {
            "name": "ExpansionPanelComponent",
            "id": "component-ExpansionPanelComponent-7d63752fb32394183074b7d4f1ecf5ef",
            "file": "projects/design-system-lib/src/lib/expansion-panel/expansion-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-expansion-panel",
            "styleUrls": [
                "./expansion-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expansion-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expansionPanel",
                    "line": 10,
                    "type": "IExpansionPanel[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {IExpansionPanel} from './expansion-panel.interface';\r\n\r\n@Component({\r\n  selector: 'p-expansion-panel',\r\n  templateUrl: './expansion-panel.component.html',\r\n  styleUrls: ['./expansion-panel.component.scss'],\r\n})\r\nexport class ExpansionPanelComponent {\r\n  @Input() expansionPanel: IExpansionPanel[];\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n$header-height: 40px;\r\n$padding-left: $gap-double;\r\n$padding-right: $gap-double;\r\n$padding-top-content: $gap-double;\r\n$padding-bottom-content: $gap-double;\r\n$border: 1px solid $gray-scale-400;\r\n$expand-width: 14px;\r\n\r\n::ng-deep .p-accordion {\r\n  &.mat-accordion {\r\n    .mat-expansion-panel,\r\n    .mat-expansion-panel:first-of-type,\r\n    .mat-expansion-panel:last-of-type {\r\n      margin-top: $gap-small;\r\n      background-color: $gray-scale-1;\r\n      border-radius: 0;\r\n    }\r\n  }\r\n\r\n  .mat-expansion-panel:not([class*=mat-elevation-z]) {\r\n    box-shadow: none;\r\n  }\r\n\r\n  .mat-expansion-panel-spacing {\r\n    margin: 0;\r\n  }\r\n\r\n  .p-expansion-panel-header {\r\n    height: $header-height;\r\n    padding-right: $padding-right;\r\n    padding-left: $padding-left;\r\n    border: $border;\r\n    &.mat-expanded {\r\n      height: $header-height;\r\n    }\r\n  }\r\n\r\n  .mat-expanded {\r\n    .p-expansion-panel-header {\r\n      background-color: $primary-c-50;\r\n    }\r\n\r\n    .p-expansion-panel-icon {\r\n      transform: rotate(0);\r\n    }\r\n  }\r\n\r\n  .mat-content {\r\n    color: $primary-a-900;\r\n    align-items: center;\r\n  }\r\n\r\n  .p-expansion-panel-title-main {\r\n    font-weight: 700;\r\n  }\r\n\r\n  .p-expansion-panel-title-sub {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-left: 10px;\r\n    &:before {\r\n      content: '';\r\n      display: inline-block;\r\n      width: 1px;\r\n      height: 15px;\r\n      background-color: currentColor;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n\r\n  .mat-expansion-panel-content {\r\n    border-right: $border;\r\n    border-bottom: $border;\r\n    border-left: $border;\r\n  }\r\n\r\n  .mat-expansion-panel-body {\r\n    padding: $padding-top-content 24px $padding-bottom-content 24px;\r\n  }\r\n\r\n  .p-expansion-panel-icon {\r\n    margin-right: $gap-base;\r\n    transform: rotate(-90deg);\r\n    transition: transform 280ms;\r\n  }\r\n}\r\n\r\n// focus & hover\r\n::ng-deep .mat-expansion-panel {\r\n  .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true]),\r\n  .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true]),\r\n  &:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true]) {\r\n    background-color: $primary-c-50;\r\n  }\r\n}\r\n\r\n::ng-deep .p-expansion-panel-header.mat-expansion-panel-header.mat-expanded {\r\n  &:focus,\r\n  &:hover {\r\n    background-color: $primary-c-50;\r\n  }\r\n}\r\n\r\n::ng-deep .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true]),\r\n::ng-deep .p-expansion-panel-header.mat-expansion-panel-header.mat-expanded:hover {\r\n  .mat-content {\r\n    color: $secondary-a-700;\r\n  }\r\n}\r\n",
                    "styleUrl": "./expansion-panel.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-accordion class=\"p-accordion\" multi>\r\n  <mat-expansion-panel *ngFor=\"let panel of expansionPanel\"\r\n                       class=\"p-expansion-panel\"\r\n                       hideToggle>\r\n    <mat-expansion-panel-header class=\"p-expansion-panel-header\">\r\n      <p-icon class=\"p-expansion-panel-icon\"\r\n              iconName=\"chevron-down\"\r\n              width=\"17\"\r\n              height=\"auto\"\r\n              strokeWidth=\"2.5\">\r\n      </p-icon>\r\n      <span class=\"p-expansion-panel-title-main paragraph-2-default\">\r\n        {{panel.header.titleMain}}\r\n      </span>\r\n      <span *ngIf=\"panel.header.titleSub\" class=\"p-expansion-panel-title-sub paragraph-2-default\">\r\n        {{panel.header.titleSub}}\r\n      </span>\r\n    </mat-expansion-panel-header>\r\n\r\n    <!--expanded content-->\r\n    <div class=\"p-expansion-panel-content\">\r\n      {{panel.content}}\r\n    </div>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n"
        },
        {
            "name": "FileUploadComponent",
            "id": "component-FileUploadComponent-d647d87d6a14143c4118ea803d295a39",
            "file": "projects/design-system-lib/src/lib/file-upload/file-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'p-file-upload',\r\n  templateUrl: './file-upload.component.html',\r\n  styleUrls: ['./file-upload.component.scss'],\r\n})\r\nexport class FileUploadComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n.p-file-upload {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  &-input {\r\n    width: 0.1px;\r\n    height: 0.1px;\r\n    opacity: 0;\r\n    overflow: hidden;\r\n    position: absolute;\r\n    z-index: -1;\r\n  }\r\n\r\n  &-label {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 22px 18px;\r\n    border: 1px dashed $gray-scale-500;\r\n    cursor: pointer;\r\n    &:hover {\r\n      background-color: $primary-c-50;\r\n    }\r\n  }\r\n\r\n  &-icon {\r\n    margin-right: 5px;\r\n  }\r\n\r\n  &-link {\r\n    font-weight: 600;\r\n    margin-right: 4px;\r\n    margin-left: 4px;\r\n    position: relative;\r\n    &:hover:after {\r\n      content: '';\r\n      display: block;\r\n      width: 100%;\r\n      height: 1px;\r\n      background-color: currentColor;\r\n      position: absolute;\r\n      bottom: 2px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./file-upload.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-file-upload\">\r\n  <input type=\"file\"\r\n         name=\"fileUpload\"\r\n         id=\"fileUpload\"\r\n         class=\"p-file-upload-input\"\r\n         accept=\"image/png, image/jpeg\"/>\r\n  <label for=\"fileUpload\" class=\"p-file-upload-label\">\r\n    <p-icon class=\"p-file-upload-icon\"\r\n            iconName=\"view\"\r\n            width=\"18\"\r\n            height=\"18\">\r\n    </p-icon>\r\n    <span class=\"p-file-upload-text paragraph-2-default\">\r\n      Drop / paste or\r\n    </span>\r\n    <span class=\"p-file-upload-link paragraph-2-link\">click here</span>\r\n    <span class=\"p-file-upload-text paragraph-2-default\">to add screenshot</span>\r\n  </label>\r\n</div>\r\n\r\n"
        },
        {
            "name": "HashtagBarComponent",
            "id": "component-HashtagBarComponent-e558450b5c155a9389758b5ddc11b80f",
            "file": "projects/design-system-lib/src/lib/hashtag/bar/hashtag-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-hashtag-bar",
            "styleUrls": [
                "./hashtag-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hashtag-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filterAriaLabel",
                    "defaultValue": "'Find Label'",
                    "line": 32
                },
                {
                    "name": "filterPlaceholder",
                    "defaultValue": "'Find Label'",
                    "line": 33
                },
                {
                    "name": "footerBtnFirst",
                    "defaultValue": "{\r\n    label: 'Done',\r\n    buttonType: ButtonTypeEnum.Primary\r\n  }",
                    "line": 24
                },
                {
                    "name": "footerBtnLast",
                    "defaultValue": "{\r\n    label: 'Cancel',\r\n    buttonType: ButtonTypeEnum.Secondary\r\n  }",
                    "line": 28
                },
                {
                    "name": "hashtagList",
                    "line": 11,
                    "type": "IHashtag[]"
                },
                {
                    "name": "headerBtnFirst",
                    "defaultValue": "{\r\n    label: 'Clear selected',\r\n    buttonType: ButtonTypeEnum.Tertiary,\r\n    icon: {\r\n      iconName: 'eraser',\r\n      width: '15',\r\n      height: '15'\r\n    }\r\n  }",
                    "line": 35
                },
                {
                    "name": "headerBtnLast",
                    "defaultValue": "{\r\n    label: 'Not equal to'\r\n  }",
                    "line": 44
                },
                {
                    "name": "menuList",
                    "defaultValue": "[\r\n    { name: 'Alabama',\r\n      disabled: false\r\n    },\r\n    { name: 'Alaska disabled',\r\n      disabled: true\r\n    },\r\n    { name: 'California',\r\n      disabled: false\r\n    }\r\n  ]",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "removeHashtag",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "hashtag",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "hashtag",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {IHashtag} from '../hashtag.interface';\r\nimport {ButtonTypeEnum} from '../../button/button-type.enum';\r\n\r\n@Component({\r\n  selector: 'p-hashtag-bar',\r\n  templateUrl: './hashtag-bar.component.html',\r\n  styleUrls: ['./hashtag-bar.component.scss'],\r\n})\r\nexport class HashtagBarComponent {\r\n  @Input() hashtagList: IHashtag[];\r\n  @Input() menuList = [\r\n    { name: 'Alabama',\r\n      disabled: false\r\n    },\r\n    { name: 'Alaska disabled',\r\n      disabled: true\r\n    },\r\n    { name: 'California',\r\n      disabled: false\r\n    }\r\n  ];\r\n\r\n  @Input() footerBtnFirst = {\r\n    label: 'Done',\r\n    buttonType: ButtonTypeEnum.Primary\r\n  };\r\n  @Input() footerBtnLast = {\r\n    label: 'Cancel',\r\n    buttonType: ButtonTypeEnum.Secondary\r\n  };\r\n  @Input() filterAriaLabel = 'Find Label';\r\n  @Input() filterPlaceholder = 'Find Label';\r\n\r\n  @Input() headerBtnFirst = {\r\n    label: 'Clear selected',\r\n    buttonType: ButtonTypeEnum.Tertiary,\r\n    icon: {\r\n      iconName: 'eraser',\r\n      width: '15',\r\n      height: '15'\r\n    }\r\n  };\r\n  @Input() headerBtnLast = {\r\n    label: 'Not equal to'\r\n  };\r\n\r\n  removeHashtag(event, hashtag): void {\r\n    event.stopPropagation();\r\n    this.hashtagList = this.hashtagList.filter ( item => item.label !== hashtag.label );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n.p-hashtag {\r\n  &-bar {\r\n    width: $input-text-width;\r\n    min-height: 34px;\r\n    padding-left: $gap-base;\r\n    box-shadow: inset 0px -1px 0px $gray-scale-600;\r\n    position: relative;\r\n    &:hover,\r\n    &:focus {\r\n      box-shadow: inset 0px -1px 0px $primary-a-900;\r\n      .p-hashtag-icon {\r\n        opacity: 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  &-list {\r\n    @include resetUl;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    width: 100%;\r\n  }\r\n\r\n  &-item {\r\n    max-width: 100%;\r\n    margin-bottom: $gap-base;\r\n    margin-right: $gap-small;\r\n    &-nth-child {\r\n      margin-right: $gap-double + $gap-base;\r\n    }\r\n  }\r\n\r\n  &-icon {\r\n    position: absolute;\r\n    bottom: 6px;\r\n    right: 0;\r\n    opacity: 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./hashtag-bar.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-hashtag-bar\">\r\n  <ul class=\"p-hashtag-list\">\r\n    <li class=\"p-hashtag-item\" *ngFor=\"let hashtag of hashtagList; let i = index\">\r\n      <p-hashtag [label]=\"hashtag.label\"\r\n                 [iconRemove]=\"true\"\r\n                 (onRemoveHashtag)=\"removeHashtag($event, hashtag)\">\r\n      </p-hashtag>\r\n    </li>\r\n  </ul>\r\n  <p-icon class=\"p-hashtag-icon\"\r\n          iconName=\"chevron-down\"\r\n          width=\"16\"\r\n          height=\"16\">\r\n  </p-icon>\r\n</div>\r\n"
        },
        {
            "name": "HashtagComponent",
            "id": "component-HashtagComponent-36a7e0c8f915a03f1723cfe267ed6528",
            "file": "projects/design-system-lib/src/lib/hashtag/button/hashtag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-hashtag",
            "styleUrls": [
                "./hashtag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hashtag.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "iconRemove",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemoveHashtag",
                    "defaultValue": "new EventEmitter()",
                    "line": 12,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {ButtonTypeEnum} from '../../button/button-type.enum';\r\n\r\n@Component({\r\n  selector: 'p-hashtag',\r\n  templateUrl: './hashtag.component.html',\r\n  styleUrls: ['./hashtag.component.scss'],\r\n})\r\nexport class HashtagComponent {\r\n  @Input() label: string;\r\n  @Input() iconRemove: boolean;\r\n  @Output() onRemoveHashtag: EventEmitter<any> = new EventEmitter();\r\n  public buttonType = ButtonTypeEnum;\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n.p-hashtag {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  max-width: 100%;\r\n  height: 24px;\r\n  background-color: $secondary-a-100;\r\n  border-radius: 16px;\r\n  padding-right: $gap-base;\r\n  padding-left: $gap-base;\r\n  transition: background-color 280ms;\r\n  &.live:hover {\r\n    background-color: $secondary-a-200;\r\n  }\r\n\r\n  &-label {\r\n    @include ellipsis;\r\n  }\r\n\r\n  &-remove {\r\n    height: 100%;\r\n    display: flex;\r\n    margin-right: -$gap-base;\r\n  }\r\n}\r\n",
                    "styleUrl": "./hashtag.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-hashtag paragraph-2-default\"\r\n     [class.live]=\"iconRemove\">\r\n  <span class=\"p-hashtag-label\">\r\n    {{label}}\r\n  </span>\r\n  <p-button *ngIf=\"iconRemove\"\r\n            class=\"p-hashtag-remove\"\r\n            [ariaLabel]=\"'Remove hashtag ' + label\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            iconBefore=\"x\"\r\n            iconBeforeWidth=\"12\"\r\n            iconBeforeStrokeWidth=\"2\"\r\n            (click)=\"onRemoveHashtag.emit($event)\"></p-button>\r\n</div>\r\n\r\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-62e5153acfeba0f17641381b0450d2c6",
            "file": "projects/design-system-lib/src/lib/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "fill",
                    "defaultValue": "'none'",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "height",
                    "defaultValue": "'auto'",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "iconName",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "stroke",
                    "defaultValue": "'currentColor'",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "strokeLinecap",
                    "defaultValue": "'round'",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "strokeLinejoin",
                    "defaultValue": "'round'",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "strokeWidth",
                    "defaultValue": "1.5",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "width",
                    "defaultValue": "'16'",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "customIcon",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "capitalizeName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport { allIcons } from 'angular-feather/icons';\r\n\r\n@Component({\r\n  selector: 'p-icon',\r\n  templateUrl: './icon.component.html',\r\n  styleUrls: ['./icon.component.scss'],\r\n})\r\nexport class IconComponent implements OnInit {\r\n  @Input() iconName: string;\r\n  @Input() width: string  = '16'; // pixels or auto\r\n  @Input() height: string  = 'auto'; // pixels or auto\r\n  @Input() fill: string = 'none'; // icon background\r\n  @Input() stroke: string = 'currentColor'; // line color\r\n  @Input() strokeWidth: number = 1.5; // line width in pixels\r\n  @Input() strokeLinecap: string = 'round'; // line end\r\n  @Input() strokeLinejoin: string = 'round'; // two lines join\r\n  @Input() disabled: boolean = false;\r\n  public customIcon: boolean;\r\n\r\n  public get iconStyles(): any {\r\n    return {\r\n      width: this.width === 'auto' ? this.width : `${this.width}px`,\r\n      height: this.height === 'auto' ? this.height : `${this.height}px`,\r\n      fill: this.fill,\r\n      stroke: this.stroke,\r\n      strokeWidth: `${this.strokeWidth}px`,\r\n      strokeLinecap: this.strokeLinecap,\r\n      strokeLinejoin: this.strokeLinejoin\r\n    };\r\n  }\r\n\r\n  public get customName(): string {\r\n    return this.disabled ? `p-icon-custom-${this.iconName}-disabled` : `p-icon-custom-${this.iconName}`;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    allIcons[this.capitalizeName()] ? this.customIcon = false : this.customIcon = true;\r\n\r\n    !this.width ? this.width = '16' : null;\r\n    !this.height ? this.height = 'auto' : null;\r\n    !this.fill ? this.fill = 'none' : null;\r\n    !this.stroke ? this.stroke = 'currentColor' : null;\r\n    !this.strokeWidth ? this.strokeWidth = 1.5 : null;\r\n    !this.strokeLinecap ? this.strokeLinecap = 'round' : null;\r\n    !this.strokeLinejoin ? this.strokeLinejoin = 'round' : null;\r\n  }\r\n\r\n  capitalizeName(): string {\r\n    let iconNameCap = '';\r\n    this.iconName.split('-').forEach( str => iconNameCap += str.charAt(0).toUpperCase() + str.slice(1));\r\n    return iconNameCap;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n:host {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.p-icon {\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n// custom icons\r\n.p-icon-custom {\r\n  background-repeat: no-repeat;\r\n  background-size: contain;\r\n  &-eraser {\r\n    background-image: url('../assets/images/icons/eraser.svg');\r\n  }\r\n  &-eraser-disabled {\r\n    background-image: url('../assets/images/icons/eraser-disabled.svg');\r\n  }\r\n  &-unlink {\r\n    background-image: url('../assets/images/icons/unlink.svg');\r\n  }\r\n  &-first {\r\n    background-image: url('../assets/images/icons/first.svg');\r\n  }\r\n  &-first-disabled {\r\n    background-image: url('../assets/images/icons/first-disabled.svg');\r\n  }\r\n  &-last {\r\n    background-image: url('../assets/images/icons/last.svg');\r\n  }\r\n  &-last-disabled {\r\n    background-image: url('../assets/images/icons/last-disabled.svg');\r\n  }\r\n  &-folder-open {\r\n    background-image: url('../assets/images/icons/folder-open.svg');\r\n  }\r\n  &-view {\r\n    background-image: url('../assets/images/icons/view.svg');\r\n  }\r\n}\r\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "iconStyles": {
                    "name": "iconStyles",
                    "getSignature": {
                        "name": "iconStyles",
                        "type": "any",
                        "returnType": "any",
                        "line": 21
                    }
                },
                "customName": {
                    "name": "customName",
                    "getSignature": {
                        "name": "customName",
                        "type": "string",
                        "returnType": "string",
                        "line": 33
                    }
                }
            },
            "templateData": "<ng-template [ngIf]=\"!customIcon\" [ngIfElse]=\"customIconTemplate\">\r\n  <i-feather [name]=\"iconName\"\r\n             [ngStyle]=\"iconStyles\"\r\n             class=\"p-icon\">\r\n  </i-feather>\r\n</ng-template>\r\n\r\n<ng-template #customIconTemplate>\r\n  <i class=\"p-icon p-icon-custom\"\r\n     [ngClass]=\"customName\"\r\n     [ngStyle]=\"iconStyles\"></i>\r\n</ng-template>\r\n\r\n\r\n"
        },
        {
            "name": "InputHeaderComponent",
            "id": "component-InputHeaderComponent-b2116fc7668153caf873244a26b67a6f",
            "file": "projects/design-system-lib/src/lib/input/header/input-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-input-header",
            "styleUrls": [
                "./input-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "readonlyState",
                    "defaultValue": "true",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "ariaLabel",
                    "line": 14,
                    "type": "string",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "errorMessage",
                    "line": 16,
                    "type": "string",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "iconName",
                    "line": 23,
                    "type": "string",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "isSearch",
                    "defaultValue": "false",
                    "line": 22,
                    "type": "boolean",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "label",
                    "line": 13,
                    "type": "string",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "matcher",
                    "line": 21,
                    "type": "ErrorStateMatcher",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "placeholder",
                    "line": 15,
                    "type": "string",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 18,
                    "type": "boolean",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 12,
                    "type": "string",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "validators",
                    "line": 20,
                    "type": "ValidatorFn[]",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "value",
                    "line": 19,
                    "type": "string",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onSearch",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter<any>",
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputField",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputField'"
                        }
                    ]
                },
                {
                    "name": "formFieldControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "sub",
                    "type": "SubscriptionLike",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onInputBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onInputFocused",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "clearValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                },
                {
                    "name": "searchValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "inheritance": {
                        "file": "InputOutlineComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Input, ViewChild} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {InputOutlineComponent} from '../outline/input-outline.component';\r\n\r\n@Component({\r\n  selector: 'p-input-header',\r\n  templateUrl: './input-header.component.html',\r\n  styleUrls: ['./input-header.component.scss'],\r\n})\r\nexport class InputHeaderComponent extends InputOutlineComponent {\r\n  @Input() readonlyState: boolean = true;\r\n  @ViewChild('inputField') inputField: ElementRef;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  onInputFocused(): void {\r\n    this.readonlyState = false;\r\n    this.inputField.nativeElement.select();\r\n  }\r\n\r\n  onInputBlur(): void {\r\n    this.readonlyState = true;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../outline/input-outline-base\";\r\n\r\n.p-input-header {\r\n  //readonly\r\n  &.p-input-readonly {\r\n    //input\r\n    ::ng-deep .mat-input-element {\r\n      font-size: $big-font-size;\r\n      font-weight: 600;\r\n    }\r\n\r\n    &:not(.ng-invalid):hover {\r\n      ::ng-deep .mat-form-field-outline,\r\n      ::ng-deep .mat-form-field-outline-thick {\r\n        color: $gray-scale-400;\r\n      }\r\n      .p-input-outline-icon {\r\n        opacity: 1;\r\n        margin-right: 7px;\r\n      }\r\n    }\r\n    &.mat-form-field-invalid:hover {\r\n      ::ng-deep .mat-form-field-outline,\r\n      ::ng-deep .mat-form-field-outline-thick {\r\n        color: $supportive-alert-700;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.p-input-outline-icon {\r\n  opacity: 0;\r\n  //transition: opacity 280ms;\r\n}\r\n",
                    "styleUrl": "./input-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "extends": "InputOutlineComponent",
            "templateData": "<mat-form-field class=\"p-input-outline p-input-header\"\r\n                appearance=\"outline\"\r\n                [ngClass]=\"{'p-input-readonly' : readonlyState, 'no-error-message': !errorMessage}\"\r\n                floatLabel=\"always\">\r\n\r\n  <input matInput\r\n         #inputField\r\n         [type]=\"type\"\r\n         [placeholder]=\"placeholder\"\r\n         [readonly]=\"readonlyState\"\r\n         attr.aria-label=\"{{ariaLabel}}\"\r\n         [formControl]=\"formFieldControl\"\r\n         [errorStateMatcher]=\"matcher\"\r\n         autocomplete=\"off\"\r\n         (focus)=\"onInputFocused()\"\r\n         (blur)=\"onInputBlur()\"\r\n         class=\"p-input-text-input\"\r\n         [class.readonly]=\"readonlyState\">\r\n\r\n  <p-icon class=\"p-input-outline-icon\"\r\n          matSuffix\r\n          iconName=\"edit-2\"\r\n          width=\"18\"\r\n          height=\"auto\">\r\n  </p-icon>\r\n\r\n</mat-form-field>\r\n"
        },
        {
            "name": "InputLinkComponent",
            "id": "component-InputLinkComponent-20ee588312c7550f21de3e32395f88af",
            "file": "projects/design-system-lib/src/lib/input/link/input-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-input-link",
            "styleUrls": [
                "./input-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "errorMessage",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "matcher",
                    "line": 20,
                    "type": "ErrorStateMatcher"
                },
                {
                    "name": "placeholder",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "validators",
                    "line": 19,
                    "type": "ValidatorFn[]"
                },
                {
                    "name": "value",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formFieldControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "openModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "removeLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormControl, ValidatorFn} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {ButtonTypeEnum} from '../../button/button-type.enum';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ModalComponent} from '../../modal/modal.component';\r\n\r\n@Component({\r\n  selector: 'p-input-link',\r\n  templateUrl: './input-link.component.html',\r\n  styleUrls: ['./input-link.component.scss'],\r\n})\r\nexport class InputLinkComponent implements OnInit {\r\n  @Input() ariaLabel: string;\r\n  @Input() placeholder: string;\r\n  @Input() errorMessage: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() value: string;\r\n  @Input() validators: ValidatorFn[];\r\n  @Input() matcher: ErrorStateMatcher;\r\n  public formFieldControl: FormControl;\r\n  public buttonType = ButtonTypeEnum;\r\n\r\n  constructor(public dialog: MatDialog) {}\r\n\r\n  ngOnInit(): void {\r\n    this.formFieldControl = new FormControl(\r\n      {value: this.value, disabled: this.disabled},\r\n      this.validators);\r\n  }\r\n\r\n  openModal(): void {\r\n    console.log('modal');\r\n    const data = {\r\n      headerText: 'Lorem Ipsum Title',\r\n        textParagraph: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus ipsum orci, imperdiet quis cursus sed, efficitur vitae risus. Quisque lacinia, risus eu rhoncus eleifend.',\r\n        actions: [{\r\n        label: 'Action',\r\n        buttonType: ButtonTypeEnum.Primary,\r\n      },\r\n      {\r\n        label: 'Cancel',\r\n        buttonType: ButtonTypeEnum.Secondary,\r\n      }]\r\n    };\r\n    const panelClass = ['p-modal', 'p-modal-small'];\r\n    const dialogRef = this.dialog.open(ModalComponent, {\r\n      data,\r\n      panelClass, // required\r\n    });\r\n  }\r\n\r\n  removeLink(): void {\r\n    this.formFieldControl.setValue('');\r\n    this.value = '';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../text/input-text.component\";\r\n\r\n.p-input-link {\r\n  color: $secondary-a-700;\r\n\r\n  ::placeholder {\r\n    color: $secondary-a-700;\r\n  }\r\n\r\n  .p-input-text-input {\r\n    color: $secondary-a-700;\r\n    width: calc(100% - #{$gap-base} - #{$gap-small});\r\n    @include ellipsis;\r\n  }\r\n\r\n  ::ng-deep .mat-form-field-infix {\r\n    width: auto;\r\n  }\r\n\r\n  &-prefix {\r\n    margin-left: $gap-base;\r\n  }\r\n\r\n  .p-input-text-input {\r\n    cursor: pointer;\r\n  }\r\n\r\n  ::ng-deep .mat-form-field-prefix + .mat-form-field-infix .p-input-text-input {\r\n    padding-left: $gap-small;\r\n  }\r\n\r\n  ::ng-deep .mat-form-field-suffix {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  // hover\r\n  &:not(.mat-form-field-disabled):not(.mat-form-field-invalid):hover {\r\n    color: $secondary-a-800;\r\n\r\n    ::placeholder {\r\n      color: $secondary-a-800;\r\n    }\r\n\r\n    .p-input-text-input {\r\n      color: $secondary-a-800;\r\n      @include ellipsis;\r\n    }\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./input-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field class=\"p-input-text p-input-link p-input-text-readonly\"\r\n                appearance=\"standard\"\r\n                floatLabel=\"always\">\r\n  <p-icon *ngIf=\"formFieldControl.value === ''\"\r\n          class=\"p-input-link-prefix\"\r\n          matPrefix\r\n          iconName=\"link\"\r\n          width=\"16\"\r\n          height=\"16\">\r\n  </p-icon>\r\n  <input matInput\r\n         type=\"text\"\r\n         [placeholder]=\"placeholder\"\r\n         [readonly]=\"true\"\r\n         attr.aria-label=\"{{ariaLabel}}\"\r\n         [formControl]=\"formFieldControl\"\r\n         [errorStateMatcher]=\"matcher\"\r\n         (click)=\"openModal()\"\r\n         class=\"p-input-text-input\"\r\n         [matTooltip]=\"value\"\r\n         matTooltipPosition=\"above\"\r\n         matTooltipClass=\"p-tooltip above\">\r\n\r\n  <p-button *ngIf=\"formFieldControl.value !== ''\"\r\n            class=\"p-input-text-icon edit-link\"\r\n            matSuffix\r\n            ariaLabel=\"Edit Link\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            iconBefore=\"link\"\r\n            iconBeforeWidth=\"16\"\r\n            (onClickTask)=\"openModal()\"\r\n            matTooltip=\"Edit Link\"\r\n            matTooltipPosition=\"above\"\r\n            matTooltipClass=\"p-tooltip above\"></p-button>\r\n\r\n  <p-button *ngIf=\"formFieldControl.value !== ''\"\r\n            class=\"p-input-text-icon remove-link\"\r\n            matSuffix\r\n            ariaLabel=\"Unlink\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            iconBefore=\"unlink\"\r\n            iconBeforeWidth=\"16\"\r\n            iconBeforeHeight=\"16\"\r\n            (onClickTask)=\"removeLink()\"\r\n            matTooltip=\"Unlink\"\r\n            matTooltipPosition=\"above\"\r\n            matTooltipClass=\"p-tooltip above\"></p-button>\r\n\r\n  <mat-error *ngIf=\"formFieldControl.invalid\"\r\n             class=\"p-input-text-error\">\r\n    {{errorMessage}}\r\n  </mat-error>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "InputNumericComponent",
            "id": "component-InputNumericComponent-3001ff527814bfbb3bd1cce052d2b4d7",
            "file": "projects/design-system-lib/src/lib/input/numeric/input-numeric.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-input-numeric",
            "styleUrls": [
                "./input-numeric.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-numeric.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "errorMessage",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "iconName",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "labelLast",
                    "defaultValue": "false",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "matcher",
                    "line": 24,
                    "type": "ErrorStateMatcher"
                },
                {
                    "name": "notEditable",
                    "defaultValue": "false",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "placeholder",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "InputNumericSizeEnum.Large",
                    "line": 23,
                    "type": "InputNumericSizeEnum"
                },
                {
                    "name": "type",
                    "defaultValue": "'number'",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "validators",
                    "line": 21,
                    "type": "ValidatorFn[]"
                },
                {
                    "name": "value",
                    "line": 20,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formFieldControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormControl, ValidatorFn} from '@angular/forms';\r\nimport {InputNumericSizeEnum} from './input-numeric-size.enum';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'p-input-numeric',\r\n  templateUrl: './input-numeric.component.html',\r\n  styleUrls: ['./input-numeric.component.scss'],\r\n})\r\nexport class InputNumericComponent implements OnInit {\r\n  @Input() type: string = 'number';\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string; // required\r\n  @Input() placeholder: number;\r\n  @Input() errorMessage: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() readonly: boolean = false;\r\n  @Input() notEditable: boolean = false; // readonly input that looks like regular one (with underline)\r\n  @Input() value: number;\r\n  @Input() validators: ValidatorFn[];\r\n  @Input() labelLast: boolean = false;\r\n  @Input() size: InputNumericSizeEnum = InputNumericSizeEnum.Large;\r\n  @Input() matcher: ErrorStateMatcher;\r\n  @Input() iconName: string;\r\n  public formFieldControl: FormControl;\r\n\r\n  public get classes(): string[] {\r\n    const classParams = [];\r\n    this.readonly ? classParams.push('p-input-numeric-readonly') : null;\r\n    classParams.push(`p-input-numeric-${this.size}`);\r\n    return classParams;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.formFieldControl = new FormControl(\r\n      {value: this.value, disabled: this.disabled},\r\n      this.validators);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n$input-numeric-width: 55px;\r\n$input-numeric-padding: 8px;\r\n\r\n.p-input-numeric {\r\n  &-small {\r\n    width: 56px;\r\n  }\r\n  &-medium {\r\n    width: 112px;\r\n  }\r\n  &-large {\r\n    width: 224px;\r\n  }\r\n\r\n  &-container {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  &-label {\r\n    font-family: $font-family-basic;\r\n    font-weight: 400;\r\n    font-size: $small-font-size;\r\n    color: $primary-a-900;\r\n    padding-bottom: 15px;\r\n    &.disabled {\r\n      color: $gray-scale-600;\r\n    }\r\n    &.first {\r\n      margin-right: 8px;\r\n    }\r\n    &.last {\r\n      margin-left: 8px;\r\n    }\r\n  }\r\n\r\n  ::ng-deep & {\r\n    // material styles override\r\n    .p-input-numeric-input {\r\n      font-family: $font-family-basic;\r\n      font-size: $small-font-size;\r\n      width: 100%;\r\n      line-height: 20px;\r\n      color: $primary-a-900;\r\n      caret-color: $primary-a-900;\r\n    }\r\n    .mat-form-field-infix {\r\n      width: $input-numeric-width;\r\n      padding-top: 0;\r\n      padding-bottom: 6px;\r\n      padding-left: $input-numeric-padding;\r\n    }\r\n    .mat-form-field-label-wrapper {\r\n      padding-top: 0;\r\n    }\r\n    &.mat-form-field-appearance-standard .mat-form-field-flex {\r\n      padding-top: 0;\r\n    }\r\n    &.mat-form-field-appearance-standard .mat-form-field-underline {\r\n      background-color: transparent;\r\n      box-shadow: inset 0px -1px 0px $gray-scale-600;\r\n    }\r\n    &.mat-form-field.mat-focused .mat-form-field-underline,\r\n    &:not(.mat-form-field-disabled):not(.mat-form-field-invalid)\r\n            .mat-form-field-flex:hover {\r\n      &~.mat-form-field-underline {\r\n        background-color: transparent;\r\n        box-shadow: inset 0px -1px 0px $primary-a-900;\r\n      }\r\n      .mat-form-field-suffix {\r\n        opacity: 1;\r\n      }\r\n    }\r\n    .mat-form-field-ripple {\r\n      display: none;\r\n    }\r\n    .mat-form-field-subscript-wrapper {\r\n      margin-top: 5px;\r\n      overflow: visible;\r\n    }\r\n    .mat-error {\r\n      font-family: $font-family-basic;\r\n      font-size: $tiny-font-size;\r\n      color: $supportive-alert-500;\r\n      line-height: 12px;\r\n      white-space: nowrap;\r\n    }\r\n\r\n    // disabled\r\n    &.mat-form-field-disabled {\r\n      .mat-input-element {\r\n        color: $gray-scale-600;\r\n      }\r\n      .mat-form-field-underline {\r\n        box-shadow: inset 0px -1px 0px $gray-scale-400;\r\n      }\r\n    }\r\n\r\n    // error state\r\n    &.ng-invalid {\r\n      .mat-form-field-underline {\r\n        box-shadow: inset 0px -1px 0px $supportive-alert-500;\r\n      }\r\n      &.mat-form-field .mat-form-field-flex:hover~.mat-form-field-underline,\r\n      &.mat-form-field.mat-focused .mat-form-field-underline {\r\n        box-shadow: inset 0px -1px 0px $supportive-alert-700;\r\n      }\r\n    }\r\n\r\n    // readonly\r\n    &.p-input-numeric-readonly {\r\n      &:not(.mat-form-field-disabled):not(.mat-form-field-invalid) .mat-form-field-flex:hover~.mat-form-field-underline,\r\n\r\n      .mat-form-field-underline {\r\n        box-shadow: none;\r\n      }\r\n    }\r\n\r\n    //icon\r\n    .mat-form-field-suffix {\r\n      align-self: flex-end;\r\n      opacity: 0;\r\n    }\r\n    .p-input-numeric-icon {\r\n      padding-bottom: 6px;\r\n      .mat-form-field-disabled &,\r\n      .p-input-readonly & {\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n::ng-deep .no-error-message {\r\n  .p-input-numeric-label {\r\n    padding-bottom: 6px;\r\n  }\r\n  .mat-form-field-wrapper {\r\n    padding-bottom: 0;\r\n  }\r\n  .mat-form-field-infix {\r\n    border-top: 0;\r\n  }\r\n  .mat-form-field-underline {\r\n    position: static;\r\n  }\r\n}\r\n",
                    "styleUrl": "./input-numeric.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 28
                    }
                }
            },
            "templateData": "<div class=\"p-input-numeric-container\" [class.no-error-message]=\"!errorMessage\">\r\n  <ng-template [ngIf]=\"label\" [ngIfElse]=\"noLabel\">\r\n\r\n    <label *ngIf=\"!labelLast\" class=\"p-input-numeric-label first\" [ngClass]=\"{'disabled' : disabled}\">\r\n      {{label}}\r\n    </label>\r\n    <ng-container *ngTemplateOutlet=\"noLabel\"></ng-container>\r\n    <label *ngIf=\"labelLast\" class=\"p-input-numeric-label last\" [ngClass]=\"{'disabled' : disabled}\">\r\n      {{label}}\r\n    </label>\r\n  </ng-template>\r\n\r\n  <ng-template #noLabel>\r\n    <mat-form-field class=\"p-input-numeric\"\r\n                    appearance=\"standard\"\r\n                    [ngClass]=\"classes\"\r\n                    floatLabel=\"always\">\r\n      <input matInput\r\n             [type]=\"type\"\r\n             [placeholder]=\"placeholder\"\r\n             [readonly]=\"readonly || notEditable\"\r\n             attr.aria-label=\"{{ariaLabel}}\"\r\n             [formControl]=\"formFieldControl\"\r\n             [errorStateMatcher]=\"matcher\"\r\n             autocomplete=\"off\"\r\n             onfocus=\"this.select()\"\r\n             class=\"p-input-numeric-input\">\r\n      <p-icon *ngIf=\"iconName\"\r\n              class=\"p-input-numeric-icon\"\r\n              matSuffix\r\n              [iconName]=\"iconName\"\r\n              width=\"16\"\r\n              height=\"16\">\r\n      </p-icon>\r\n      <mat-error *ngIf=\"formFieldControl.invalid\"\r\n                 class=\"p-input-numeric-error\">\r\n        {{errorMessage}}\r\n      </mat-error>\r\n    </mat-form-field>\r\n  </ng-template>\r\n</div>\r\n"
        },
        {
            "name": "InputOutlineComponent",
            "id": "component-InputOutlineComponent-10b18ee663f3db6782c50d0ebfeda2d7",
            "file": "projects/design-system-lib/src/lib/input/outline/input-outline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-input-outline",
            "styleUrls": [
                "./input-outline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-outline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "errorMessage",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "iconName",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "isSearch",
                    "defaultValue": "false",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "matcher",
                    "line": 21,
                    "type": "ErrorStateMatcher"
                },
                {
                    "name": "placeholder",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "validators",
                    "line": 20,
                    "type": "ValidatorFn[]"
                },
                {
                    "name": "value",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onSearch",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formFieldControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sub",
                    "type": "SubscriptionLike",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "searchValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\r\nimport {FormControl, ValidatorFn} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {SubscriptionLike} from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'p-input-outline',\r\n  templateUrl: './input-outline.component.html',\r\n  styleUrls: ['./input-outline.component.scss'],\r\n})\r\nexport class InputOutlineComponent implements OnInit, OnDestroy {\r\n  @Input() type: string = 'text';\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string;\r\n  @Input() placeholder: string;\r\n  @Input() errorMessage: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() readonly: boolean = false;\r\n  @Input() value: string;\r\n  @Input() validators: ValidatorFn[];\r\n  @Input() matcher: ErrorStateMatcher;\r\n  @Input() isSearch: boolean = false;\r\n  @Input() iconName: string;\r\n  @Output() onSearch: EventEmitter<any> = new EventEmitter();\r\n  public formFieldControl: FormControl;\r\n  private sub: SubscriptionLike;\r\n\r\n  ngOnInit(): void {\r\n    this.formFieldControl = new FormControl(\r\n      {value: this.value, disabled: this.disabled},\r\n      this.validators);\r\n    this.sub = this.formFieldControl.valueChanges.subscribe((value: string) => {\r\n      this.onSearch.emit(value);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.sub) {\r\n      this.sub.unsubscribe();\r\n      this.sub = null;\r\n    }\r\n  }\r\n\r\n  clearValue(): void {\r\n    this.formFieldControl.setValue('');\r\n  }\r\n\r\n  searchValue(): void {\r\n    console.log('search');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"input-outline-base\";\r\n\r\n::ng-deep .p-input-outline {\r\n  &.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label {\r\n    width: 100%;\r\n    transform: translateY(-30px);\r\n  }\r\n\r\n  .mat-form-field-label-wrapper {\r\n    top: -16px;\r\n    padding-top: 16px;\r\n  }\r\n\r\n  &.mat-form-field.mat-focused .mat-form-field-label,\r\n  &.mat-form-field.mat-form-field-invalid .mat-form-field-label {\r\n    color: $gray-scale-700;\r\n  }\r\n\r\n  &-button {\r\n    @include resetButton;\r\n    width: $input-text-height - 2px;\r\n    height: $input-text-height - 2px;\r\n    margin-right: 1px;\r\n\r\n    &:hover {\r\n      color: $secondary-a-700;\r\n      background-color: $primary-c-50;\r\n    }\r\n\r\n    .mat-form-field-disabled &,\r\n    .p-input-readonly & {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  &-icon {\r\n    margin-right: 7px;\r\n    .mat-form-field-disabled &,\r\n    .p-input-readonly & {\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./input-outline.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-form-field class=\"p-input-outline\"\r\n                appearance=\"outline\"\r\n                [ngClass]=\"{'p-input-readonly' : readonly, 'no-error-message': !errorMessage}\"\r\n                floatLabel=\"always\">\r\n\r\n  <mat-label class=\"p-input-text-label paragraph-3-default\">{{label}}</mat-label>\r\n\r\n  <input matInput\r\n         [type]=\"type\"\r\n         [placeholder]=\"placeholder\"\r\n         [readonly]=\"readonly\"\r\n         attr.aria-label=\"{{ariaLabel}}\"\r\n         [formControl]=\"formFieldControl\"\r\n         [errorStateMatcher]=\"matcher\"\r\n         autocomplete=\"off\"\r\n         onfocus=\"this.select()\"\r\n         class=\"p-input-text-input\">\r\n\r\n  <button *ngIf=\"isSearch && formFieldControl.value\"\r\n          matSuffix\r\n          aria-label=\"Clear\"\r\n          class=\"p-input-outline-button\"\r\n          (click)=\"clearValue()\">\r\n    <p-icon class=\"p-input-outline-icon-clear\"\r\n            iconName=\"x\"\r\n            width=\"16\"\r\n            height=\"auto\">\r\n    </p-icon>\r\n  </button>\r\n\r\n  <button *ngIf=\"isSearch && !formFieldControl.value\"\r\n          matSuffix\r\n          aria-label=\"Search\"\r\n          class=\"p-input-outline-button\"\r\n          (click)=\"searchValue()\">\r\n    <p-icon class=\"p-input-outline-icon-search\"\r\n            iconName=\"search\"\r\n            width=\"16\"\r\n            height=\"auto\">\r\n    </p-icon>\r\n  </button>\r\n\r\n  <p-icon *ngIf=\"iconName && !isSearch\"\r\n          class=\"p-input-outline-icon\"\r\n          matSuffix\r\n          [iconName]=\"iconName\"\r\n          width=\"16\"\r\n          height=\"auto\"\r\n          stroke=\"#B3B3B3\">\r\n  </p-icon>\r\n\r\n  <mat-error *ngIf=\"formFieldControl.invalid\"\r\n             class=\"p-input-text-error\">\r\n    {{errorMessage}}\r\n  </mat-error>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "InputTextComponent",
            "id": "component-InputTextComponent-f4a0a2edd88a1682f9a14d35cb3e8730",
            "file": "projects/design-system-lib/src/lib/input/text/input-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-input-text",
            "styleUrls": [
                "./input-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "errorMessage",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "iconName",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "matcher",
                    "line": 20,
                    "type": "ErrorStateMatcher"
                },
                {
                    "name": "placeholder",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "validators",
                    "line": 19,
                    "type": "ValidatorFn[]"
                },
                {
                    "name": "value",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formFieldControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormControl, ValidatorFn} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'p-input-text',\r\n  templateUrl: './input-text.component.html',\r\n  styleUrls: ['./input-text.component.scss'],\r\n})\r\nexport class InputTextComponent implements OnInit {\r\n  @Input() type: string = 'text';\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string;\r\n  @Input() placeholder: string;\r\n  @Input() errorMessage: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() readonly: boolean = false;\r\n  @Input() value: string;\r\n  @Input() validators: ValidatorFn[];\r\n  @Input() matcher: ErrorStateMatcher;\r\n  @Input() iconName: string;\r\n  public formFieldControl: FormControl;\r\n\r\n  ngOnInit(): void {\r\n    this.formFieldControl = new FormControl(\r\n      {value: this.value, disabled: this.disabled},\r\n      this.validators);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n.p-input-text {\r\n  width: $input-text-width;\r\n  ::ng-deep & {\r\n    // material styles override\r\n    &.mat-form-field-appearance-standard.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label {\r\n      transform: translateY(-23px);\r\n    }\r\n    .mat-form-field-label-wrapper {\r\n      top: -16px;\r\n      padding-top: 16px;\r\n    }\r\n    &.mat-form-field.mat-focused .mat-form-field-label,\r\n    &.mat-form-field.mat-form-field-invalid .mat-form-field-label {\r\n      color: $gray-scale-700;\r\n    }\r\n    .p-input-text-input {\r\n      font-family: $font-family-basic;\r\n      font-size: $small-font-size;\r\n      width: calc(100% - #{$input-text-padding});\r\n      line-height: 20px;\r\n      color: $primary-a-900;\r\n      padding-left: $input-text-padding;\r\n      caret-color: $primary-a-900;\r\n    }\r\n    .mat-form-field-infix {\r\n      padding-bottom: 6px;\r\n    }\r\n    &.mat-form-field-appearance-standard .mat-form-field-flex {\r\n      padding-top: 0;\r\n    }\r\n    &.mat-form-field-appearance-standard .mat-form-field-underline {\r\n      background-color: transparent;\r\n      box-shadow: inset 0px -1px 0px $gray-scale-600;\r\n    }\r\n    &.mat-form-field.mat-focused .mat-form-field-underline,\r\n    &:not(.mat-form-field-disabled):not(.mat-form-field-invalid)\r\n            .mat-form-field-flex:hover {\r\n      & ~.mat-form-field-underline {\r\n        background-color: transparent;\r\n        box-shadow: inset 0px -1px 0px $primary-a-900;\r\n      }\r\n      .mat-form-field-suffix {\r\n        opacity: 1;\r\n      }\r\n    }\r\n    .mat-form-field-ripple {\r\n      display: none;\r\n    }\r\n    .mat-form-field-subscript-wrapper {\r\n      margin-top: $gap-small;\r\n      transform: translateY(22px);\r\n    }\r\n    .mat-error {\r\n      font-family: $font-family-basic;\r\n      font-size: $tiny-font-size;\r\n      color: $supportive-alert-500;\r\n      line-height: 12px;\r\n    }\r\n\r\n    // disabled\r\n    &.mat-form-field-disabled {\r\n      .mat-input-element {\r\n        color: $gray-scale-600;\r\n      }\r\n      .mat-form-field-underline {\r\n        box-shadow: inset 0px -1px 0px $gray-scale-400;\r\n      }\r\n    }\r\n\r\n    // error state\r\n    &.ng-invalid {\r\n      .mat-form-field-underline {\r\n        box-shadow: inset 0px -1px 0px $supportive-alert-500;\r\n      }\r\n      &.mat-form-field .mat-form-field-flex:hover~.mat-form-field-underline,\r\n      &.mat-form-field.mat-focused .mat-form-field-underline {\r\n        box-shadow: inset 0px -1px 0px $supportive-alert-700;\r\n      }\r\n    }\r\n\r\n    // readonly\r\n    &.p-input-text-readonly:not(.p-input-link) {\r\n      &:not(.mat-form-field-disabled):not(.mat-form-field-invalid) .mat-form-field-flex:hover~.mat-form-field-underline,\r\n\r\n      .mat-form-field-underline {\r\n        box-shadow: none;\r\n      }\r\n    }\r\n\r\n    //icon\r\n    .mat-form-field-suffix {\r\n      align-self: flex-end;\r\n      opacity: 0;\r\n    }\r\n    &-icon {\r\n      padding-bottom: 6px;\r\n      .mat-form-field-disabled &,\r\n      .p-input-readonly & {\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n\r\n  // no padding for error message on the bottom of mat-form-field\r\n  .p-input-text-label {\r\n    padding-bottom: 6px;\r\n  }\r\n  ::ng-deep .mat-form-field-wrapper {\r\n    padding-bottom: 0;\r\n  }\r\n  ::ng-deep .mat-form-field-infix {\r\n    border-top: 0;\r\n  }\r\n  ::ng-deep .mat-form-field-underline {\r\n    position: static;\r\n  }\r\n}\r\n",
                    "styleUrl": "./input-text.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field class=\"p-input-text\"\r\n                appearance=\"standard\"\r\n                [ngClass]=\"{'p-input-text-readonly' : readonly}\"\r\n                floatLabel=\"always\">\r\n  <mat-label class=\"p-input-text-label paragraph-3-default\">{{label}}</mat-label>\r\n  <input matInput\r\n         [type]=\"type\"\r\n         [placeholder]=\"placeholder\"\r\n         [readonly]=\"readonly\"\r\n         attr.aria-label=\"{{ariaLabel}}\"\r\n         [formControl]=\"formFieldControl\"\r\n         [errorStateMatcher]=\"matcher\"\r\n         onfocus=\"this.select()\"\r\n         class=\"p-input-text-input\">\r\n  <p-icon *ngIf=\"iconName\"\r\n          class=\"p-input-text-icon\"\r\n          matSuffix\r\n          [iconName]=\"iconName\"\r\n          width=\"16\"\r\n          height=\"16\">\r\n  </p-icon>\r\n  <mat-error *ngIf=\"formFieldControl.invalid\"\r\n             class=\"p-input-text-error\">\r\n    {{errorMessage}}\r\n  </mat-error>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "InputTextTableLayoutComponent",
            "id": "component-InputTextTableLayoutComponent-839b38722f2b9828cea34316529ac889",
            "file": "projects/design-system-lib/src/lib/input/table-layout/input-text-table-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-input-text-table-layout",
            "styleUrls": [
                "./input-text-table-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-text-table-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isExpandable",
                    "defaultValue": "true",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "table",
                    "line": 12,
                    "type": "IInputTextTableLine[]"
                },
                {
                    "name": "title",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isHidden",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "6",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.style",
                    "line": 18,
                    "type": "any"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, HostBinding, Input, OnInit} from '@angular/core';\r\nimport {IInputTextTableLine} from './input-text-table-line.interface';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'p-input-text-table-layout',\r\n  templateUrl: './input-text-table-layout.component.html',\r\n  styleUrls: ['./input-text-table-layout.component.scss'],\r\n})\r\nexport class InputTextTableLayoutComponent implements OnInit {\r\n  @Input()  title: string;\r\n  @Input() table: IInputTextTableLine[];\r\n  @Input() isExpandable: boolean = true;\r\n  public isHidden: boolean = false;\r\n  private value: number = 6;\r\n\r\n  @HostBinding('attr.style')\r\n  public get valueAsStyle(): any {\r\n    return this.sanitizer.bypassSecurityTrustStyle(`--row-amount: ${this.value}`);\r\n  }\r\n\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  ngOnInit(): void {\r\n    this.value = this.table.length;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n$table-header-max-width: 240px;\r\n$row-height: 52px;\r\n\r\n.input-table {\r\n  border-collapse: collapse;\r\n\r\n  &-static-title {\r\n    margin-bottom: 15px;\r\n  }\r\n\r\n  &-row {\r\n    height: $row-height;\r\n    opacity: 1;\r\n    transition: opacity 300ms;\r\n    &.hidden {\r\n      opacity: 0;\r\n    }\r\n  }\r\n\r\n  &-header {\r\n    font-family: $font-family-basic;\r\n    font-size: $base-font-size;\r\n    font-weight: 400;\r\n    color: $gray-scale-700;\r\n    text-align: left;\r\n    text-transform: capitalize;\r\n    max-width: $table-header-max-width;\r\n    padding-right: $gap-double - $gap-small;\r\n    padding-bottom: $gap-base;\r\n    &-container {\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n    &-text {\r\n      @include clamp;\r\n      margin-right: $gap-small;\r\n    }\r\n    &-attention {\r\n      display: inline-block;\r\n      align-self: flex-end;\r\n      margin-right: $gap-small;\r\n    }\r\n    &-required {\r\n      font-size: $big-font-size;\r\n      color: $supportive-alert-500;\r\n      align-self: flex-end;\r\n      margin-right: $gap-small;\r\n    }\r\n  }\r\n\r\n  &-data {\r\n    ::ng-deep .mat-form-field-infix {\r\n      padding-top: 0;\r\n      border-top-width: 5px;\r\n    }\r\n  }\r\n\r\n  &-trigger {\r\n    @include resetButton;\r\n    color: $primary-a-900;\r\n    margin-bottom: 15px;\r\n    &-icon {\r\n      display: flex;\r\n      margin-right: 12.5px;\r\n      transform: rotate(0);\r\n      transition: transform 280ms ease-in-out;\r\n      &.closed {\r\n        transform: rotate(-90deg);\r\n      }\r\n    }\r\n  }\r\n\r\n  &-container {\r\n    height: calc( var(--row-amount) * #{$row-height});\r\n    overflow: hidden;\r\n    transition: height 280ms ease-in-out;\r\n    &.collapsed {\r\n      height: 0;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./input-text-table-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"input-table-wrapper\">\r\n\r\n  <ng-template [ngIf]=\"isExpandable\" [ngIfElse]=\"static\">\r\n    <button class=\"input-table-trigger\"\r\n            (click)=\"isHidden = !isHidden\">\r\n      <p-icon class=\"input-table-trigger-icon\"\r\n              [class.closed]=\"isHidden\"\r\n              iconName=\"chevron-down\"\r\n              width=\"16\"\r\n              height=\"auto\"\r\n              strokeWidth=\"3\"></p-icon>\r\n      <span class=\"headline-2-bold\">{{title}}</span>\r\n    </button>\r\n  </ng-template>\r\n\r\n  <ng-template #static>\r\n    <h3 class=\"input-table-static-title headline-2-bold\">{{title}}</h3>\r\n  </ng-template>\r\n\r\n\r\n  <div tabindex=\"-1\"\r\n       attr.aria-label=\"{{title}}\"\r\n       class=\"input-table-container\"\r\n       [class.collapsed]=\"isHidden\">\r\n    <table class=\"input-table\">\r\n      <tbody class=\"input-table-body\">\r\n      <ng-container *ngFor=\"let input of table\">\r\n        <tr class=\"input-table-row\">\r\n          <th class=\"input-table-header\">\r\n             <span class=\"input-table-header-container\">\r\n              <span class=\"input-table-header-text paragraph-2-default\">\r\n                {{input.tableHeader.name}}\r\n              </span>\r\n              <p-icon *ngIf=\"input.tableHeader.attention\"\r\n                      class=\"input-table-header-attention\"\r\n                      iconName=\"alert-circle\"\r\n                      width=\"16\"\r\n                      height=\"16\"\r\n                      stroke=\"#2D3047\"></p-icon>\r\n              <span *ngIf=\"input.tableHeader.required\"\r\n                    class=\"input-table-header-required\">\r\n                &#42;\r\n              </span>\r\n            </span>\r\n          </th>\r\n          <td class=\"input-table-data\">\r\n            <p-input-text [type]=\"input.tableData.type\"\r\n                          [label]=\"input.tableData.label\"\r\n                          [ariaLabel]=\"input.tableData.ariaLabel\"\r\n                          [placeholder]=\"input.tableData.placeholder\"\r\n                          [errorMessage]=\"input.tableData.errorMessage\"\r\n                          [disabled]=\"input.tableData.disabled\"\r\n                          [readonly]=\"input.tableData.readonly\"\r\n                          [value]=\"input.tableData.value\"\r\n                          [validators]=\"input.tableData.validators\">\r\n            </p-input-text>\r\n          </td>\r\n        </tr>\r\n      </ng-container>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LabelMainComponent",
            "id": "component-LabelMainComponent-77993cba0f443ee469fe7ef3e049f422",
            "file": "projects/design-system-lib/src/lib/labels/label-main/label-main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-label-main",
            "styleUrls": [
                "./label-main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./label-main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isTriggerMenu",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "type",
                    "line": 11,
                    "type": "LabelTypesEnum"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {LabelTypesEnum} from '../label-types.enum';\r\n\r\n@Component({\r\n  selector: 'p-label-main',\r\n  templateUrl: './label-main.component.html',\r\n  styleUrls: ['./label-main.component.scss'],\r\n})\r\nexport class LabelMainComponent {\r\n  @Input() label: string;\r\n  @Input() type: LabelTypesEnum;\r\n  @Input() isTriggerMenu: boolean;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n.p-label-main {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-family: $font-family-basic;\r\n  font-weight: 700;\r\n  font-size: $tiny-font-size;\r\n  letter-spacing: 0.05em;\r\n  text-transform: uppercase;\r\n  max-width: 130px;\r\n  min-width: 106px;\r\n  height: 22px;\r\n  border-radius: 23px;\r\n\r\n  &-critical {\r\n    color: $gray-scale-1;\r\n    background-color: $supportive-alert-700;\r\n    &.trigger:hover {\r\n      background-color: $supportive-alert-800;\r\n    }\r\n  }\r\n\r\n  &-danger {\r\n    color: $gray-scale-1;\r\n    background-color: $supportive-alert-500;\r\n    &.trigger:hover {\r\n      background-color: $supportive-alert-600;\r\n    }\r\n  }\r\n\r\n  &-success {\r\n    color: $gray-scale-1;\r\n    background-color: $supportive-success-400;\r\n    &.trigger:hover {\r\n      background-color: $supportive-success-500;\r\n    }\r\n  }\r\n\r\n  &-medium {\r\n    color: $gray-scale-1;\r\n    background-color: $supportive-medium-400;\r\n    &.trigger:hover {\r\n      background-color: $supportive-medium-500;\r\n    }\r\n  }\r\n\r\n  &-low {\r\n    color: $primary-a-900;\r\n    background-color: $supportive-low-300;\r\n    &.trigger:hover {\r\n      background-color: $supportive-low-400;\r\n    }\r\n  }\r\n\r\n  &-lightGray {\r\n    color: $primary-a-900;\r\n    background-color: $gray-scale-400;\r\n    &.trigger:hover {\r\n      background-color: $gray-scale-500;\r\n    }\r\n  }\r\n\r\n  &-darkGray {\r\n    color: $gray-scale-1;\r\n    background-color: $gray-scale-800;\r\n    &.trigger:hover {\r\n      background-color: $primary-a-900;\r\n    }\r\n  }\r\n\r\n  &-dev1 {\r\n    color: $gray-scale-1;\r\n    background-color: $dev-a-100;\r\n    &.trigger:hover {\r\n      background-color: $dev-a-200;\r\n    }\r\n  }\r\n\r\n  &-dev2 {\r\n    color: $gray-scale-1;\r\n    background-color: $dev-b-200;\r\n    &.trigger:hover {\r\n      background-color: $dev-b-300;\r\n    }\r\n  }\r\n\r\n  &-dev3 {\r\n    color: $gray-scale-1;\r\n    background-color: $dev-c-300;\r\n    &.trigger:hover {\r\n      background-color: $dev-c-400;\r\n    }\r\n  }\r\n\r\n  &-icon {\r\n    margin-left: 6px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./label-main.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-label-main\"\r\n     [ngClass]=\"'p-label-main-' + type\"\r\n     [class.trigger]=\"isTriggerMenu\">\r\n  {{label}}\r\n  <p-icon *ngIf=\"isTriggerMenu\"\r\n          class=\"p-label-main-icon\"\r\n          iconName=\"chevron-down\"\r\n          width=\"17\"\r\n          height=\"auto\"\r\n          strokeWidth=\"2.5\">\r\n  </p-icon>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "LabelSubComponent",
            "id": "component-LabelSubComponent-7b0f5227aa28c83dd32c0d644440c81c",
            "file": "projects/design-system-lib/src/lib/labels/label-sub/label-sub.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-label-sub",
            "styleUrls": [
                "./label-sub.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./label-sub.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "type",
                    "line": 12,
                    "type": "LabelTypesEnum"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {LabelTypesEnum} from '../label-types.enum';\r\n\r\n@Component({\r\n  selector: 'p-label-sub',\r\n  templateUrl: './label-sub.component.html',\r\n  styleUrls: ['./label-sub.component.scss'],\r\n})\r\nexport class LabelSubComponent {\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string; // required if there is no label\r\n  @Input() type: LabelTypesEnum;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n.p-label-small {\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  &-text {\r\n    font-family: $font-family-basic;\r\n    font-weight: 600;\r\n    font-size: $tiny-font-size;\r\n    color: $primary-a-900;\r\n    margin-left: 4px;\r\n  }\r\n\r\n  &-indicator {\r\n    width: 6px;\r\n    height: 16px;\r\n    border-radius: 6px;\r\n\r\n    &-critical {\r\n      background-color: $supportive-alert-700;\r\n    }\r\n\r\n    &-danger {\r\n      background-color: $supportive-alert-500;\r\n    }\r\n\r\n    &-success {\r\n      background-color: $supportive-success-400;\r\n    }\r\n\r\n    &-medium {\r\n      background-color: $supportive-medium-400;\r\n    }\r\n\r\n    &-low {\r\n      background-color: $supportive-low-300;\r\n    }\r\n\r\n    &-lightGray {\r\n      background-color: $gray-scale-400;\r\n    }\r\n\r\n    &-darkGray {\r\n      background-color: $gray-scale-800;\r\n    }\r\n\r\n    &-dev1 {\r\n      background-color: $dev-a-100;\r\n    }\r\n\r\n    &-dev2 {\r\n      background-color: $dev-b-200;\r\n    }\r\n\r\n    &-dev3 {\r\n      background-color: $secondary-a-700;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./label-sub.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-label-small\">\r\n  <span class=\"p-label-small-indicator\"\r\n        [ngClass]=\"'p-label-small-indicator-' + type\"\r\n        attr.aria-label=\"{{ariaLabel}}\"></span>\r\n  <span class=\"p-label-small-text\">{{label}}</span>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "MastheadComponent",
            "id": "component-MastheadComponent-fb99f176c97dc4b683a1c94640e8dbf4",
            "file": "projects/design-system-lib/src/lib/masthead/masthead.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-masthead",
            "styleUrls": [
                "./masthead.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./masthead.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "entity",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {ButtonTypeEnum} from '../button/button-type.enum';\r\n\r\n@Component({\r\n  selector: 'p-masthead',\r\n  templateUrl: './masthead.component.html',\r\n  styleUrls: ['./masthead.component.scss'],\r\n})\r\nexport class MastheadComponent {\r\n  @Input() entity: any;\r\n  public buttonType = ButtonTypeEnum;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n.p-entity-header {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &-back {\r\n    margin-right: 2px;\r\n    ::ng-deep .p-btn-isIcon {\r\n      padding: 4px 2px;\r\n    }\r\n    &:hover {\r\n      background-color: $primary-c-50;\r\n    }\r\n  }\r\n\r\n  &-icon {\r\n\r\n  }\r\n\r\n  &-title {\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 1 1;\r\n    margin-left: $gap-small;\r\n  }\r\n\r\n  &-input {\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 1 1;\r\n    &:before {\r\n      content: '';\r\n      display: block;\r\n      width: 2px;\r\n      height: 14px;\r\n      margin-left: $gap-double;\r\n      margin-right: $gap-base;\r\n      border-right: 2px solid currentColor;\r\n    }\r\n  }\r\n\r\n  &-text {\r\n    letter-spacing: 0;\r\n    text-transform: none;\r\n    margin-left: 12px;\r\n  }\r\n\r\n\r\n}\r\n",
                    "styleUrl": "./masthead.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "masthead\r\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-6abf863e545cba46f5eefd0616a670e6",
            "file": "projects/design-system-lib/src/lib/menu/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-menu",
            "styleUrls": [
                "./menu-base.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filterAriaLabel",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "filterPlaceholder",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "footerBtnFirst",
                    "line": 26,
                    "type": "IMenuButton"
                },
                {
                    "name": "footerBtnLast",
                    "line": 27,
                    "type": "IMenuButton"
                },
                {
                    "name": "headerBtnFirst",
                    "line": 24,
                    "type": "IMenuButton"
                },
                {
                    "name": "headerBtnLast",
                    "line": 25,
                    "type": "ICheckbox"
                },
                {
                    "name": "menuList",
                    "line": 21,
                    "type": "any[]"
                },
                {
                    "name": "menuTriggerName",
                    "line": 20,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filteredList",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formFieldControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuTrigger",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menuTrigger'"
                        }
                    ]
                },
                {
                    "name": "selectedList",
                    "defaultValue": "[]",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "selectedShown",
                    "defaultValue": "[]",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sub",
                    "type": "SubscriptionLike",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "alterList",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "onOptionSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCanceled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "selectCompleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {SubscriptionLike} from 'rxjs';\r\nimport {MatMenuTrigger} from '@angular/material/menu';\r\nimport {IMenuButton} from '../menu-button.interface';\r\nimport {ICheckbox} from '../../checkbox/checkbox.interface';\r\n\r\n@Component({\r\n  selector: 'p-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu-base.component.scss'],\r\n})\r\nexport class MenuComponent implements OnInit, OnDestroy {\r\n  @Input() menuTriggerName: string;\r\n  @Input() menuList: any[];\r\n  @Input() filterPlaceholder: string; // if there is a search and buttons\r\n  @Input() filterAriaLabel: string;\r\n  @Input() headerBtnFirst: IMenuButton;\r\n  @Input() headerBtnLast: ICheckbox;\r\n  @Input() footerBtnFirst: IMenuButton;\r\n  @Input() footerBtnLast: IMenuButton;\r\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;\r\n  private selectedList: any[] = [];\r\n  public selectedShown: any[] = [];\r\n  public filteredList: any[];\r\n  public formFieldControl: FormControl;\r\n  private sub: SubscriptionLike;\r\n\r\n  ngOnInit(): void {\r\n    this.filteredList = this.menuList;\r\n    if (this.filterPlaceholder) {\r\n      this.formFieldControl = new FormControl('');\r\n      this.sub = this.formFieldControl.valueChanges.subscribe((value: string) => {\r\n        this.alterList(value);\r\n      });\r\n    }\r\n    if (!this.filterAriaLabel && this.filterPlaceholder) {\r\n      this.filterAriaLabel = this.filterPlaceholder;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.filterPlaceholder && this.sub) {\r\n      this.sub.unsubscribe();\r\n      this.sub = null;\r\n    }\r\n  }\r\n\r\n  alterList(value: string): void {\r\n    this.filteredList = this.menuList.filter( item => item.name.toLowerCase().indexOf(value.toLowerCase()) > -1);\r\n  }\r\n\r\n  onOptionSelected(item): void {\r\n    this.selectedList.push(item);\r\n  }\r\n\r\n  selectCompleted(): void {\r\n    this.selectedShown = this.selectedList;\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  selectCanceled(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n$menu-padding: $gap-base;\r\n$menu-background: $gray-scale-1;\r\n$menu-footer-height: $btn-small-height + $menu-padding * 4;\r\n$menu-min-width: 230px;\r\n$menu-max-height: 75vh;\r\n$menu-body-min-height: 103px;\r\n\r\n%btn-line {\r\n  width: 100%;\r\n  height: 100%;\r\n  padding-right: $menu-padding;\r\n  padding-left: $menu-padding;\r\n}\r\n\r\n::ng-deep .p-menu.mat-menu-panel {\r\n  min-width: $menu-min-width;\r\n  max-height: $menu-max-height;\r\n  background-color: $menu-background;\r\n  border-radius: 0;\r\n  box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1),\r\n  0 2px 6px rgba(0, 0, 0, 0.04),\r\n  0 -3px 6px rgba(0, 0, 0, 0.04);\r\n  overflow: hidden;\r\n  .mat-menu-content {\r\n    height: 100%;\r\n    padding: 0;\r\n    position: relative;\r\n  }\r\n}\r\n\r\n\r\n.p-menu {\r\n  &-container {\r\n    height: 100%;\r\n  }\r\n  &-footer {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: $menu-footer-height;\r\n    padding: $menu-padding * 2;\r\n    background-color: $menu-background;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 1;\r\n    &-btn {\r\n      & + & {\r\n        margin-left: $menu-padding;\r\n      }\r\n    }\r\n  }\r\n  &-empty {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n    padding-right: $menu-padding;\r\n    padding-bottom: $menu-padding;\r\n    &-state {\r\n      &:before {\r\n        content: '';\r\n        display: block;\r\n        height: 30px;\r\n        margin-bottom: 7px;\r\n        background-image: url('../../assets/images/no-data.svg');\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        background-size: contain;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n::ng-deep .p-menu-trigger {\r\n  &,\r\n  & input {\r\n    cursor: pointer;\r\n  }\r\n}\r\n",
                    "styleUrl": "./menu-base.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<button [matMenuTriggerFor]=\"menu\"\r\n        #menuTrigger=\"matMenuTrigger\"\r\n        class=\"p-btn p-btn-small p-btn-tertiary\">\r\n   <ng-template [ngIf]=\"!selectedShown?.length\" [ngIfElse]=\"selectedItems\">\r\n    {{menuTriggerName}}\r\n  </ng-template>\r\n\r\n  <ng-template #selectedItems>\r\n    <ng-container *ngFor=\"let item of selectedShown\">\r\n      <span class=\"p-menu-trigger-result\">{{item.name}}</span>\r\n    </ng-container>\r\n  </ng-template>\r\n</button>\r\n\r\n<!--menu window-->\r\n<mat-menu #menu=\"matMenu\" class=\"p-menu\" [overlapTrigger]=\"false\">\r\n  <div class=\"p-menu-container\" (click)=\"$event.stopPropagation()\"\r\n                                (keydown)=\"$event.stopPropagation()\">\r\n    <div class=\"p-menu-header\" *ngIf=\"filterPlaceholder\"\r\n          [class.extended]=\"headerBtnFirst && headerBtnLast\">\r\n      <mat-form-field class=\"p-menu-form-field\"\r\n                      appearance=\"outline\"\r\n                      floatLabel=\"always\">\r\n        <input matInput\r\n               type=\"text\"\r\n               [placeholder]=\"filterPlaceholder\"\r\n               attr.aria-label=\"{{filterAriaLabel}}\"\r\n               [formControl]=\"formFieldControl\"\r\n               autocomplete=\"off\"\r\n               onfocus=\"this.select()\"\r\n               class=\"p-menu-input\">\r\n      </mat-form-field>\r\n\r\n      <p-button *ngIf=\"headerBtnFirst\"\r\n                class=\"p-menu-btn-line\"\r\n                [label]=\"headerBtnFirst.label\"\r\n                [iconBefore]=\"headerBtnFirst.icon.iconName\"\r\n                [iconBeforeWidth]=\"headerBtnFirst.icon.width\"\r\n                [iconBeforeHeight]=\"headerBtnFirst.icon.height\"\r\n                [buttonType]=\"headerBtnFirst.buttonType\"\r\n                [disabled]=\"headerBtnFirst.disabled\"></p-button>\r\n      <p-checkbox *ngIf=\"headerBtnFirst\"\r\n                  class=\"p-menu-btn-line\"\r\n                  [label]=\"headerBtnLast.label\"\r\n                  [checked]=\"headerBtnLast.checked\"\r\n                  [disabled]=\"headerBtnLast.disabled\"></p-checkbox>\r\n    </div>\r\n\r\n    <div class=\"p-menu-body\">\r\n      <mat-selection-list class=\"p-menu-body-container\">\r\n        <mat-list-option class=\"p-menu-multiple-item\"\r\n                         *ngFor=\"let item of filteredList\"\r\n                         [disableRipple]=\"true\"\r\n                         [disabled]=\"item.disabled\"\r\n                         [selected]=\"item.selected\"\r\n                         (click)=\"onOptionSelected(item)\">\r\n          {{item.name}}\r\n        </mat-list-option>\r\n      </mat-selection-list>\r\n    </div>\r\n\r\n    <div class=\"p-menu-footer\">\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnFirst.label\"\r\n                [buttonType]=\"footerBtnFirst.buttonType\"\r\n                (click)=\"selectCompleted()\"></p-button>\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnLast.label\"\r\n                [buttonType]=\"footerBtnLast.buttonType\"\r\n                (click)=\"selectCanceled()\"></p-button>\r\n    </div>\r\n  </div>\r\n</mat-menu>\r\n"
        },
        {
            "name": "MenuFreeTextComponent",
            "id": "component-MenuFreeTextComponent-6c4922bfbba5b0c56719495c3d300aa3",
            "file": "projects/design-system-lib/src/lib/menu/menu-free-text/menu-free-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-menu-free-text",
            "styleUrls": [
                "./menu-free-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-free-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "footerBtnFirst",
                    "line": 23,
                    "type": "IMenuButton"
                },
                {
                    "name": "footerBtnLast",
                    "line": 24,
                    "type": "IMenuButton"
                },
                {
                    "name": "menuList",
                    "line": 22,
                    "type": "IMenuFreeTextItem[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isInputShown",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuTrigger",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menuTrigger'"
                        }
                    ]
                },
                {
                    "name": "selectedItem",
                    "type": "IMenuFreeTextItem",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "findSelectedItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "selectCanceled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "selectCompleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "setSelectedItem",
                    "args": [
                        {
                            "name": "newSelectedItem",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "newSelectedItem",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input, OnInit,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {MatMenuTrigger} from '@angular/material/menu';\r\nimport {IMenuButton} from '../menu-button.interface';\r\nimport {ButtonTypeEnum} from '../../button/button-type.enum';\r\n\r\ninterface IMenuFreeTextItem {\r\n  name: string;\r\n  inputValue?: string;\r\n  selected?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'p-menu-free-text',\r\n  templateUrl: './menu-free-text.component.html',\r\n  styleUrls: ['./menu-free-text.component.scss'],\r\n})\r\nexport class MenuFreeTextComponent implements OnInit{\r\n  @Input() menuList: IMenuFreeTextItem[];\r\n  @Input() footerBtnFirst: IMenuButton;\r\n  @Input() footerBtnLast: IMenuButton;\r\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;\r\n  public selectedItem: IMenuFreeTextItem;\r\n  public isInputShown: boolean;\r\n  public buttonType = ButtonTypeEnum;\r\n\r\n  ngOnInit(): void {\r\n    this.findSelectedItem();\r\n  }\r\n\r\n  selectCompleted(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  openMenu(): void {\r\n    this.menuTrigger.openMenu();\r\n  }\r\n\r\n  selectCanceled(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  findSelectedItem(): void {\r\n    this.selectedItem = this.menuList.find( item => item.selected );\r\n    this.isInputShown = this.selectedItem.hasOwnProperty('inputValue');\r\n  }\r\n\r\n  setSelectedItem(newSelectedItem): void {\r\n    this.selectedItem.selected = false;\r\n    newSelectedItem.selected = true;\r\n    this.findSelectedItem();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../menu/menu-base.component\";\r\n\r\n$menu-footer-height: $btn-small-height + $menu-padding * 3;\r\n$menu-width: 250px;\r\n\r\n// mat-menu-panel\r\n::ng-deep .p-menu.p-menu-text {\r\n  //panel\r\n  &.mat-menu-panel {\r\n    width: $menu-width;\r\n  }\r\n\r\n  .p-menu-body {\r\n    padding: $menu-padding $menu-padding 0 $menu-padding;\r\n  }\r\n\r\n  .p-menu-footer {\r\n    padding: $menu-padding $menu-padding * 2 $menu-padding * 2 $menu-padding * 2;\r\n    position: static;\r\n  }\r\n  // every option\r\n  .p-btn {\r\n    font-weight: 600;\r\n    padding-right: $menu-padding;\r\n    padding-left: $menu-padding;\r\n  }\r\n\r\n  .p-btn-icon-after .p-btn-label {\r\n    margin-right: 4px;\r\n  }\r\n\r\n  .p-input-outline {\r\n    margin-top: $menu-padding;\r\n    margin-bottom: $menu-padding * 2;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./menu-free-text.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"p-menu-trigger\"\r\n     [matMenuTriggerFor]=\"menu\"\r\n     #menuTrigger=\"matMenuTrigger\">\r\n  <ng-content></ng-content>\r\n</div>\r\n\r\n<!--menu window-->\r\n<mat-menu #menu=\"matMenu\" class=\"p-menu p-menu-text\" [overlapTrigger]=\"false\">\r\n  <div class=\"p-menu-container\" (click)=\"$event.stopPropagation()\"\r\n                                (keydown)=\"$event.stopPropagation()\">\r\n    <div class=\"p-menu-body\">\r\n      <p-menu-single-select class=\"p-menu-submenu\"\r\n                            [menuList]=\"menuList\"\r\n                            (onClickTask)=\"setSelectedItem($event)\">\r\n        <!--ng-content-->\r\n        <p-button iconAfter=\"chevron-down\"\r\n                  iconAfterWidth=\"17\"\r\n                  iconAfterHeight=\"17\"\r\n                  iconAfterStrokeWidth=\"2\"\r\n                  [label]=\"selectedItem?.name\"\r\n                  [buttonType]=\"buttonType.Tertiary\" ></p-button>\r\n        <!-- -->\r\n      </p-menu-single-select>\r\n      <p-input-outline *ngIf=\"isInputShown\"\r\n                       class=\"p-menu-text-input\"\r\n                       ariaLabel=\"Free text\"\r\n                       placeholder=\"Type here\"\r\n                       [value]=\"inputValue\">\r\n      </p-input-outline>\r\n    </div>\r\n    <div class=\"p-menu-footer\">\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnFirst.label\"\r\n                [buttonType]=\"footerBtnFirst.buttonType\"\r\n                (click)=\"selectCompleted()\"></p-button>\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnLast.label\"\r\n                [buttonType]=\"footerBtnLast.buttonType\"\r\n                (click)=\"selectCanceled()\"></p-button>\r\n    </div>\r\n  </div>\r\n</mat-menu>\r\n"
        },
        {
            "name": "MenuMultiSelectComponent",
            "id": "component-MenuMultiSelectComponent-7b30da633b72e8ff19660335c1c515a9",
            "file": "projects/design-system-lib/src/lib/menu/menu-multi-select/menu-multi-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-menu-multi-select",
            "styleUrls": [
                "./menu-multi-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-multi-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filterAriaLabel",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "filterPlaceholder",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "footerBtnFirst",
                    "line": 25,
                    "type": "IMenuButton"
                },
                {
                    "name": "footerBtnLast",
                    "line": 26,
                    "type": "IMenuButton"
                },
                {
                    "name": "headerBtnFirst",
                    "line": 23,
                    "type": "IMenuButton"
                },
                {
                    "name": "headerBtnLast",
                    "line": 24,
                    "type": "ICheckbox"
                },
                {
                    "name": "menuList",
                    "line": 20,
                    "type": "any[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelectCompleted",
                    "defaultValue": "new EventEmitter()",
                    "line": 27,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredList",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formFieldControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuTrigger",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menuTrigger'"
                        }
                    ]
                },
                {
                    "name": "selectedList",
                    "defaultValue": "[]",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sub",
                    "type": "SubscriptionLike",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "alterList",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onOptionSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCanceled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "selectCompleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component, EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit, Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {SubscriptionLike} from 'rxjs';\r\nimport {MatMenuTrigger} from '@angular/material/menu';\r\nimport {IMenuButton} from '../menu-button.interface';\r\nimport {ICheckbox} from '../../checkbox/checkbox.interface';\r\n\r\n@Component({\r\n  selector: 'p-menu-multi-select',\r\n  templateUrl: './menu-multi-select.component.html',\r\n  styleUrls: ['./menu-multi-select.component.scss'],\r\n})\r\nexport class MenuMultiSelectComponent implements OnInit, OnDestroy {\r\n  @Input() menuList: any[];\r\n  @Input() filterPlaceholder: string; // if there is a search and buttons\r\n  @Input() filterAriaLabel: string;\r\n  @Input() headerBtnFirst: IMenuButton;\r\n  @Input() headerBtnLast: ICheckbox;\r\n  @Input() footerBtnFirst: IMenuButton;\r\n  @Input() footerBtnLast: IMenuButton;\r\n  @Output() onSelectCompleted: EventEmitter<any> = new EventEmitter();\r\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;\r\n  public filteredList: any[];\r\n  public formFieldControl: FormControl;\r\n  private sub: SubscriptionLike;\r\n  private selectedList: any[] = [];\r\n\r\n  ngOnInit(): void {\r\n    this.filteredList = this.menuList;\r\n    if (this.filterPlaceholder) {\r\n      this.formFieldControl = new FormControl('');\r\n      this.sub = this.formFieldControl.valueChanges.subscribe((value: string) => {\r\n        this.alterList(value);\r\n      });\r\n    }\r\n    if (!this.filterAriaLabel && this.filterPlaceholder) {\r\n      this.filterAriaLabel = this.filterPlaceholder;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.filterPlaceholder && this.sub) {\r\n      this.sub.unsubscribe();\r\n      this.sub = null;\r\n    }\r\n  }\r\n\r\n  alterList(value: string): void {\r\n    this.filteredList = this.menuList.filter( item => item.name.toLowerCase().indexOf(value.toLowerCase()) > -1);\r\n  }\r\n\r\n  onOptionSelected(item): void {\r\n    this.selectedList.push(item);\r\n    console.log(this.selectedList);\r\n  }\r\n\r\n  selectCompleted(): void {\r\n    this.onSelectCompleted.emit(this.selectedList);\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  selectCanceled(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../menu/menu-base.component\";\r\n\r\n$menu-item-height: 32px;\r\n$menu-item-margin-top: $gap-small;\r\n$input-text-height: 32px;\r\n$input-text-padding: $menu-padding;\r\n$menu-header-height: $input-text-height + $menu-padding * 3 + 1px;\r\n$menu-header-extended-height: $input-text-height + ($menu-padding * 4.5) + ($menu-item-height * 2) + 1px;\r\n$menu-header-half-extended-height: $input-text-height + ($menu-padding * 4) + $menu-item-height + 1px;\r\n\r\n::ng-deep .p-menu-multiple-item.mat-list-option.mat-list-item {\r\n  font-family: $font-family-basic;\r\n  font-size: $small-font-size;\r\n  color: $primary-a-900;\r\n  height: $menu-item-height;\r\n  line-height: $menu-item-height;\r\n  padding: 0 $menu-padding;\r\n  & + & {\r\n    margin-top: $menu-item-margin-top;\r\n  }\r\n  &:hover,\r\n  &.cdk-focused {\r\n    background-color: $primary-c-50;\r\n    .mat-pseudo-checkbox:not(.mat-pseudo-checkbox-checked) {\r\n      border-color: $secondary-a-700;\r\n    }\r\n  }\r\n  &[disabled] {\r\n    color: $gray-scale-600;\r\n  }\r\n  .mat-list-item-content.mat-list-item-content-reverse {\r\n    flex-direction: row;\r\n    padding: 0;\r\n    .mat-list-text {\r\n      display: inline;\r\n      padding-left: $menu-padding;\r\n      padding-right: 0;\r\n      @include ellipsis;\r\n    }\r\n  }\r\n\r\n  .mat-pseudo-checkbox:not(.mat-pseudo-checkbox-checked) {\r\n    border: 1px solid $gray-scale-400;\r\n    background-color: $gray-scale-1;\r\n  }\r\n\r\n  // checked\r\n  .mat-pseudo-checkbox-checked {\r\n    background-color: $secondary-a-700;\r\n    &:after {\r\n      width: 7px;\r\n      height: 2px;\r\n      top: 3.4px;\r\n      left: 1.5px;\r\n    }\r\n  }\r\n\r\n  // disabled\r\n  &.mat-list-item-disabled {\r\n    background-color: transparent;\r\n    .mat-pseudo-checkbox:not(.mat-pseudo-checkbox-checked) {\r\n      background-color: $primary-c-50;\r\n      border-color: $gray-scale-400;\r\n    }\r\n    .mat-pseudo-checkbox-checked {\r\n      background-color: $secondary-a-200;\r\n    }\r\n    .mat-list-text {\r\n      color: $gray-scale-600;\r\n    }\r\n  }\r\n}\r\n\r\n// results on the trigger\r\n.p-menu-trigger-result {\r\n  & + & {\r\n    margin-left: 5px;\r\n  }\r\n  &:not(:last-child):after {\r\n    content: ',';\r\n    display: inline;\r\n  }\r\n}\r\n\r\n.p-menu {\r\n  &-header {\r\n    width: 100%;\r\n    padding: $menu-padding;\r\n    background-color: $menu-background;\r\n    border-bottom: 1px solid $gray-scale-400;\r\n    position: absolute;\r\n    z-index: 1;\r\n\r\n    .p-menu-form-field + .p-menu-btn-line {\r\n      margin-top: $menu-padding;\r\n    }\r\n    .p-menu-btn-line + .p-menu-btn-line {\r\n      margin-top: 4px;\r\n    }\r\n  }\r\n\r\n  &-body {\r\n    height: calc(100% - #{$menu-footer-height});\r\n    min-height: $menu-body-min-height;\r\n    padding-top: $menu-padding;\r\n    padding-right: 0;\r\n    padding-bottom: 0;\r\n    padding-left: $menu-padding;\r\n    // no buttons after input\r\n    .p-menu-header:not(.extended):not(.half-extended) + & {\r\n      min-height: $menu-header-height + $menu-body-min-height;\r\n      padding-top: $menu-header-height;\r\n    }\r\n    // there are 2 buttons after input\r\n    .p-menu-header.extended + & {\r\n      min-height: $menu-header-extended-height + $menu-body-min-height;\r\n      padding-top: $menu-header-extended-height;\r\n    }\r\n    // there are 1 button after input\r\n    .p-menu-header.half-extended + & {\r\n      min-height: $menu-header-half-extended-height + $menu-body-min-height;\r\n      padding-top: $menu-header-half-extended-height;\r\n    }\r\n\r\n    &-container {\r\n      height: 100%;\r\n      padding-top: 0;\r\n      padding-right: $menu-padding;\r\n      overflow: auto;\r\n    }\r\n  }\r\n\r\n  &-btn-line {\r\n    display: block;\r\n    width: 100%;\r\n    height: $menu-item-height;\r\n    ::ng-deep .p-btn {\r\n      @extend %btn-line;\r\n      justify-content: flex-start;\r\n    }\r\n    ::ng-deep .p-btn-icon-before {\r\n      .p-btn-label {\r\n        margin-left: $menu-padding;\r\n      }\r\n    }\r\n    ::ng-deep .p-checkbox {\r\n      display: inline-flex;\r\n      align-items: center;\r\n      @extend %btn-line;\r\n      &:not(.mat-checkbox-disabled):hover {\r\n        background-color: $primary-c-50;\r\n      }\r\n      .mat-checkbox-label {\r\n        font-weight: 500;\r\n      }\r\n    }\r\n    .p-menu-input + & {\r\n      margin-top: $menu-padding;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./menu-multi-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"p-menu-trigger\"\r\n     [matMenuTriggerFor]=\"menu\"\r\n     #menuTrigger=\"matMenuTrigger\">\r\n  <ng-content></ng-content>\r\n</div>\r\n\r\n<!--menu window-->\r\n<mat-menu #menu=\"matMenu\" class=\"p-menu p-menu-multiple\" [overlapTrigger]=\"false\">\r\n  <div class=\"p-menu-container\" (click)=\"$event.stopPropagation()\"\r\n                                          (keydown)=\"$event.stopPropagation()\">\r\n    <div class=\"p-menu-header\" *ngIf=\"filterPlaceholder\"\r\n         [ngClass]=\"{'extended' : headerBtnFirst && headerBtnLast, 'half-extended' : headerBtnFirst && !headerBtnLast}\">\r\n      <p-input-outline class=\"p-menu-input\"\r\n                       [ariaLabel]=\"filterAriaLabel\"\r\n                       [placeholder]=\"filterPlaceholder\"\r\n                       [isSearch]=\"true\"\r\n                       (onSearch)=\"alterList($event)\">\r\n      </p-input-outline>\r\n      <p-button *ngIf=\"headerBtnFirst\"\r\n                class=\"p-menu-btn-line\"\r\n                [label]=\"headerBtnFirst.label\"\r\n                [iconBefore]=\"headerBtnFirst.icon.iconName\"\r\n                [iconBeforeWidth]=\"headerBtnFirst.icon.width\"\r\n                [iconBeforeHeight]=\"headerBtnFirst.icon.height\"\r\n                [buttonType]=\"headerBtnFirst.buttonType\"\r\n                [disabled]=\"!filteredList.length\"></p-button>\r\n      <p-checkbox *ngIf=\"headerBtnLast\"\r\n                  class=\"p-menu-btn-line\"\r\n                  [label]=\"headerBtnLast.label\"\r\n                  [checked]=\"headerBtnLast.checked\"\r\n                  [disabled]=\"!filteredList.length\"></p-checkbox>\r\n    </div>\r\n\r\n    <div class=\"p-menu-body\">\r\n      <ng-template [ngIf]=\"filteredList.length\" [ngIfElse]=\"emptyState\">\r\n        <mat-selection-list class=\"p-menu-body-container\">\r\n          <mat-list-option class=\"p-menu-multiple-item\"\r\n                           *ngFor=\"let item of filteredList\"\r\n                           [disableRipple]=\"true\"\r\n                           [disabled]=\"item.disabled\"\r\n                           [selected]=\"item.selected\"\r\n                           (click)=\"onOptionSelected(item)\">\r\n            {{item.name}}\r\n          </mat-list-option>\r\n        </mat-selection-list>\r\n      </ng-template>\r\n\r\n      <ng-template #emptyState>\r\n        <div class=\"p-menu-empty\">\r\n          <p class=\"p-menu-empty-state paragraph-1-default\">\r\n            No data found\r\n          </p>\r\n        </div>\r\n      </ng-template>\r\n\r\n    </div>\r\n\r\n    <div class=\"p-menu-footer\">\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnFirst.label\"\r\n                [buttonType]=\"footerBtnFirst.buttonType\"\r\n                (click)=\"selectCompleted()\"></p-button>\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnLast.label\"\r\n                [buttonType]=\"footerBtnLast.buttonType\"\r\n                (click)=\"selectCanceled()\"></p-button>\r\n    </div>\r\n  </div>\r\n</mat-menu>\r\n"
        },
        {
            "name": "MenuRadioGroupComponent",
            "id": "component-MenuRadioGroupComponent-9076f8795e80ac1bc7708b15d113445e",
            "file": "projects/design-system-lib/src/lib/menu/menu-radio-group/menu-radio-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-menu-radio-group",
            "styleUrls": [
                "./menu-radio-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-radio-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "footerBtnFirst",
                    "line": 27,
                    "type": "IMenuButton"
                },
                {
                    "name": "footerBtnLast",
                    "line": 28,
                    "type": "IMenuButton"
                },
                {
                    "name": "menuList",
                    "line": 26,
                    "type": "IMenuRadioOption[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inputNumericSize",
                    "defaultValue": "InputNumericSizeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuTrigger",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menuTrigger'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "findMenuTriggerName",
                    "args": [
                        {
                            "name": "menuList",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "menuList",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "selectCanceled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "selectCompleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {MatMenuTrigger} from '@angular/material/menu';\r\nimport {IMenuButton} from '../menu-button.interface';\r\nimport {IRadioButton} from '../../radio-button/radio-button.interface';\r\nimport {InputNumericSizeEnum} from '../../input/numeric/input-numeric-size.enum';\r\nimport {IDatepicker} from '../../input/datepicker/datepicker.interface';\r\nimport {ButtonTypeEnum} from '../../button/button-type.enum';\r\n\r\ninterface IMenuRadioOption extends IRadioButton {\r\n  numericInputValue?: number;\r\n  menuList?: any[];\r\n  dateStart?: IDatepicker;\r\n  dateEnd?: IDatepicker;\r\n}\r\n\r\n@Component({\r\n  selector: 'p-menu-radio-group',\r\n  templateUrl: './menu-radio-group.component.html',\r\n  styleUrls: ['./menu-radio-group.component.scss'],\r\n})\r\nexport class MenuRadioGroupComponent {\r\n  @Input() menuList: IMenuRadioOption[];\r\n  @Input() footerBtnFirst: IMenuButton;\r\n  @Input() footerBtnLast: IMenuButton;\r\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;\r\n  public inputNumericSize = InputNumericSizeEnum;\r\n  public buttonType = ButtonTypeEnum;\r\n\r\n  findMenuTriggerName(menuList): void {\r\n    return menuList.find( item => item.selected === true).name;\r\n  }\r\n\r\n  openMenu(): void {\r\n    this.menuTrigger.openMenu();\r\n  }\r\n\r\n  selectCompleted(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  selectCanceled(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../menu/menu-base.component\";\r\n\r\n$menu-item-height: 36px;\r\n$menu-min-width: 480px;\r\n$menu-radio-padding: 24px;\r\n\r\n// mat-menu-panel\r\n::ng-deep .p-menu.p-menu-radio.mat-menu-panel {\r\n  min-width: $menu-min-width;\r\n}\r\n\r\n.p-menu {\r\n  &-body {\r\n    @include resetUl;\r\n    padding-top: $gap-double;\r\n    padding-right: $menu-radio-padding - $menu-padding;\r\n    padding-left: $menu-radio-padding - $menu-padding;\r\n  }\r\n  &-footer {\r\n    padding-right: $menu-radio-padding;\r\n    padding-left: $menu-radio-padding;\r\n  }\r\n}\r\n\r\n// every option\r\n.p-menu-option {\r\n  display: flex;\r\n  align-items: center;\r\n  height: $menu-item-height;\r\n  padding-left: $menu-padding;\r\n  &:hover {\r\n    background-color: $primary-c-50;\r\n    ::ng-deep .mat-radio-outer-circle {\r\n      border-color: $secondary-a-700;\r\n    }\r\n    ::ng-deep .p-btn-icon-post {\r\n      opacity: 1;\r\n    }\r\n  }\r\n  ::ng-deep .mat-radio-label {\r\n    padding-bottom: 2px;\r\n  }\r\n  &-input {\r\n    margin-left: 29px;\r\n    ::ng-deep .p-input-numeric-container {\r\n      padding-top: 8px;\r\n    }\r\n  }\r\n  &-submenu {\r\n    ::ng-deep .p-btn {\r\n      color: $secondary-a-700;\r\n      min-width: unset;\r\n      padding-left: 5px;\r\n      padding-right: 5px;\r\n      background-color: transparent;\r\n      &:focus {\r\n        .p-btn-icon-post {\r\n          opacity: 1;\r\n        }\r\n      }\r\n    }\r\n    ::ng-deep .p-btn-label {\r\n      margin-right: 3px;\r\n    }\r\n    ::ng-deep .p-btn-icon-post {\r\n      opacity: 0;\r\n      transition: opacity 280ms;\r\n    }\r\n  }\r\n  &-dates {\r\n    display: inline-block;\r\n    ::ng-deep .p-datepicker {\r\n      width: 124px;\r\n    }\r\n  }\r\n  &-datepicker {\r\n    margin-left: 16px;\r\n    ::ng-deep .mat-form-field-wrapper {\r\n      padding-top: 8px;\r\n    }\r\n  }\r\n  &-dates-ampersand {\r\n    margin-left: 16px;\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./menu-radio-group.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-menu-trigger\"\r\n     [matMenuTriggerFor]=\"menu\"\r\n     #menuTrigger=\"matMenuTrigger\">\r\n  <ng-content></ng-content>\r\n</div>\r\n\r\n<!--menu window-->\r\n<mat-menu #menu=\"matMenu\" class=\"p-menu p-menu-radio\" [overlapTrigger]=\"false\">\r\n  <div class=\"p-menu-container\" (click)=\"$event.stopPropagation()\"\r\n                                (keydown)=\"$event.stopPropagation()\">\r\n    <ul class=\"p-menu-body\">\r\n      <li class=\"p-menu-option\" *ngFor=\"let option of menuList\">\r\n        <p-radio-button class=\"p-menu-option-radio\"\r\n                        [value]=\"option\"\r\n                        [label]=\"option.label\"\r\n                        [checked]=\"option.checked\"\r\n                        [disabled]=\"option.disabled\">\r\n        </p-radio-button>\r\n\r\n        <p-input-numeric *ngIf=\"option.numericInputValue\"\r\n                          class=\"p-menu-option-input\"\r\n                          [size]=\"inputNumericSize.Small\"\r\n                          [value]=\"option.numericInputValue\">\r\n        </p-input-numeric>\r\n\r\n        <div class=\"p-menu-option-link\" *ngIf=\"option.menuList\">\r\n          <p-menu-single-select class=\"p-menu-option-submenu\"\r\n                                [menuList]=\"option.menuList\">\r\n            <!--ng-content-->\r\n            <p-button iconAfter=\"chevron-down\"\r\n                      iconAfterWidth=\"17\"\r\n                      iconAfterHeight=\"17\"\r\n                      [label]=\"findMenuTriggerName(option.menuList)\"\r\n                      [buttonType]=\"buttonType.Tertiary\" ></p-button>\r\n            <!-- -->\r\n          </p-menu-single-select>\r\n        </div>\r\n\r\n        <div class=\"p-menu-option-dates\" *ngIf=\"option.dateStart && option.dateEnd\">\r\n          <p-datepicker class=\"p-menu-option-datepicker start\"\r\n                        [ariaLabel]=\"option.dateStart.ariaLabel\"\r\n                        [placeholder]=\"option.dateStart.placeholder\"\r\n                        [disabled]=\"option.dateStart.disabled\"\r\n                        [value]=\"option.dateStart.value\">\r\n          </p-datepicker>\r\n          <span class=\"p-menu-option-dates-ampersand paragraph-2-default\">and</span>\r\n          <p-datepicker class=\"p-menu-option-datepicker end\"\r\n                        [ariaLabel]=\"option.dateEnd.ariaLabel\"\r\n                        [placeholder]=\"option.dateEnd.placeholder\"\r\n                        [disabled]=\"option.dateEnd.disabled\"\r\n                        [value]=\"option.dateEnd.value\">\r\n          </p-datepicker>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n    <div class=\"p-menu-footer\">\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnFirst.label\"\r\n                [buttonType]=\"footerBtnFirst.buttonType\"\r\n                (click)=\"selectCompleted()\"></p-button>\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnLast.label\"\r\n                [buttonType]=\"footerBtnLast.buttonType\"\r\n                (click)=\"selectCanceled()\"></p-button>\r\n    </div>\r\n  </div>\r\n</mat-menu>\r\n"
        },
        {
            "name": "MenuRangeComponent",
            "id": "component-MenuRangeComponent-59121f67258bf4d19a52c4e9d3bd67fe",
            "file": "projects/design-system-lib/src/lib/menu/menu-range/menu-range.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-menu-range",
            "styleUrls": [
                "./menu-range.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-range.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "footerBtnFirst",
                    "line": 20,
                    "type": "IMenuButton"
                },
                {
                    "name": "footerBtnLast",
                    "line": 21,
                    "type": "IMenuButton"
                },
                {
                    "name": "inputMax",
                    "line": 19,
                    "type": "IInputNumeric"
                },
                {
                    "name": "inputMin",
                    "line": 18,
                    "type": "IInputNumeric"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputNumericSize",
                    "defaultValue": "InputNumericSizeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuTrigger",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menuTrigger'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "selectCanceled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "selectCompleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {MatMenuTrigger} from '@angular/material/menu';\r\nimport {IMenuButton} from '../menu-button.interface';\r\nimport {InputNumericSizeEnum} from '../../input/numeric/input-numeric-size.enum';\r\nimport {IInputNumeric} from '../../input/numeric/input-numeric.interface';\r\n\r\n\r\n@Component({\r\n  selector: 'p-menu-range',\r\n  templateUrl: './menu-range.component.html',\r\n  styleUrls: ['./menu-range.component.scss'],\r\n})\r\nexport class MenuRangeComponent {\r\n  @Input() inputMin: IInputNumeric;\r\n  @Input() inputMax: IInputNumeric;\r\n  @Input() footerBtnFirst: IMenuButton;\r\n  @Input() footerBtnLast: IMenuButton;\r\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger\r\n  public inputNumericSize = InputNumericSizeEnum;\r\n\r\n  openMenu(): void {\r\n    this.menuTrigger.openMenu();\r\n  }\r\n\r\n  selectCompleted(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  selectCanceled(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../menu/menu-base.component\";\r\n\r\n$menu-footer-height: $btn-small-height + $menu-padding * 3;\r\n$menu-width: 230px;\r\n\r\n// mat-menu-panel\r\n::ng-deep .p-menu.p-menu-range {\r\n  //panel\r\n  &.mat-menu-panel {\r\n    width: $menu-width;\r\n  }\r\n\r\n  .p-menu-body {\r\n    padding: $menu-padding * 2;\r\n  }\r\n\r\n  .p-menu-footer {\r\n    padding: 0 $menu-padding * 2 $menu-padding * 2 $menu-padding * 2;\r\n    position: static;\r\n  }\r\n  // every option\r\n  .p-menu-range-max .p-input-numeric-container {\r\n    margin-top: 12px;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./menu-range.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-menu-trigger\"\r\n     [matMenuTriggerFor]=\"menu\"\r\n     #menuTrigger=\"matMenuTrigger\">\r\n  <ng-content></ng-content>\r\n</div>\r\n\r\n<!--menu window-->\r\n<mat-menu #menu=\"matMenu\" class=\"p-menu p-menu-range\" [overlapTrigger]=\"false\">\r\n  <div class=\"p-menu-container\" (click)=\"$event.stopPropagation()\"\r\n                                (keydown)=\"$event.stopPropagation()\">\r\n    <div class=\"p-menu-body\">\r\n      <p-input-numeric class=\"p-menu-range-min\"\r\n                       [label]=\"inputMin.label\"\r\n                       [value]=\"inputMin.value\"\r\n                       [disabled]=\"inputMin.disabled\"\r\n                       [readonly]=\"inputMin.readonly\"\r\n                       [size]=\"inputNumericSize.Small\"></p-input-numeric>\r\n      <p-input-numeric class=\"p-menu-range-max\"\r\n                       [label]=\"inputMax.label\"\r\n                       [value]=\"inputMax.value\"\r\n                       [disabled]=\"inputMax.disabled\"\r\n                       [readonly]=\"inputMax.readonly\"\r\n                       [size]=\"inputNumericSize.Small\"></p-input-numeric>\r\n    </div>\r\n    <div class=\"p-menu-footer\">\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnFirst.label\"\r\n                [buttonType]=\"footerBtnFirst.buttonType\"\r\n                (click)=\"selectCompleted()\"></p-button>\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnLast.label\"\r\n                [buttonType]=\"footerBtnLast.buttonType\"\r\n                (click)=\"selectCanceled()\"></p-button>\r\n    </div>\r\n  </div>\r\n</mat-menu>\r\n"
        },
        {
            "name": "MenuSingleSelectComponent",
            "id": "component-MenuSingleSelectComponent-c34c1285536752a91ba81321ca03215e",
            "file": "projects/design-system-lib/src/lib/menu/menu-single-select/menu-single-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-menu-single-select",
            "styleUrls": [
                "./menu-single-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-single-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonFirst",
                    "line": 17,
                    "type": "IMenuButton"
                },
                {
                    "name": "buttonLast",
                    "line": 18,
                    "type": "IMenuButton"
                },
                {
                    "name": "filterAriaLabel",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "filterPlaceholder",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "groupTitle",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "menuList",
                    "line": 13,
                    "type": "any[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredList",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formFieldControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuTrigger",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menuTrigger'"
                        }
                    ]
                },
                {
                    "name": "sub",
                    "type": "SubscriptionLike",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "alterList",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onSelectedItem",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCompleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {SubscriptionLike} from 'rxjs';\r\nimport {IMenuButton} from '../menu-button.interface';\r\nimport {MatMenuTrigger} from '@angular/material/menu';\r\n\r\n@Component({\r\n  selector: 'p-menu-single-select',\r\n  templateUrl: './menu-single-select.component.html',\r\n  styleUrls: ['./menu-single-select.component.scss'],\r\n})\r\nexport class MenuSingleSelectComponent implements OnInit, OnDestroy {\r\n  @Input() menuList: any[];\r\n  @Input() groupTitle: boolean = false; // true if there is a group title\r\n  @Input() filterPlaceholder: string; // if there is a search and buttons\r\n  @Input() filterAriaLabel: string;\r\n  @Input() buttonFirst: IMenuButton;\r\n  @Input() buttonLast: IMenuButton;\r\n  @Output() onClickTask: EventEmitter<any> = new EventEmitter();\r\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;\r\n  public filteredList: any[];\r\n  public formFieldControl: FormControl;\r\n  private sub: SubscriptionLike;\r\n\r\n  ngOnInit(): void {\r\n    this.filteredList = this.menuList;\r\n    if (this.filterPlaceholder) {\r\n      this.formFieldControl = new FormControl('');\r\n      this.sub = this.formFieldControl.valueChanges.subscribe((value: string) => {\r\n        this.alterList(value);\r\n      });\r\n    }\r\n    if (!this.filterAriaLabel && this.filterPlaceholder) {\r\n      this.filterAriaLabel = this.filterPlaceholder;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.filterPlaceholder && this.sub) {\r\n      this.sub.unsubscribe();\r\n      this.sub = null;\r\n    }\r\n  }\r\n\r\n  alterList(value: string): void {\r\n    this.filteredList = [];\r\n    this.menuList.forEach(group => {\r\n      const filteredGroup = group.names.filter( name => name.name.toLowerCase().indexOf(value.toLowerCase()) > -1);\r\n      if (filteredGroup.length > 0) {\r\n        this.filteredList.push(Object.assign({}, group, group.names = filteredGroup));\r\n      }\r\n    });\r\n  }\r\n\r\n  selectCompleted(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  onSelectedItem($event, item): void {\r\n    console.log(item);\r\n    this.onClickTask.emit(item);\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../menu/menu-base.component\";\r\n\r\n$menu-item-height: 32px;\r\n$menu-item-margin-top: $gap-small;\r\n$input-text-height: 32px;\r\n$input-text-padding: $menu-padding;\r\n$menu-header-height: $input-text-height + $menu-padding + $menu-padding;\r\n$menu-footer-height: $menu-padding * 2 + $menu-item-height * 2 + 1px;\r\n\r\n%menu-item {\r\n  font-family: $font-family-basic;\r\n  color: $primary-a-900;\r\n  height: $menu-item-height;\r\n  line-height: $menu-item-height;\r\n  padding: 0 $menu-padding;\r\n  @include ellipsis;\r\n  & + & {\r\n    margin-top: $menu-item-margin-top;\r\n  }\r\n}\r\n\r\n::ng-deep .p-menu-single.mat-menu-panel {\r\n   .mat-menu-item {\r\n    @extend %menu-item;\r\n    font-size: $small-font-size;\r\n    &:hover,\r\n    &.cdk-focused {\r\n      background-color: $primary-c-50;\r\n    }\r\n    &[disabled] {\r\n      color: $gray-scale-600;\r\n    }\r\n    &.p-menu-item-selected {\r\n      background-color: $secondary-a-100;\r\n    }\r\n  }\r\n}\r\n\r\n.p-menu-group-title {\r\n  @extend %menu-item;\r\n  font-size: $tiny-font-size;\r\n  font-weight: 700;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.p-menu {\r\n  &-header {\r\n    width: 100%;\r\n    padding: $menu-padding;\r\n    background-color: $menu-background;\r\n    position: absolute;\r\n    z-index: 1;\r\n  }\r\n\r\n  &-body {\r\n    height: 100%;\r\n    padding-top: $menu-padding;\r\n    padding-right: 0;\r\n    padding-bottom: $menu-padding;\r\n    padding-left: $menu-padding;\r\n    .p-menu-header + & {\r\n      height: calc(100% - #{$menu-footer-height});\r\n      min-height: $menu-header-height + $menu-body-min-height;\r\n      padding-top: $menu-header-height;\r\n      padding-bottom: 0;\r\n    }\r\n\r\n    &-container {\r\n      height: 100%;\r\n      padding-right: $menu-padding;\r\n      overflow: auto;\r\n    }\r\n  }\r\n\r\n  &-footer {\r\n    display: block;\r\n    width: 100%;\r\n    height: auto;\r\n    padding-top: $menu-padding;\r\n    padding-right: $menu-padding;\r\n    padding-bottom: $menu-padding;\r\n    padding-left: $menu-padding;\r\n    border-top: 1px solid $gray-scale-400;\r\n  }\r\n\r\n  &-btn-line {\r\n    display: block;\r\n    width: 100%;\r\n    height: $menu-item-height;\r\n    ::ng-deep .p-btn {\r\n      width: 100%;\r\n      height: 100%;\r\n      justify-content: flex-start;\r\n    }\r\n    ::ng-deep .p-btn-icon-before {\r\n      padding-left: $menu-padding;\r\n      .p-btn-label {\r\n        margin-left: $menu-padding;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./menu-single-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"p-menu-trigger\"\r\n     [matMenuTriggerFor]=\"menu\"\r\n     #menuTrigger=\"matMenuTrigger\">\r\n  <ng-content></ng-content>\r\n</div>\r\n\r\n<!--menu-single-select window-->\r\n<mat-menu #menu=\"matMenu\" class=\"p-menu p-menu-single\" [overlapTrigger]=\"false\">\r\n  <div class=\"p-menu-container\" (click)=\"$event.stopPropagation()\"\r\n                                (keydown)=\"$event.stopPropagation()\">\r\n    <div class=\"p-menu-header\" *ngIf=\"filterPlaceholder\">\r\n      <p-input-outline class=\"p-menu-input\"\r\n                    [ariaLabel]=\"filterAriaLabel\"\r\n                    [placeholder]=\"filterPlaceholder\"\r\n                    [isSearch]=\"true\"\r\n                    (onSearch)=\"alterList($event)\">\r\n      </p-input-outline>\r\n    </div>\r\n\r\n    <div class=\"p-menu-body\">\r\n      <ng-template [ngIf]=\"filteredList.length\" [ngIfElse]=\"emptyState\">\r\n        <div class=\"p-menu-body-container\">\r\n          <!--groupTitle === true-->\r\n          <ng-template [ngIf]=\"groupTitle\" [ngIfElse]=\"noGroupTitle\">\r\n            <ng-container *ngFor=\"let group of filteredList\">\r\n              <h6 class=\"p-menu-group-title\">{{group.letter}}</h6>\r\n              <ng-container [ngTemplateOutlet]=\"menuLine\"\r\n                            [ngTemplateOutletContext] =\"{itemsList: group.names}\"></ng-container>\r\n            </ng-container>\r\n          </ng-template>\r\n\r\n          <!--groupTitle === false-->\r\n          <ng-template #noGroupTitle>\r\n            <ng-container [ngTemplateOutlet]=\"menuLine\"\r\n                          [ngTemplateOutletContext] =\"{itemsList: menuList}\"></ng-container>\r\n          </ng-template>\r\n        </div>\r\n      </ng-template>\r\n\r\n      <ng-template #emptyState>\r\n        <div class=\"p-menu-empty\">\r\n          <p class=\"p-menu-empty-state paragraph-1-default\">\r\n            No data found\r\n          </p>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n\r\n    <div class=\"p-menu-footer\" *ngIf=\"filterPlaceholder\">\r\n      <p-button class=\"p-menu-btn-line\"\r\n                [label]=\"buttonFirst.label\"\r\n                [iconBefore]=\"buttonFirst.icon.iconName\"\r\n                [iconBeforeWidth]=\"buttonFirst.icon.width\"\r\n                [iconBeforeHeight]=\"buttonFirst.icon.height\"\r\n                [buttonType]=\"buttonFirst.buttonType\"></p-button>\r\n      <p-button class=\"p-menu-btn-line\"\r\n                [label]=\"buttonLast.label\"\r\n                [iconBefore]=\"buttonLast.icon.iconName\"\r\n                [iconBeforeWidth]=\"buttonLast.icon.width\"\r\n                [iconBeforeHeight]=\"buttonLast.icon.height\"\r\n                [buttonType]=\"buttonLast.buttonType\"></p-button>\r\n    </div>\r\n  </div>\r\n</mat-menu>\r\n\r\n\r\n\r\n<!--menu-single-select line template-->\r\n<ng-template #menuLine let-itemsList=\"itemsList\">\r\n  <button *ngFor=\"let item of itemsList\"\r\n          mat-menu-item\r\n          [class.p-menu-item-selected]=\"item.selected\"\r\n          [disabled]=\"item.disabled\"\r\n          (click)=\"onSelectedItem($event, item)\">\r\n    {{item.name}}\r\n  </button>\r\n</ng-template>\r\n"
        },
        {
            "name": "MenuTabsComponent",
            "id": "component-MenuTabsComponent-7325e0f317dccb6f2c0bf9afc251e33d",
            "file": "projects/design-system-lib/src/lib/menu/menu-tabs/menu-tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-menu-tabs",
            "styleUrls": [
                "./menu-tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu-tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkboxList",
                    "line": 29,
                    "type": "literal type[]"
                },
                {
                    "name": "filterAriaLabel",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "filterPlaceholder",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "footerBtnFirst",
                    "line": 27,
                    "type": "IMenuButton"
                },
                {
                    "name": "footerBtnLast",
                    "line": 28,
                    "type": "IMenuButton"
                },
                {
                    "name": "headerBtnFirst",
                    "line": 25,
                    "type": "IMenuButton"
                },
                {
                    "name": "headerBtnLast",
                    "line": 26,
                    "type": "ICheckbox"
                },
                {
                    "name": "menuList",
                    "line": 22,
                    "type": "any[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 33,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "customControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filteredList",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inputNumericSize",
                    "defaultValue": "InputNumericSizeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menuTrigger",
                    "type": "MatMenuTrigger",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menuTrigger'"
                        }
                    ]
                },
                {
                    "name": "selectedList",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sub",
                    "type": "SubscriptionLike",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "tabRelativeName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tabSpecificName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "alterList",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "onOptionSelected",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "selectCanceled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "selectCompleted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component, EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit, Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport {FormControl} from '@angular/forms';\r\nimport {SubscriptionLike} from 'rxjs';\r\nimport {MatMenuTrigger} from '@angular/material/menu';\r\nimport {IMenuButton} from '../menu-button.interface';\r\nimport {ICheckbox} from '../../checkbox/checkbox.interface';\r\nimport {IInputNumeric} from '../../input/numeric/input-numeric.interface';\r\nimport {InputNumericSizeEnum} from '../../input/numeric/input-numeric-size.enum';\r\n\r\n@Component({\r\n  selector: 'p-menu-tabs',\r\n  templateUrl: './menu-tabs.component.html',\r\n  styleUrls: ['./menu-tabs.component.scss'],\r\n})\r\nexport class MenuTabsComponent implements OnInit, OnDestroy {\r\n  @Input() menuList: any[];\r\n  @Input() filterPlaceholder: string; // if there is a search and buttons\r\n  @Input() filterAriaLabel: string;\r\n  @Input() headerBtnFirst: IMenuButton;\r\n  @Input() headerBtnLast: ICheckbox;\r\n  @Input() footerBtnFirst: IMenuButton;\r\n  @Input() footerBtnLast: IMenuButton;\r\n  @Input() checkboxList: {\r\n    checkbox: ICheckbox,\r\n    inputNum?: IInputNumeric\r\n  }[];\r\n  @Output() onClickTask: EventEmitter<any> = new EventEmitter();\r\n  @ViewChild('menuTrigger') menuTrigger: MatMenuTrigger;\r\n  public filteredList: any[];\r\n  public customControl: FormControl;\r\n  private sub: SubscriptionLike;\r\n  public tabSpecificName: string;\r\n  public tabRelativeName: string;\r\n  public inputNumericSize = InputNumericSizeEnum;\r\n  private selectedList: any[];\r\n\r\n  ngOnInit(): void {\r\n    this.filteredList = this.menuList;\r\n    if (this.filterPlaceholder) {\r\n      this.customControl = new FormControl('');\r\n      this.sub = this.customControl.valueChanges.subscribe((value: string) => {\r\n        this.alterList(value);\r\n      });\r\n    }\r\n    if (!this.filterAriaLabel && this.filterPlaceholder) {\r\n      this.filterAriaLabel = this.filterPlaceholder;\r\n    }\r\n    this.tabSpecificName = 'Specific';\r\n    this.tabRelativeName = 'Relative';\r\n    this.selectedList = [];\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.filterPlaceholder && this.sub) {\r\n      this.sub.unsubscribe();\r\n      this.sub = null;\r\n    }\r\n  }\r\n\r\n  alterList(value: string): void {\r\n    this.filteredList = this.menuList.filter( item => item.name.toLowerCase().indexOf(value.toLowerCase()) > -1);\r\n  }\r\n\r\n  onOptionSelected(item): void {\r\n    this.selectedList.push(item);\r\n  }\r\n\r\n  openMenu(): void {\r\n    this.menuTrigger.openMenu();\r\n  }\r\n\r\n  selectCompleted(): void {\r\n    this.onClickTask.emit(this.selectedList);\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n\r\n  selectCanceled(): void {\r\n    this.menuTrigger.closeMenu();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../menu/menu-base.component\";\r\n\r\n$menu-item-height: 32px;\r\n$menu-item-margin-top: 4px;\r\n$input-text-height: 32px;\r\n$input-text-padding: 8px;\r\n$tabs-width: 84px;\r\n$tabs-height: 28px;\r\n$tabs-header-height: 60px;\r\n$menu-header-height: $input-text-height + $menu-padding * 4 + 1px;\r\n$menu-header-extended-height: $input-text-height + ($menu-padding * 4.5) + ($menu-item-height * 2) + 1px;\r\n$menu-min-width: 250px;\r\n\r\n%menu-item {\r\n  font-family: $font-family-basic;\r\n  font-size: $small-font-size;\r\n  color: $primary-a-900;\r\n  height: $menu-item-height;\r\n  line-height: $menu-item-height;\r\n  padding: 0 8px;\r\n  & + & {\r\n    margin-top: $menu-item-margin-top;\r\n  }\r\n  &:hover,\r\n  &.cdk-focused {\r\n    background-color: $primary-c-50;\r\n  }\r\n  &[disabled] {\r\n    color: $gray-scale-600;\r\n  }\r\n}\r\n\r\n::ng-deep .p-menu.p-menu-tabs.mat-menu-panel {\r\n    min-width: $menu-min-width;\r\n}\r\n\r\n::ng-deep .p-menu-multiple-item.mat-list-option.mat-list-item {\r\n  @extend %menu-item;\r\n  .mat-list-item-content.mat-list-item-content-reverse {\r\n    flex-direction: row;\r\n    padding: 0;\r\n    .mat-list-text {\r\n      display: inline;\r\n      padding-left: 8px;\r\n      padding-right: 0;\r\n      @include ellipsis;\r\n    }\r\n  }\r\n\r\n  .mat-pseudo-checkbox:not(.mat-pseudo-checkbox-checked) {\r\n    border: 1px solid $gray-scale-400;\r\n    background-color: $gray-scale-1;\r\n  }\r\n\r\n  // checked\r\n  .mat-pseudo-checkbox-checked {\r\n    background-color: $secondary-a-700;\r\n    &:after {\r\n      width: 7px;\r\n      height: 2px;\r\n      top: 3.4px;\r\n      left: 1.5px;\r\n    }\r\n  }\r\n\r\n  // disabled\r\n  &.mat-list-item-disabled {\r\n    background-color: transparent;\r\n    .mat-pseudo-checkbox:not(.mat-pseudo-checkbox-checked) {\r\n      background-color: $primary-c-50;\r\n      border-color: $gray-scale-400;\r\n    }\r\n    .mat-pseudo-checkbox-checked {\r\n      background-color: $secondary-a-200;\r\n    }\r\n    .mat-list-text {\r\n      color: $gray-scale-600;\r\n    }\r\n  }\r\n}\r\n\r\n// results on the trigger\r\n.p-menu-trigger-result {\r\n  & + & {\r\n    margin-left: 5px;\r\n  }\r\n  &:not(:last-child):after {\r\n    content: ',';\r\n    display: inline;\r\n  }\r\n}\r\n\r\n.p-menu {\r\n  &-header {\r\n    width: 100%;\r\n    padding: $menu-padding;\r\n    background-color: $menu-background;\r\n    border-bottom: 1px solid $gray-scale-400;\r\n    position: absolute;\r\n    z-index: 1;\r\n\r\n    .p-menu-form-field + .p-menu-btn-line {\r\n      margin-top: $menu-padding;\r\n    }\r\n    .p-menu-btn-line + .p-menu-btn-line {\r\n      margin-top: 4px;\r\n    }\r\n  }\r\n\r\n  &-body {\r\n    height: 100%;\r\n    min-height: $menu-body-min-height;\r\n    padding-top: $menu-padding;\r\n    padding-right: 0;\r\n    padding-bottom: 0;\r\n    padding-left: $menu-padding;\r\n    // there are buttons after input\r\n    .p-menu-header.extended + & {\r\n      min-height: $menu-header-extended-height + $menu-body-min-height;\r\n      padding-top: $menu-header-extended-height;\r\n    }\r\n\r\n    &-container {\r\n      height: 100%;\r\n      padding-top: 0;\r\n      padding-right: $menu-padding;\r\n      overflow: auto;\r\n    }\r\n  }\r\n\r\n  &-footer {\r\n    align-items: center;\r\n    width: 100%;\r\n    padding-top: $menu-padding * 2;\r\n    padding-bottom: $menu-padding * 2;\r\n  }\r\n\r\n  &-btn-line {\r\n    display: block;\r\n    width: 100%;\r\n    height: $menu-item-height;\r\n    ::ng-deep .p-btn {\r\n      @extend %btn-line;\r\n      justify-content: flex-start;\r\n    }\r\n    ::ng-deep .p-btn-icon-before {\r\n      .p-btn-label {\r\n        margin-left: $menu-padding;\r\n      }\r\n    }\r\n    ::ng-deep .p-checkbox {\r\n      display: inline-flex;\r\n      align-items: center;\r\n      @extend %btn-line;\r\n      &:not(.mat-checkbox-disabled):hover {\r\n        background-color: $primary-c-50;\r\n      }\r\n      .mat-checkbox-label {\r\n        font-weight: 500;\r\n      }\r\n    }\r\n    .p-menu-input + & {\r\n      margin-top: $menu-padding;\r\n    }\r\n  }\r\n}\r\n\r\n// tabs\r\n::ng-deep .p-menu-tab-group {\r\n  max-height: $menu-max-height;\r\n  height: calc(100% - #{$menu-footer-height});\r\n  .mat-tab-list {\r\n    width: 100%;\r\n    height: $tabs-header-height;\r\n  }\r\n  .mat-tab-header {\r\n    border-color: $gray-scale-400;\r\n  }\r\n  .mat-tab-labels {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n  }\r\n  .mat-tab-label {\r\n    font-family: $font-family-basic;\r\n    font-size: $small-font-size;\r\n    font-weight: 400;\r\n    width: $tabs-width;\r\n    height: $tabs-height;\r\n    min-width: unset;\r\n    padding: 0;\r\n    opacity: 1;\r\n    transition: all 400ms;\r\n    &-active {\r\n      color: $gray-scale-1;\r\n      background-color: $secondary-a-700;\r\n      //&:hover ,\r\n      //&:focus {\r\n      //  background-color: $secondary-a-800;\r\n      //}\r\n      &:disabled {\r\n        color: $gray-scale-600;\r\n        background-color: $secondary-a-100;\r\n        border: 1px solid $gray-scale-400;\r\n      }\r\n    }\r\n    &:not(.mat-tab-label-active) {\r\n      color: $primary-a-900;\r\n      background-color: $gray-scale-1;\r\n      border: 1px solid $gray-scale-400;\r\n      &:hover,\r\n      &:focus {\r\n        border-color: $secondary-a-700;\r\n      }\r\n      &:disabled {\r\n        color: $gray-scale-600;\r\n        background-color: $primary-c-50;\r\n      }\r\n    }\r\n  }\r\n  .mat-ink-bar {\r\n    display: none;\r\n  }\r\n  .mat-tab-body-content {\r\n    overflow: hidden;\r\n  }\r\n  .p-menu-tabs-panel {\r\n    height: 100%;\r\n    &.relative {\r\n      padding-top: $menu-padding;\r\n      padding-left: $menu-padding;\r\n    }\r\n  }\r\n}\r\n\r\n// relative panel styles\r\n.p-menu-check {\r\n  &-list {\r\n    @include resetUl;\r\n    height: 100%;\r\n    padding-right: $menu-padding;\r\n    overflow: auto;\r\n  }\r\n  &-item {\r\n    display: flex;\r\n    align-items: center;\r\n    overflow: hidden;\r\n    @extend %menu-item;\r\n    ::ng-deep .p-checkbox {\r\n      display: inline-flex;\r\n    }\r\n  }\r\n  &-input {\r\n    margin-left: 20px;\r\n    margin-top: 7px;\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./menu-tabs.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"p-menu-trigger\"\r\n     [matMenuTriggerFor]=\"menu\"\r\n     #menuTrigger=\"matMenuTrigger\">\r\n  <ng-content></ng-content>\r\n</div>\r\n\r\n<!--menu window-->\r\n<mat-menu #menu=\"matMenu\" class=\"p-menu p-menu-tabs\" [overlapTrigger]=\"false\">\r\n  <div class=\"p-menu-container\" (click)=\"$event.stopPropagation()\"\r\n                                (keydown)=\"$event.stopPropagation()\">\r\n    <mat-tab-group mat-align-tabs=\"center\"\r\n                   [disablePagination]=\"true\"\r\n                   [disableRipple]=\"true\"\r\n                   class=\"p-menu-tab-group\">\r\n      <mat-tab [label]=\"tabSpecificName\">\r\n        <div class=\"p-menu-tabs-panel specific\">\r\n          <div class=\"p-menu-header\" *ngIf=\"filterPlaceholder\"\r\n               [class.extended]=\"headerBtnFirst && headerBtnLast\">\r\n            <p-input-outline class=\"p-menu-input\"\r\n                             [ariaLabel]=\"filterAriaLabel\"\r\n                             [placeholder]=\"filterPlaceholder\"\r\n                             [isSearch]=\"true\"\r\n                             (onSearch)=\"alterList($event)\">\r\n            </p-input-outline>\r\n\r\n            <p-button *ngIf=\"headerBtnFirst\"\r\n                      class=\"p-menu-btn-line\"\r\n                      [label]=\"headerBtnFirst.label\"\r\n                      [iconBefore]=\"headerBtnFirst.icon.iconName\"\r\n                      [iconBeforeWidth]=\"headerBtnFirst.icon.width\"\r\n                      [iconBeforeHeight]=\"headerBtnFirst.icon.height\"\r\n                      [buttonType]=\"headerBtnFirst.buttonType\"\r\n                      [disabled]=\"!filteredList.length\"></p-button>\r\n            <p-checkbox *ngIf=\"headerBtnFirst\"\r\n                        class=\"p-menu-btn-line\"\r\n                        [label]=\"headerBtnLast.label\"\r\n                        [checked]=\"headerBtnLast.checked\"\r\n                        [disabled]=\"!filteredList.length\"></p-checkbox>\r\n          </div>\r\n\r\n          <div class=\"p-menu-body\">\r\n            <ng-template [ngIf]=\"filteredList.length\" [ngIfElse]=\"emptyState\">\r\n              <mat-selection-list class=\"p-menu-body-container\">\r\n                <mat-list-option class=\"p-menu-multiple-item\"\r\n                                 *ngFor=\"let item of filteredList\"\r\n                                 [disableRipple]=\"true\"\r\n                                 [disabled]=\"item.disabled\"\r\n                                 [selected]=\"item.selected\"\r\n                                 (click)=\"onOptionSelected(item)\">\r\n                  {{item.name}}\r\n                </mat-list-option>\r\n              </mat-selection-list>\r\n            </ng-template>\r\n\r\n            <ng-template #emptyState>\r\n              <div class=\"p-menu-empty\">\r\n                <p class=\"p-menu-empty-state paragraph-1-default\">\r\n                  No data found\r\n                </p>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </mat-tab>\r\n      <mat-tab [label]=\"tabRelativeName\">\r\n        <div class=\"p-menu-tabs-panel relative\">\r\n          <ul class=\"p-menu-check-list\" *ngIf=\"checkboxList?.length\">\r\n            <li class=\"p-menu-check-item\" *ngFor=\"let checkLine of checkboxList\">\r\n              <p-checkbox class=\"p-menu-check-checkbox\"\r\n                          [label]=\"checkLine.checkbox.label\"\r\n                          [checked]=\"checkLine.checkbox.checked\"\r\n                          [disabled]=\"checkLine.checkbox.disabled\"></p-checkbox>\r\n              <p-input-numeric *ngIf=\"checkLine.inputNum\"\r\n                               class=\"p-menu-check-input\"\r\n                               [label]=\"checkLine.inputNum.label\"\r\n                               [value]=\"checkLine.inputNum.value\"\r\n                               [disabled]=\"checkLine.inputNum.disabled\"\r\n                               [readonly]=\"checkLine.inputNum.readonly\"\r\n                               [size]=\"inputNumericSize.Small\"\r\n                               [labelLast]=\"true\"></p-input-numeric>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n    <div class=\"p-menu-footer\">\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnFirst.label\"\r\n                [buttonType]=\"footerBtnFirst.buttonType\"\r\n                (click)=\"selectCompleted()\"></p-button>\r\n      <p-button class=\"p-menu-footer-btn\"\r\n                [label]=\"footerBtnLast.label\"\r\n                [buttonType]=\"footerBtnLast.buttonType\"\r\n                (click)=\"selectCanceled()\"></p-button>\r\n    </div>\r\n  </div>\r\n</mat-menu>\r\n\r\n<!--trigger build comment-->\r\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-fa664dd96d2d3dbc86e3109a0c4ed0e2",
            "file": "projects/design-system-lib/src/lib/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "IModalData",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<ModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Inject} from '@angular/core';\r\nimport {IModalData} from './modal.interface';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {ButtonTypeEnum} from '../button/button-type.enum';\r\n\r\n@Component({\r\n  selector: 'p-modal',\r\n  templateUrl: './modal.component.html',\r\n  styleUrls: ['./modal.component.scss'],\r\n})\r\n\r\nexport class ModalComponent {\r\n  public buttonType = ButtonTypeEnum;\r\n\r\n  constructor(public dialogRef: MatDialogRef<ModalComponent>,\r\n              @Inject(MAT_DIALOG_DATA) public data: IModalData){}\r\n\r\n  closeModal(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n$width-small: 640px;\r\n$width-medium: 840px;\r\n$width-large: 1040px;\r\n\r\n$max-height: 87vh;\r\n$header-height: 64px;\r\n$footer-height: 72px;\r\n$padding-left: $gap-double-plus;\r\n$padding-right: $gap-double;\r\n$content-text-max-width-small: 500px;\r\n$content-text-max-width-large: 600px;\r\n\r\n$fullScreen-top: 64px;\r\n$fullScreen-margin: 32px;\r\n$fullScreen-width: calc(100% - #{$fullScreen-margin} * 2);\r\n$fullScreen-height: calc(100% - #{$fullScreen-top} - #{$fullScreen-margin});\r\n\r\n\r\n::ng-deep .p-modal {\r\n  max-height: $max-height;\r\n  &-small {\r\n    width: $width-small;\r\n  }\r\n  &-medium {\r\n    width: $width-medium;\r\n  }\r\n  &-large {\r\n    width: $width-large;\r\n  }\r\n  &-fullScreen {\r\n    width: $fullScreen-width;\r\n    height: $fullScreen-height;\r\n    max-width: unset !important;\r\n    max-height: unset !important;\r\n    margin-top: $fullScreen-top;\r\n    margin-right: $fullScreen-margin;\r\n    margin-bottom: $fullScreen-margin;\r\n    margin-left: $fullScreen-margin;\r\n  }\r\n\r\n  ::ng-deep .mat-dialog-container {\r\n    display: block;\r\n    color: $primary-a-900;\r\n    padding: 0;\r\n    background: $gray-scale-1;\r\n    border-radius: 4px;\r\n    box-shadow: none;\r\n    position: relative;\r\n    overflow: visible;\r\n  }\r\n\r\n  &-close {\r\n    position: absolute;\r\n    top: -30px;\r\n    right: -4px;\r\n  }\r\n\r\n  &-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: stretch;\r\n    height: 100%;\r\n  }\r\n\r\n  &-header {\r\n    display: flex;\r\n    align-items: center;\r\n    height: $header-height;\r\n    padding-right: $padding-right;\r\n    padding-left: $padding-left;\r\n    @include ellipsis;\r\n    flex: 0 0 $header-height;\r\n    &-icon {\r\n      margin-right: $gap-double;\r\n    }\r\n  }\r\n\r\n  &-content {\r\n    max-height: calc(100% - 64px - 72px);\r\n    margin: 0;\r\n    padding-top: $gap-double-plus;\r\n    padding-right: $padding-right;\r\n    padding-bottom: $gap-double;\r\n    padding-left: $padding-left;\r\n    flex: 1 0 100%;\r\n    &-text {\r\n      ::ng-deep .p-modal-small &,\r\n      ::ng-deep .p-modal-medium & {\r\n        max-width: $content-text-max-width-small;\r\n      }\r\n      ::ng-deep .p-modal-large &,\r\n      ::ng-deep .p-modal-fullScreen & {\r\n        max-width: $content-text-max-width-large;\r\n      }\r\n    }\r\n    .p-modal-header + & {\r\n      padding-top: $gap-base;\r\n    }\r\n  }\r\n\r\n  &-footer {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    height: $footer-height;\r\n    padding-right: $padding-right;\r\n    padding-left: $padding-left;\r\n    flex: 0 0 $footer-height;\r\n    &-btn {\r\n      & + & {\r\n        margin-left: $gap-double;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n::ng-deep .cdk-overlay-dark-backdrop {\r\n  background: rgba(45, 48, 71, 0.8); // $primary-a-900;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ModalComponent>"
                    },
                    {
                        "name": "data",
                        "type": "IModalData"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ModalComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "IModalData",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p-button class=\"p-modal-close\"\r\n          ariaLabel=\"Close Modal\"\r\n          [buttonType]=\"buttonType.IsIcon\"\r\n          iconBefore=\"x\"\r\n          iconBeforeWidth=\"22\"\r\n          iconBeforeStrokeColor=\"#FEFEFF\"\r\n          [iconBeforeStrokeWidth]=\"2.5\"\r\n          (onClickTask)=\"closeModal()\"></p-button>\r\n\r\n<div class=\"p-modal-wrapper\">\r\n  <header class=\"p-modal-header\" *ngIf=\"data.headerText\">\r\n    <p-icon *ngIf=\"data.headerIcon?.iconName\"\r\n            class=\"p-modal-header-icon\"\r\n            [iconName]=\"data.headerIcon.iconName\"\r\n            [width]=\"data.headerIcon.width\"\r\n            [height]=\"data.headerIcon.height\"\r\n            [fill]=\"data.headerIcon.fill\"\r\n            [stroke]=\"data.headerIcon.stroke\"\r\n            [strokeWidth]=\"data.headerIcon.strokeWidth\"\r\n            [strokeLinecap]=\"data.headerIcon.strokeLinecap\"\r\n            [strokeLinejoin]=\"data.headerIcon.strokeLinejoin\"></p-icon>\r\n    <h2 class=\"p-modal-title headline-7-bold\">{{data.headerText}}</h2>\r\n  </header>\r\n\r\n  <mat-dialog-content class=\"p-modal-content\">\r\n    <p class=\"p-modal-content-text paragraph-1-default\">{{data.textParagraph}}</p>\r\n  </mat-dialog-content>\r\n\r\n  <footer class=\"p-modal-footer\">\r\n    <p-button *ngFor=\"let btn of data.actions\"\r\n              class=\"p-modal-footer-btn\"\r\n              [label]=\"btn.label\"\r\n              [large]=\"true\"\r\n              [buttonType]=\"btn.buttonType\"\r\n              (onClickTask)=\"closeModal()\"></p-button>\r\n  </footer>\r\n</div>\r\n\r\n"
        },
        {
            "name": "ModalTriggerComponent",
            "id": "component-ModalTriggerComponent-4f86c5ed61b29de2862c1bb9ab04bce3",
            "file": "src/stories/modal/modal-trigger.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "modal-trigger",
            "styleUrls": [
                "./modal-trigger.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-trigger.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 14,
                    "type": "IModalData"
                },
                {
                    "name": "panelClass",
                    "line": 16,
                    "type": "string | string[]"
                },
                {
                    "name": "triggerBtnName",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "type",
                    "line": 15,
                    "type": "ModalEnum"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {IModalData} from 'projects/design-system-lib/src/lib/modal/modal.interface';\r\nimport {ModalEnum} from 'projects/design-system-lib/src/lib/modal/modal.enum';\r\nimport {MatDialog} from '@angular/material/dialog';\r\nimport {ModalComponent} from 'projects/design-system-lib/src/lib/modal/modal.component';\r\nimport {ButtonTypeEnum} from '../../../projects/design-system-lib/src/lib/button/button-type.enum';\r\n\r\n@Component({\r\n  selector: 'modal-trigger',\r\n  templateUrl: './modal-trigger.component.html',\r\n  styleUrls: ['./modal-trigger.component.scss']\r\n})\r\nexport class ModalTriggerComponent {\r\n  @Input() data: IModalData;\r\n  @Input() type: ModalEnum; // required\r\n  @Input() panelClass: string | string[];\r\n  @Input() triggerBtnName: string;\r\n  public buttonType = ButtonTypeEnum;\r\n\r\n  constructor(public dialog: MatDialog) {}\r\n\r\n  openDialog(): void {\r\n    this.panelClass = ['p-modal', 'p-modal-' + this.type];\r\n    const dialogRef = this.dialog.open(ModalComponent, {\r\n      data: this.data,\r\n      panelClass: this.panelClass, // required\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed', result);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-trigger.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<p-button [label]=\"triggerBtnName\"\r\n          [buttonType]=\"buttonType.Secondary\"\r\n          (click)=\"openDialog()\">\r\n</p-button>\r\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-02543c0c90c2c642e0bce1ec65d0225c",
            "file": "projects/design-system-lib/src/lib/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-paginator",
            "styleUrls": [
                "./paginator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "line": 11
                },
                {
                    "name": "firstItemShown",
                    "line": 16,
                    "type": "number"
                },
                {
                    "name": "pageSize",
                    "defaultValue": "100",
                    "line": 14
                },
                {
                    "name": "pageSizeOptions",
                    "line": 13,
                    "type": "literal type[]"
                },
                {
                    "name": "totalItems",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "totalPages",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "totalSelected",
                    "line": 17,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "firstPageClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "lastPageClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "nextPageClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageNumberClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageSizeChanged",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 20,
                    "type": "EventEmitter"
                },
                {
                    "name": "prevPageClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "firstInList",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "inputNumericSize",
                    "defaultValue": "InputNumericSizeEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastInList",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "lessBtnDisabled",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "moreBtnDisabled",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pageList",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "step",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buildPagesList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "definePagesList",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        },
                        {
                            "name": "increasePageNumber",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "increasePageNumber",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\r\nimport {ButtonTypeEnum} from '../button/button-type.enum';\r\nimport {InputNumericSizeEnum} from '../input/numeric/input-numeric-size.enum';\r\n\r\n@Component({\r\n  selector: 'p-paginator',\r\n  templateUrl: './paginator.component.html',\r\n  styleUrls: ['./paginator.component.scss'],\r\n})\r\nexport class PaginatorComponent implements OnInit {\r\n  @Input() currentPage = 1; // based 1\r\n  @Input() totalPages: number;\r\n  @Input() pageSizeOptions?: { name: any }[];\r\n  @Input() pageSize = 100;\r\n  @Input() totalItems: number;\r\n  @Input() firstItemShown: number;\r\n  @Input() totalSelected: number;\r\n\r\n  @Output()\r\n  pageSizeChanged = new EventEmitter<number>();\r\n  @Output()\r\n  prevPageClicked = new EventEmitter();\r\n  @Output()\r\n  nextPageClicked = new EventEmitter();\r\n  @Output()\r\n  firstPageClicked = new EventEmitter();\r\n  @Output()\r\n  lastPageClicked = new EventEmitter();\r\n  @Output()\r\n  pageNumberClicked = new EventEmitter();\r\n  /*\r\n  @Output()\r\n  onPageNumberInput = new EventEmitter<number>();\r\n*/\r\n  public buttonType = ButtonTypeEnum;\r\n  public inputNumericSize = InputNumericSizeEnum;\r\n  public pageList: number[];\r\n  public step: number = 5;\r\n  private firstInList: number;\r\n  private lastInList: number;\r\n  public lessBtnDisabled: boolean = true;\r\n  public moreBtnDisabled: boolean = false;\r\n\r\n  ngOnInit(): void {\r\n    if (!this.pageSizeOptions) this.pageSizeOptions = [\r\n      {name: 25},\r\n      {name: 50},\r\n      {name: 100}\r\n    ];\r\n    this.firstInList = 1;\r\n    this.lastInList = this.firstInList + this.step - 1;\r\n    this.buildPagesList();\r\n  }\r\n\r\n  get canMoveToPrevious(): boolean {\r\n    return this.currentPage > 1;\r\n  }\r\n\r\n  get canMoveToNext(): boolean {\r\n    return this.currentPage < this.totalPages;\r\n  }\r\n\r\n  definePagesList($event: any, increasePageNumber: boolean): void {\r\n    this.moreBtnDisabled = false;\r\n    this.lessBtnDisabled = false;\r\n    if (increasePageNumber) {\r\n      this.firstInList += this.step;\r\n      this.lastInList += this.step;\r\n      if (this.lastInList >= this.totalPages) {\r\n        this.moreBtnDisabled = true;\r\n      }\r\n    }\r\n    else {\r\n      this.firstInList -= this.step;\r\n      this.lastInList -= this.step;\r\n      if (this.firstInList <= 1) {\r\n        this.firstInList = 1;\r\n        this.lastInList = this.firstInList + this.step - 1;\r\n        this.lessBtnDisabled = true;\r\n      }\r\n    }\r\n    this.buildPagesList();\r\n  }\r\n\r\n  buildPagesList(): void {\r\n    this.pageList = [];\r\n    for ( let i = this.firstInList; i <= this.lastInList; i++) {\r\n      this.pageList.push(i);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n$button-width: 24px;\r\n$button-height: 32px;\r\n\r\n%paginator-btn {\r\n  width: $button-width;\r\n  height: $button-height;\r\n  &:not(.disabled):hover{\r\n    background-color: $primary-c-50;\r\n  }\r\n}\r\n\r\n.p-paginator {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &-arrow {\r\n    ::ng-deep .p-btn {\r\n      @extend %paginator-btn;\r\n    }\r\n    & ~ & {\r\n      margin-left: $gap-base;\r\n    }\r\n  }\r\n\r\n  &-list {\r\n    display: flex;\r\n    align-items: center;\r\n    @include resetUl;\r\n  }\r\n\r\n  &-item {\r\n    margin-left: $gap-base;\r\n  }\r\n\r\n  &-page {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: block;\r\n    position: relative;\r\n\r\n    ::ng-deep .p-btn {\r\n      min-width: unset;\r\n      padding-right: 0;\r\n      padding-left: 0;\r\n      background-color: transparent;\r\n\r\n      @extend %paginator-btn;\r\n      &:not(:disabled) {\r\n        color: $primary-a-900;\r\n      }\r\n    }\r\n\r\n    &.selected:after {\r\n      content: 'Selected';\r\n      display: block;\r\n      font-size: 0;\r\n      width: $button-width;\r\n      height: 4px;\r\n      background-color: $primary-a-900;\r\n      position: absolute;\r\n      bottom: 0;\r\n    }\r\n  }\r\n\r\n  &-select {\r\n    margin-left: $gap-double;\r\n    margin-right: auto;\r\n    align-self: flex-end;\r\n  }\r\n\r\n  ::ng-deep .p-input-numeric .mat-form-field-infix {\r\n    padding-left: $gap-small;\r\n  }\r\n\r\n  &-items {\r\n    margin-left: $gap-double;\r\n  }\r\n\r\n  &-refresh {\r\n    margin-left: $gap-base;\r\n  }\r\n}\r\n",
                    "styleUrl": "./paginator.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "canMoveToPrevious": {
                    "name": "canMoveToPrevious",
                    "getSignature": {
                        "name": "canMoveToPrevious",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 55
                    }
                },
                "canMoveToNext": {
                    "name": "canMoveToNext",
                    "getSignature": {
                        "name": "canMoveToNext",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 59
                    }
                }
            },
            "templateData": "<div class=\"p-paginator\">\r\n  <p-button class=\"p-paginator-arrow first\"\r\n            [class.disabled]=\"!canMoveToPrevious\"\r\n            ariaLabel=\"Move to the first page\"\r\n            [disabled]=\"!canMoveToPrevious\"\r\n            iconBefore=\"first\"\r\n            iconBeforeWidth=\"10\"\r\n            iconBeforeHeight=\"10\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            (click)=\"firstPageClicked.emit()\"></p-button>\r\n  <p-button class=\"p-paginator-arrow prev\"\r\n            [class.disabled]=\"!canMoveToPrevious\"\r\n            ariaLabel=\"Move to the previous page\"\r\n            [disabled]=\"!canMoveToPrevious\"\r\n            iconBefore=\"chevron-left\"\r\n            iconBeforeWidth=\"17\"\r\n            iconBeforeStrokeWidth=\"2\"\r\n            [iconBeforeStrokeColor]=\"!canMoveToPrevious ? '#B3B3B3' : 'currentColor'\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            (click)=\"prevPageClicked.emit()\"></p-button>\r\n  <ul class=\"p-paginator-list\">\r\n    <li class=\"p-paginator-item\">\r\n      <p-button *ngIf=\"!lessBtnDisabled\"\r\n                class=\"p-paginator-page less\"\r\n                ariaLabel=\"Show other {{ step }} pages\"\r\n                iconBefore=\"more-horizontal\"\r\n                iconBeforeWidth=\"17\"\r\n                iconBeforeStrokeWidth=\"2\"\r\n                [iconBeforeStrokeColor]=\"!canMoveToNext ? '#B3B3B3' : 'currentColor'\"\r\n                [buttonType]=\"buttonType.IsIcon\"\r\n                (onClickTask)=\"definePagesList($event, false)\"></p-button>\r\n    </li>\r\n    <li class=\"p-paginator-item\" *ngFor=\"let pageNumber of pageList\">\r\n      <p-button class=\"p-paginator-page\"\r\n                [class.selected]=\"pageNumber === currentPage\"\r\n                [label]=\"pageNumber\"\r\n                [ariaLabel]=\"'Move to page ' + pageNumber\"\r\n                [buttonType]=\"buttonType.Tertiary\"\r\n                (click)=\"pageNumberClicked.emit()\"></p-button>\r\n    </li>\r\n    <li class=\"p-paginator-item\">\r\n      <p-button *ngIf=\"!moreBtnDisabled\"\r\n                class=\"p-paginator-page more\"\r\n                ariaLabel=\"Show other {{ step }} pages\"\r\n                iconBefore=\"more-horizontal\"\r\n                iconBeforeWidth=\"17\"\r\n                iconBeforeStrokeWidth=\"2\"\r\n                [buttonType]=\"buttonType.IsIcon\"\r\n                (onClickTask)=\"definePagesList($event, true)\"></p-button>\r\n    </li>\r\n  </ul>\r\n\r\n  <p-button class=\"p-paginator-arrow next\"\r\n            [class.disabled]=\"!canMoveToNext\"\r\n            ariaLabel=\"Move to the next page\"\r\n            [disabled]=\"!canMoveToNext\"\r\n            iconBefore=\"chevron-right\"\r\n            iconBeforeWidth=\"17\"\r\n            iconBeforeStrokeWidth=\"2\"\r\n            [iconBeforeStrokeColor]=\"!canMoveToNext ? '#B3B3B3' : 'currentColor'\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            (click)=\"nextPageClicked.emit()\"></p-button>\r\n  <p-button class=\"p-paginator-arrow last\"\r\n            [class.disabled]=\"!canMoveToNext\"\r\n            ariaLabel=\"Move to the last page\"\r\n            [disabled]=\"!canMoveToNext\"\r\n            iconBefore=\"last\"\r\n            iconBeforeWidth=\"10\"\r\n            iconBeforeHeight=\"10\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            (click)=\"lastPageClicked.emit()\"></p-button>\r\n\r\n  <p-menu-single-select class=\"p-paginator-select\"\r\n                        [menuList]=\"pageSizeOptions\"\r\n                        (onClickTask)=\"pageSizeChanged.emit($event)\">\r\n    <!--ng-content-->\r\n    <p-input-numeric class=\"p-paginator-input\"\r\n                     label=\"Items per page\"\r\n                     [value]=\"pageSize\"\r\n                     [size]=\"inputNumericSize.Small\"\r\n                     [labelLast]=\"true\"\r\n                     [notEditable]=\"true\"\r\n                     iconName=\"chevron-down\"></p-input-numeric>\r\n    <!-- -->\r\n  </p-menu-single-select>\r\n\r\n  <span class=\"p-paginator-counter paragraph-2-default\">\r\n    {{totalSelected}} selected\r\n  </span>\r\n\r\n  <span class=\"p-paginator-items paragraph-2-default\">\r\n    {{firstItemShown}}-{{firstItemShown + pageSize - 1}} of {{totalItems}} items\r\n  </span>\r\n\r\n  <p-button class=\"p-paginator-refresh\"\r\n            ariaLabel=\"Refresh\"\r\n            [buttonType]=\"buttonType.IsIcon\"\r\n            iconBefore=\"refresh-cw\"\r\n            iconBeforeStrokeColor=\"#4132C8\"\r\n            iconBeforeWidth=\"16\"\r\n            matTooltip=\"Refresh\"\r\n            matTooltipPosition=\"above\"\r\n            matTooltipClass=\"p-tooltip above\"></p-button>\r\n</div>\r\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-cc5a9e3738e48d09fe00323ed75290ac",
            "file": "projects/design-system-lib/src/lib/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "size",
                    "line": 11,
                    "type": "ProgressBarEnum"
                },
                {
                    "name": "value",
                    "line": 10,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progressBarSize",
                    "defaultValue": "ProgressBarEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {ProgressBarEnum} from './progress-bar.enum';\r\n\r\n@Component({\r\n  selector: 'p-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n})\r\nexport class ProgressBarComponent {\r\n  @Input() value: number;\r\n  @Input() size: ProgressBarEnum;\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string;\r\n  public progressBarSize = ProgressBarEnum;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n.p-progress-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n\r\n  &-label {\r\n    margin-right: $gap-base;\r\n  }\r\n\r\n  &-line {\r\n    height: 8px;\r\n    border-radius: 11px;\r\n    &.small {\r\n      width: 136px;\r\n    }\r\n    &.fullSize {\r\n      flex-basis: 100%;\r\n    }\r\n  }\r\n\r\n  &-description {\r\n    text-align: center;\r\n    font-weight: 500;\r\n    flex-basis: 100%;\r\n    margin-top: $gap-double;\r\n  }\r\n\r\n  ::ng-deep .mat-progress-bar-buffer {\r\n    background-color: $secondary-a-100;\r\n  }\r\n\r\n  ::ng-deep .mat-progress-bar-fill::after {\r\n    background-color: $secondary-a-700;\r\n  }\r\n}\r\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-progress-bar\">\r\n  <span *ngIf=\"label && size === progressBarSize.Small\"\r\n        class=\"p-progress-bar-label paragraph-2-default\">\r\n    {{label}}\r\n  </span>\r\n  <mat-progress-bar class=\"p-progress-bar-line\"\r\n                    [ngClass]=\"size\"\r\n                    attr.aria-label=\"{{label ? label : ariaLabel}}\"\r\n                    mode=\"determinate\"\r\n                    [value]=\"value\">\r\n  </mat-progress-bar>\r\n  <p *ngIf=\"label && size === progressBarSize.FullSize\"\r\n        class=\"p-progress-bar-description paragraph-1-default\">\r\n    {{label}}\r\n  </p>\r\n</div>\r\n\r\n"
        },
        {
            "name": "ProgressChartComponent",
            "id": "component-ProgressChartComponent-340422ef00f0a6f6d8f1ad1447625ba6",
            "file": "projects/design-system-lib/src/lib/progress-chart/progress-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-progress-chart",
            "styleUrls": [
                "./progress-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "isGeneralProgress",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "values",
                    "line": 10,
                    "type": "literal type[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progressChartEnum",
                    "defaultValue": "ProgressChartEnum",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {ProgressChartEnum} from './progress-chart.enum';\r\n\r\n@Component({\r\n  selector: 'p-progress-chart',\r\n  templateUrl: './progress-chart.component.html',\r\n  styleUrls: ['./progress-chart.component.scss'],\r\n})\r\nexport class ProgressChartComponent {\r\n  @Input() values: {\r\n    riskType: ProgressChartEnum,\r\n    value: number\r\n  }[];\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string;\r\n  @Input() isGeneralProgress: boolean;\r\n  public progressChartEnum = ProgressChartEnum;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n.p-progress-chart {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &-label {\r\n    margin-right: $gap-base;\r\n  }\r\n\r\n  &-line {\r\n    display: flex;\r\n    justify-content: stretch;\r\n    align-items: center;\r\n    width: 136px;\r\n    height: 8px;\r\n    border-radius: 11px;\r\n    overflow: hidden;\r\n    &.fullPalette {\r\n      background-color: $gray-scale-800;\r\n    }\r\n    &.booleanColors {\r\n      background-color: $secondary-a-100;\r\n    }\r\n  }\r\n\r\n  &-segment {\r\n    display: block;\r\n    height: 100%;\r\n    .fullPalette & {\r\n      &.success {\r\n        background-color: $supportive-success-400;\r\n      }\r\n      &.low {\r\n        background-color: $supportive-low-300;\r\n      }\r\n      &.orange {\r\n        background-color: $supportive-medium-400;\r\n      }\r\n      &.high {\r\n        background-color: $supportive-alert-500;\r\n      }\r\n      &.veryHigh {\r\n        background-color: $supportive-alert-700;\r\n      }\r\n    }\r\n    .booleanColors & {\r\n      &.complete {\r\n        background-color: $secondary-a-700;\r\n      }\r\n    }\r\n  }\r\n\r\n  &-description {\r\n    text-align: center;\r\n    font-weight: 500;\r\n    flex-basis: 100%;\r\n    margin-top: $gap-double;\r\n  }\r\n\r\n  ::ng-deep .mat-progress-bar-buffer {\r\n    background-color: $secondary-a-100;\r\n  }\r\n\r\n  ::ng-deep .mat-progress-bar-fill::after {\r\n    background-color: $secondary-a-700;\r\n  }\r\n}\r\n",
                    "styleUrl": "./progress-chart.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-progress-chart\">\r\n  <span *ngIf=\"label\"\r\n        class=\"p-progress-chart-label paragraph-2-default\">\r\n    {{label}}\r\n  </span>\r\n  <div class=\"p-progress-chart-line\"\r\n       [ngClass]=\"isGeneralProgress ? 'booleanColors' : 'fullPalette'\"\r\n       attr.aria-label=\"{{label ? label : ariaLabel}}\">\r\n    <span *ngFor=\"let segment of values\"\r\n          class=\"p-progress-chart-segment\"\r\n          [ngClass]=\"segment.riskType\"\r\n          [style.width]=\"segment.value + '%'\"></span>\r\n  </div>\r\n</div>\r\n\r\n"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-4867504d7fc1334b23be9b71c8fb58d5",
            "file": "projects/design-system-lib/src/lib/radio-button/radio-button/radio-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "value",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'p-radio-button',\r\n  templateUrl: './radio-button.component.html',\r\n  styleUrls: ['./radio-button.component.scss'],\r\n})\r\nexport class RadioButtonComponent {\r\n  @Input() value: any;\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string;\r\n  @Input() checked: boolean = false;\r\n  @Input() disabled: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../../src/stories/assets/styles/custom\";\r\n\r\n$radio-button-size: 16px;\r\n\r\n::ng-deep .p-radio-button {\r\n  // material styles override\r\n  .mat-radio-label-content {\r\n    font-family: $font-family-basic;\r\n    font-weight: 400;\r\n    font-size: $small-font-size;\r\n    color: $primary-a-900;\r\n  }\r\n\r\n  .mat-radio-container {\r\n    width: $radio-button-size;\r\n    height: $radio-button-size;\r\n  }\r\n\r\n  .mat-radio-outer-circle {\r\n    width: $radio-button-size;\r\n    height: $radio-button-size;\r\n    background-color: $gray-scale-1;\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    border-radius: 50%;\r\n    border-color: $gray-scale-400;\r\n  }\r\n\r\n  .mat-radio-ripple {\r\n    display: none;\r\n  }\r\n\r\n  // hover\r\n  &:hover {\r\n    .mat-radio-outer-circle {\r\n      border-color: $secondary-a-700;\r\n    }\r\n  }\r\n\r\n  // focus\r\n  &.cdk-focused {\r\n    .mat-radio-outer-circle {\r\n      border-color: $secondary-a-700;\r\n    }\r\n  }\r\n\r\n  // disabled\r\n  &.mat-radio-button.mat-radio-disabled {\r\n    .mat-radio-outer-circle {\r\n      background-color: $primary-c-50;\r\n      border-color: $gray-scale-400;\r\n    }\r\n    .mat-radio-label-content {\r\n      color: $gray-scale-600;\r\n    }\r\n  }\r\n\r\n  // checked\r\n  &.mat-radio-button.mat-accent.mat-radio-checked {\r\n    .mat-radio-outer-circle {\r\n      border-color: $secondary-a-700;\r\n    }\r\n  }\r\n\r\n  &.mat-radio-button.mat-accent,\r\n  &.mat-radio-button.mat-accent.mat-radio-checked {\r\n    .mat-radio-inner-circle {\r\n      height: $radio-button-size;\r\n      width: $radio-button-size;\r\n      background-color: $secondary-a-700;\r\n    }\r\n\r\n    // checked + hover\r\n    &:hover {\r\n      .mat-radio-inner-circle {\r\n        background-color: $secondary-a-800;\r\n      }\r\n    }\r\n\r\n    // checked + focus\r\n    &.cdk-focused {\r\n      .mat-radio-inner-circle {\r\n        background-color: $secondary-a-800;\r\n      }\r\n    }\r\n\r\n    // checked + disabled\r\n    &.mat-radio-disabled {\r\n      .mat-radio-outer-circle {\r\n        background-color: $gray-scale-1;\r\n        border-color: $secondary-a-200;\r\n      }\r\n      .mat-radio-inner-circle {\r\n        background-color: $secondary-a-200;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-radio-button class=\"p-radio-button\"\r\n                  [value]=\"value\"\r\n                  [disabled]=\"disabled\"\r\n                  [checked]=\"checked\">\r\n  {{label}}\r\n</mat-radio-button>\r\n"
        },
        {
            "name": "RadioButtonGroupComponent",
            "id": "component-RadioButtonGroupComponent-04728ee36f26cfb2ed70fcc764ec50eb",
            "file": "projects/design-system-lib/src/lib/radio-button/radio-button-group/radio-button-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-radio-group",
            "styleUrls": [
                "./radio-button-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-button-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "errorMessage",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "groupValue",
                    "line": 14,
                    "type": "any"
                },
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "optionsList",
                    "line": 12,
                    "type": "IRadioButton[]"
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "selected",
                    "line": 15,
                    "type": "any"
                },
                {
                    "name": "validators",
                    "line": 18,
                    "type": "ValidatorFn[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fieldFormControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {IRadioButton} from 'projects/design-system-lib/src/lib/radio-button/radio-button.interface';\r\nimport {FormControl, ValidatorFn} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'p-radio-group',\r\n  templateUrl: './radio-button-group.component.html',\r\n  styleUrls: ['./radio-button-group.component.scss'],\r\n})\r\nexport class RadioButtonGroupComponent implements OnInit {\r\n  @Input() label: string;\r\n  @Input() optionsList: IRadioButton[];\r\n  @Input() errorMessage: string;\r\n  @Input() groupValue: any;\r\n  @Input() selected: any;\r\n  @Input() disabled: boolean = false;\r\n  @Input() required: boolean = false;\r\n  @Input() validators: ValidatorFn[];\r\n  public fieldFormControl: FormControl;\r\n\r\n  ngOnInit(): void {\r\n    this.fieldFormControl = new FormControl(\r\n      {value: this.groupValue, disabled: this.disabled},\r\n      this.validators);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../../src/stories/assets/styles/custom\";\r\n\r\n.p-radio-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  &-label {\r\n    font-family: $font-family-basic;\r\n    font-size: $tiny-font-size;\r\n    font-weight: 700;\r\n    line-height: 18px;\r\n  }\r\n  &-option {\r\n    margin-top: 10px;\r\n  }\r\n  &-error {\r\n    font-family: $font-family-basic;\r\n    font-size: $tiny-font-size;\r\n    line-height: 18px;\r\n    color: $supportive-alert-500;\r\n    margin-top: 10px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./radio-button-group.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-radio-group class=\"p-radio-group\"\r\n                 [formControl]=\"fieldFormControl\">\r\n  <label class=\"p-radio-group-label\">{{label}}</label>\r\n  <p-radio-button class=\"p-radio-group-option\"\r\n                  *ngFor=\"let option of optionsList\"\r\n                  [value]=\"option\"\r\n                  [label]=\"option.label\"\r\n                  [ariaLabel]=\"option.ariaLabel\"\r\n                  [checked]=\"option.checked\"\r\n                  [disabled]=\"option.disabled\">\r\n  </p-radio-button>\r\n  <mat-error *ngIf=\"fieldFormControl.errors\"\r\n              class=\"p-radio-group-error\">\r\n    {{errorMessage}}\r\n  </mat-error>\r\n</mat-radio-group>\r\n"
        },
        {
            "name": "SidenavInnerComponent",
            "id": "component-SidenavInnerComponent-17ddad19cb6ce4c23a35c0185b84bbcf",
            "file": "projects/design-system-lib/src/lib/sidenav/inner/sidenav-inner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-sidenav-inner",
            "styleUrls": [
                "./sidenav-inner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidenav-inner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "sidenav",
                    "line": 10,
                    "type": "ISidenavInner[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onItemClicked",
                    "args": [
                        {
                            "name": "panel",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "panel",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {ISidenavInner} from './sidenav-inner.interface';\r\n\r\n@Component({\r\n  selector: 'p-sidenav-inner',\r\n  templateUrl: './sidenav-inner.component.html',\r\n  styleUrls: ['./sidenav-inner.component.scss'],\r\n})\r\nexport class SidenavInnerComponent {\r\n  @Input() sidenav: ISidenavInner[];\r\n\r\n  onItemClicked(panel): void {\r\n    console.log(panel);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../sidenav.component\";\r\n\r\n$item-height: $content-item-height;\r\n$padding-right-inner: 8px;\r\n$padding-left-inner: 24px;\r\n$padding-left-content: 40px;\r\n\r\n%innerSidenavItem {\r\n  @include resetButton;\r\n  display: flex;\r\n  align-items: center;\r\n  font-family: $font-family-basic;\r\n  font-size: $small-font-size;\r\n  text-transform: capitalize;\r\n  color: $primary-a-900;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding-right: $padding-right-inner;\r\n  padding-left: $padding-left-inner;\r\n  border-top: 1px solid $gray-scale-400;\r\n  border-right: $border;\r\n  border-left: $border;\r\n  outline: none;\r\n  position: relative;\r\n  &:focus,\r\n  &:hover {\r\n    background-color: $primary-c-50;\r\n  }\r\n  &.selected {\r\n    @extend %selected;\r\n  }\r\n}\r\n\r\n.p-sidenav {\r\n  ::ng-deep &.inner {\r\n    .mat-expansion-panel-header {\r\n      @extend %innerSidenavItem;\r\n      font-weight: 600;\r\n      &,\r\n      &.mat-expanded {\r\n        height: $item-height;\r\n      }\r\n    }\r\n    .mat-content {\r\n      justify-content: space-between;\r\n    }\r\n  }\r\n\r\n  &-button {\r\n    @extend %innerSidenavItem;\r\n    font-weight: 500;\r\n    justify-content: flex-start;\r\n    padding-left: $padding-left-content;\r\n  }\r\n}\r\n\r\n.p-sidenav-header-icon {\r\n  transition: transform 280ms;\r\n  ::ng-deep .mat-expanded & {\r\n    transform: rotate(-180deg);\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./sidenav-inner.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-accordion class=\"p-sidenav inner\" multi>\r\n  <mat-expansion-panel *ngFor=\"let panel of sidenav\"\r\n                       hideToggle\r\n                       expanded\r\n                       class=\"p-sidenav-panel\">\r\n    <mat-expansion-panel-header class=\"p-sidenav-header\"\r\n           [class.selected]=\"panel.header.selected\"\r\n           (click)=\"onItemClicked(panel)\">\r\n        {{panel.header.headerName}}\r\n      <p-icon *ngIf=\"panel.content?.length\"\r\n              class=\"p-sidenav-header-icon\"\r\n              iconName=\"chevron-down\"\r\n              width=\"16\">\r\n      </p-icon>\r\n    </mat-expansion-panel-header>\r\n\r\n    <!--expanded content-->\r\n    <ul class=\"p-sidenav-content\" *ngIf=\"panel.content?.length\">\r\n      <li class=\"p-sidenav-content-item\" *ngFor=\"let content of panel.content\">\r\n        <button class=\"p-sidenav-button\"\r\n           [class.selected]=\"content.selected\"\r\n           (click)=\"onItemClicked(panel)\">\r\n          {{content.name}}\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n"
        },
        {
            "name": "SidenavMainComponent",
            "id": "component-SidenavMainComponent-3893ad0f23b5491a997446296662ae09",
            "file": "projects/design-system-lib/src/lib/sidenav/main/sidenav-main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-sidenav-main",
            "styleUrls": [
                "./sidenav-main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidenav-main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "sidenav",
                    "line": 10,
                    "type": "ISidenavMain[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onPanelClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "panel",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "panel",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {ISidenavMain} from './sidenav-main.interface';\r\n\r\n@Component({\r\n  selector: 'p-sidenav-main',\r\n  templateUrl: './sidenav-main.component.html',\r\n  styleUrls: ['./sidenav-main.component.scss'],\r\n})\r\nexport class SidenavMainComponent {\r\n  @Input() sidenav: ISidenavMain[];\r\n\r\n  onPanelClicked(event, panel): void {\r\n    console.log(panel);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../sidenav.component\";\r\n\r\n$header-height: 62px;\r\n$padding-left-main: 36px;\r\n$padding-left-content: 56px;\r\n$expand-width: 14px;\r\n\r\n.p-sidenav {\r\n  ::ng-deep &.main .mat-expansion-panel:not([class*=mat-elevation-z]) {\r\n    border-top: $border;\r\n  }\r\n  ::ng-deep &.main .mat-expansion-panel-header {\r\n    font-family: $font-family-accent;\r\n    font-weight: 600;\r\n    font-size: $small-font-size;\r\n    letter-spacing: 0.08em;\r\n    text-transform: uppercase;\r\n    color: $primary-a-900;\r\n    padding-right: $padding-right;\r\n    padding-left: $padding-left-main;\r\n    border-right: $border;\r\n    border-left: $border;\r\n    &,\r\n    &.mat-expanded {\r\n      height: $header-height;\r\n    }\r\n    &.mat-expanded {\r\n      color: $secondary-a-700;\r\n      font-weight: 700;\r\n    }\r\n  }\r\n\r\n  .p-sidenav-header-icon {\r\n    margin-right: 10px;\r\n  }\r\n\r\n  &-content-item {\r\n    border-top: 1px solid $gray-scale-400;\r\n  }\r\n\r\n  &-content-link {\r\n    @include resetLink;\r\n    display: flex;\r\n    align-items: center;\r\n    font-family: $font-family-basic;\r\n    font-weight: 600;\r\n    font-size: $small-font-size;\r\n    text-transform: capitalize;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding-right: $padding-right;\r\n    padding-left: $padding-left-content;\r\n    border-right: $border;\r\n    border-left: $border;\r\n    outline: none;\r\n    position: relative;\r\n    &:focus,\r\n    &:hover {\r\n      background: $primary-c-50;\r\n    }\r\n    &.selected {\r\n      @extend %selected;\r\n    }\r\n  }\r\n\r\n  ::ng-deep .mat-expansion-indicator:after {\r\n    content: 'Expand';\r\n    display: block;\r\n    font-size: 0;\r\n    width: $expand-width;\r\n    height: $expand-width;\r\n    background-image: url('../../assets/images/plus.svg');\r\n    background-repeat: no-repeat;\r\n    background-position: center center;\r\n    background-size: initial;\r\n    border: none;\r\n    padding: 0;\r\n    transform: none;\r\n  }\r\n\r\n  ::ng-deep .mat-expanded .mat-expansion-indicator::after {\r\n    content: 'Collapse';\r\n    background-image: url('../../assets/images/minus.svg');\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./sidenav-main.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-accordion class=\"p-sidenav main\" multi>\r\n  <mat-expansion-panel *ngFor=\"let panel of sidenav\"\r\n                       class=\"p-sidenav-panel\">\r\n    <mat-expansion-panel-header class=\"p-sidenav-header\">\r\n      <p-icon *ngIf=\"panel.header.headerIcon?.iconName\"\r\n              class=\"p-sidenav-header-icon\"\r\n              [iconName]=\"panel.header.headerIcon.iconName\"\r\n              [width]=\"17\"></p-icon>\r\n      {{panel.header.headerName}}\r\n    </mat-expansion-panel-header>\r\n\r\n    <!--expanded content-->\r\n    <ul class=\"p-sidenav-content\">\r\n      <li class=\"p-sidenav-content-item\" *ngFor=\"let content of panel.content\">\r\n        <a href=\"{{content.link}}\"\r\n           class=\"p-sidenav-content-link\"\r\n           [class.selected]=\"content.selected\">\r\n          {{content.name}}\r\n        </a>\r\n      </li>\r\n    </ul>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n"
        },
        {
            "name": "SlideToggleComponent",
            "id": "component-SlideToggleComponent-fa93a8f39a3625ee567121e068a13228",
            "file": "projects/design-system-lib/src/lib/slide-toggle/slide-toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-slide-toggle",
            "styleUrls": [
                "./slide-toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slide-toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "labelActive",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "labelInactive",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'p-slide-toggle',\r\n  templateUrl: './slide-toggle.component.html',\r\n  styleUrls: ['./slide-toggle.component.scss'],\r\n})\r\nexport class SlideToggleComponent {\r\n  @Input() labelActive: string;\r\n  @Input() labelInactive: string;\r\n  @Input() ariaLabel: string; // required even if there is a label\r\n  @Input() checked: boolean = false;\r\n  @Input() disabled: boolean = false;\r\n\r\n  public get tooltipText(): string {\r\n    return this.checked ? 'Switch to ' + this.labelInactive : 'Switch to ' + this.labelActive;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n.p-slide-toggle {\r\n  // material styles override\r\n  ::ng-deep &.mat-slide-toggle {\r\n    .mat-slide-toggle-bar {\r\n      width: 48px;\r\n      height: 24px;\r\n      background-color: $gray-scale-500;\r\n      border-radius: 24px;\r\n      box-sizing: content-box;\r\n    }\r\n    .mat-slide-toggle-thumb-container {\r\n      top: 2px;\r\n      left: 2px;\r\n    }\r\n    .mat-slide-toggle-thumb {\r\n      background-color: $gray-scale-1;\r\n      box-shadow: 0 0 4px 1px rgba(0, 0, 0, 0.2);\r\n    }\r\n    .mat-slide-toggle-content {\r\n      font-family: $font-family-basic;\r\n      font-size: $small-font-size;\r\n      font-weight: 500;\r\n    }\r\n    .mat-slide-toggle-ripple {\r\n      display: none;\r\n    }\r\n\r\n    // hover\r\n    &:hover {\r\n      .mat-slide-toggle-bar {\r\n        background-color: $gray-scale-700;\r\n      }\r\n    }\r\n\r\n    // focus\r\n    &.cdk-focused {\r\n      .mat-slide-toggle-bar {\r\n        background-color: $gray-scale-700;\r\n        //border: 2px solid $gray-scale-100;\r\n      }\r\n    }\r\n\r\n    // disabled\r\n    &.mat-disabled {\r\n      opacity: 1;\r\n      pointer-events: none;\r\n      .mat-slide-toggle-bar {\r\n        background-color: $gray-scale-50;\r\n      }\r\n      .mat-slide-toggle-thumb {\r\n        box-shadow: none;\r\n      }\r\n      .mat-slide-toggle-content {\r\n        color: $gray-scale-700;\r\n      }\r\n    }\r\n\r\n    // checked\r\n    &.mat-checked {\r\n      .mat-slide-toggle-bar {\r\n        background-color: $secondary-a-700;\r\n      }\r\n      .mat-slide-toggle-thumb-container {\r\n        transform: translate3d(24px, 0, 0);\r\n      }\r\n      .mat-slide-toggle-thumb {\r\n        box-shadow: 0 0 3px $secondary-a-800;\r\n      }\r\n      // checked + hover\r\n      &:hover {\r\n        .mat-slide-toggle-bar {\r\n          background-color: $secondary-a-800;\r\n        }\r\n      }\r\n      // checked + focus\r\n      &.cdk-focused {\r\n        .mat-slide-toggle-bar {\r\n          //border: 2px solid $secondary-a-200;\r\n        }\r\n      }\r\n      // checked + disabled\r\n      &.mat-disabled {\r\n        .mat-slide-toggle-bar {\r\n           background-color: $secondary-a-200;\r\n        }\r\n        .mat-slide-toggle-thumb {\r\n          width: 19px;\r\n          height: 19px;\r\n          box-shadow: none;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // icons added\r\n  ::ng-deep &.mat-slide-toggle {\r\n    .mat-slide-toggle-bar {\r\n      &:before {\r\n        content: '';\r\n        display: block;\r\n        width: 15px;\r\n        height: 12px;\r\n        background-image: url('../assets/images/icons/check.svg');\r\n        background-position: center center;\r\n        background-repeat: no-repeat;\r\n        background-size: cover;\r\n        position: absolute;\r\n        top: 6px;\r\n        left: 7px;\r\n      }\r\n      &:after {\r\n        content: '';\r\n        display: block;\r\n        width: 15px;\r\n        height: 15px;\r\n        background-image: url('../assets/images/icons/x.svg');\r\n        background-position: center center;\r\n        background-repeat: no-repeat;\r\n        background-size: cover;\r\n        position: absolute;\r\n        top: 4px;\r\n        right: 5px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n::ng-deep .mat-tooltip-panel {\r\n  transform: translateX(-25px);\r\n}\r\n",
                    "styleUrl": "./slide-toggle.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "tooltipText": {
                    "name": "tooltipText",
                    "getSignature": {
                        "name": "tooltipText",
                        "type": "string",
                        "returnType": "string",
                        "line": 15
                    }
                }
            },
            "templateData": "<mat-slide-toggle\r\n  class=\"p-slide-toggle\"\r\n  [(ngModel)]=\"checked\"\r\n  [aria-label]=\"ariaLabel\"\r\n  [checked]=\"checked\"\r\n  [disabled]=\"disabled\"\r\n  [matTooltip]=\"labelActive ? tooltipText : null\"\r\n  matTooltipPosition=\"above\"\r\n  matTooltipClass=\"p-tooltip above\">\r\n  <ng-container *ngIf=\"labelInactive\">\r\n    <ng-template [ngIf]=\"checked\" [ngIfElse]=\"notChecked\">\r\n      {{labelActive}}\r\n    </ng-template>\r\n    <ng-template #notChecked>\r\n      {{labelInactive}}\r\n    </ng-template>\r\n  </ng-container>\r\n</mat-slide-toggle>\r\n"
        },
        {
            "name": "SlideTogglePageComponent",
            "id": "component-SlideTogglePageComponent-87ecb55a426c34533bc5fbb8203286c6",
            "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-slide-toggle-page",
            "styleUrls": [
                "./slide-toggle-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./slide-toggle-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "slideTogglePage",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "originalOrder",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {KeyValue} from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'p-slide-toggle-page',\r\n  templateUrl: './slide-toggle-page.component.html',\r\n  styleUrls: ['./slide-toggle-page.component.scss'],\r\n})\r\nexport default class SlideTogglePageComponent {\r\n  @Input() slideTogglePage: any;\r\n\r\n  originalOrder = (a: KeyValue<number, string>, b: KeyValue<number, string>): number => {\r\n    return 0;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".slide-toggles {\r\n  .content-list {\r\n    min-width: 175px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./slide-toggle-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"page slide-toggles\">\r\n    <header class=\"page-header\">\r\n      <h1 class=\"page-title\">Toggle / <span class=\"page-header-highlighted\">Items</span></h1>\r\n    </header>\r\n\r\n    <main class=\"page-main\">\r\n      <ul class=\"page-list header-list\">\r\n        <li class=\"list-header\"></li>\r\n        <li class=\"list-header\">[checked]=true</li>\r\n        <li class=\"list-header\">\r\n          [checked]=true\r\n          <br/>\r\n          [disabled]=true\r\n        </li>\r\n        <li class=\"list-header\">\r\n          [checked]=false\r\n        </li>\r\n        <li class=\"list-header\">\r\n          [checked]=false\r\n          <br/>\r\n          [disabled]=true\r\n        </li>\r\n      </ul>\r\n\r\n      <ul *ngFor=\"let toggleType of slideTogglePage | keyvalue: originalOrder\"\r\n          class=\"page-list content-list {{toggleType.key}}\">\r\n        <li class=\"list-header\">\r\n          [{{toggleType.key}}]=\"Label\"\r\n        </li>\r\n        <li *ngFor=\"let toggle of toggleType.value\" class=\"list-item\">\r\n          <p-slide-toggle [labelActive]=\"toggle.labelActive\"\r\n                          [labelInactive]=\"toggle.labelInactive\"\r\n                          [ariaLabel]=\"toggle.ariaLabel\"\r\n                          [checked]=\"toggle.checked\"\r\n                          [disabled]=\"toggle.disabled\">\r\n          </p-slide-toggle>\r\n        </li>\r\n      </ul>\r\n\r\n    </main>\r\n</div>\r\n"
        },
        {
            "name": "SplitButtonComponent",
            "id": "component-SplitButtonComponent-77d8cd62dd5d3a759011a52b725eb408",
            "file": "projects/design-system-lib/src/lib/button/split-button/split-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-split-button",
            "styleUrls": [
                "./split-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./split-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 11,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonTypeEnum.Primary",
                    "line": 24,
                    "type": "ButtonTypeEnum",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 13,
                    "type": "boolean",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconAfter",
                    "line": 19,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconAfterHeight",
                    "defaultValue": "'auto'",
                    "line": 21,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconAfterStrokeColor",
                    "line": 23,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconAfterStrokeWidth",
                    "line": 22,
                    "type": "number",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconAfterWidth",
                    "defaultValue": "'auto'",
                    "line": 20,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconBefore",
                    "line": 14,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconBeforeHeight",
                    "defaultValue": "'auto'",
                    "line": 16,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconBeforeStrokeColor",
                    "line": 18,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconBeforeStrokeWidth",
                    "line": 17,
                    "type": "number",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "iconBeforeWidth",
                    "defaultValue": "'auto'",
                    "line": 15,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "label",
                    "line": 10,
                    "type": "string",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                },
                {
                    "name": "large",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "onClickTrigger",
                    "defaultValue": "new EventEmitter()",
                    "line": 11,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClickTask",
                    "defaultValue": "new EventEmitter()",
                    "line": 25,
                    "type": "EventEmitter<any>",
                    "inheritance": {
                        "file": "ButtonComponent"
                    }
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {ButtonTypeEnum} from '../button-type.enum';\r\nimport {ButtonComponent} from '../button.component';\r\n\r\n@Component({\r\n  selector: 'p-split-button',\r\n  templateUrl: './split-button.component.html',\r\n  styleUrls: ['./split-button.component.scss'],\r\n})\r\nexport class SplitButtonComponent extends ButtonComponent {\r\n  @Output() onClickTrigger: EventEmitter<any> = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../button.component\";\r\n\r\n.p-split {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &-main {\r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n  }\r\n\r\n  &-arrow {\r\n    width: 28px;\r\n    min-width: unset;\r\n    padding-right: 0;\r\n    padding-left: 0;\r\n    border-left: none;\r\n    border-top-left-radius: 0;\r\n    border-bottom-left-radius: 0;\r\n    &.p-btn-primary {\r\n      box-shadow: inset 1px 0 0 rgba(220, 228, 255, 0.2);\r\n      &:disabled {\r\n        box-shadow: inset 1px 0 0 $gray-scale-100;\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n",
                    "styleUrl": "./split-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "ButtonComponent",
            "templateData": "<div class=\"p-split\">\r\n  <button class=\"p-btn p-split-main\"\r\n          [ngClass]=\"classes\"\r\n          [disabled]=\"disabled\"\r\n          attr.aria-label=\"{{ariaLabel}}\"\r\n          (click)=\"onClickTask.emit($event)\">\r\n    <p-icon *ngIf=\"iconBefore\"\r\n            class=\"p-btn-icon-pre\"\r\n            [iconName]=\"iconBefore\"\r\n            [width]=\"iconBeforeWidth\"\r\n            [height]=\"iconBeforeHeight\"\r\n            [stroke]=\"iconBeforeStrokeColor\"\r\n            [strokeWidth]=\"iconBeforeStrokeWidth\"\r\n            [disabled]=\"disabled\"></p-icon>\r\n    <span class=\"p-btn-label\" *ngIf=\"label\">{{label}}</span>\r\n  </button>\r\n\r\n  <button class=\"p-btn p-split-arrow\"\r\n          [ngClass]=\"classes\"\r\n          [disabled]=\"disabled\"\r\n          attr.aria-label=\"Open Menu\"\r\n          (click)=\"onClickTrigger.emit($event)\">\r\n    <p-icon class=\"p-split-arrow-icon\"\r\n            iconName=\"chevron-down\"\r\n            width=\"17\"\r\n            height=\"17\"\r\n            strokeWidth=\"2\"\r\n            [disabled]=\"disabled\"></p-icon>\r\n  </button>\r\n</div>\r\n\r\n"
        },
        {
            "name": "TabGroupComponent",
            "id": "component-TabGroupComponent-b46e934de549bed10ddfcfe55dcec7d2",
            "file": "projects/design-system-lib/src/lib/tab-group/tab-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-tab-group",
            "styleUrls": [
                "./tab-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tabGroup",
                    "line": 10,
                    "type": "literal type[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {ITab} from './tab.interface';\r\n\r\n@Component({\r\n  selector: 'p-tab-group',\r\n  templateUrl: './tab-group.component.html',\r\n  styleUrls: ['./tab-group.component.scss'],\r\n})\r\nexport class TabGroupComponent {\r\n  @Input() tabGroup: {\r\n    tabButton: ITab,\r\n    tabPanel: any,\r\n    disabled: boolean\r\n  }[];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n$tab-height: 52px;\r\n$tab-padding: $gap-double;\r\n\r\n::ng-deep .p-tabs {\r\n  .mat-tab-header {\r\n    border-bottom-color: $gray-scale-400;\r\n  }\r\n  .mat-tab-label {\r\n    min-width: unset;\r\n    height: $tab-height;\r\n    padding: 0 $tab-padding;\r\n    opacity: 1;\r\n    &:not(.mat-tab-disabled):not(.mat-tab-label-active):hover {\r\n      background-color: $primary-c-50;\r\n      .p-tabs-counter {\r\n        font-weight: 700;\r\n        background-color: $gray-scale-400;\r\n      }\r\n    }\r\n  }\r\n  .mat-tab-label-content {\r\n    color: $primary-a-900;\r\n  }\r\n  .mat-tab-label-active {\r\n    .p-tabs-label {\r\n      font-weight: 700;\r\n    }\r\n    .p-tabs-counter {\r\n      font-weight: 600;\r\n      color: $gray-scale-1;\r\n      background-color: $primary-a-900;\r\n    }\r\n  }\r\n  &.mat-tab-group .mat-ink-bar {\r\n    height: 4px;\r\n    background-color: $primary-a-900;\r\n  }\r\n\r\n  // icon\r\n  &-icon {\r\n    margin-right: 4px;\r\n  }\r\n\r\n  // notification\r\n  &-notification {\r\n    width: 6px;\r\n    height: 6px;\r\n    border-radius: 50%;\r\n    background-color: $supportive-alert-500;\r\n    transform: translate(3px, -6px);\r\n  }\r\n\r\n  // counter\r\n  &-counter {\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 18px;\r\n    height: 16px;\r\n    margin-left: 4px;\r\n    background-color: $gray-scale-50;\r\n    border-radius: 50%;\r\n    .p-tabs-notification + & {\r\n      margin-left: 7px;\r\n    }\r\n  }\r\n\r\n  .mat-tab-disabled {\r\n    .mat-tab-label-content,\r\n    .p-tabs-counter {\r\n      color: $gray-scale-600;\r\n    }\r\n  }\r\n\r\n  // tabpanel\r\n  .mat-tab-body-wrapper {\r\n    padding: $gap-double $gap-double * 2;\r\n    border-right: 1px solid $gray-scale-400;\r\n    border-bottom: 1px solid $gray-scale-400;\r\n    border-left: 1px solid $gray-scale-400;\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./tab-group.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-tab-group class=\"p-tabs\"\r\n               [disableRipple]=\"true\"\r\n               animationDuration=\"0ms\">\r\n  <mat-tab *ngFor=\"let tab of tabGroup\"\r\n            class=\"p-tabs-button\"\r\n            [disabled]=\"tab.disabled\">\r\n    <ng-template mat-tab-label>\r\n      <p-icon *ngIf=\"tab.tabButton.labelIcon?.iconName\"\r\n              class=\"p-tabs-icon\"\r\n              [iconName]=\"tab.tabButton.labelIcon?.iconName\"\r\n              [width]=\"15\"></p-icon>\r\n      <span class=\"p-tabs-label paragraph-1-default\">\r\n        {{tab.tabButton.labelName}}\r\n      </span>\r\n      <span *ngIf=\"tab.tabButton.labelNotification\"\r\n            class=\"p-tabs-notification hidden-text\">\r\n        has notification\r\n      </span>\r\n      <span *ngIf=\"tab.tabButton.labelCounter\"\r\n            class=\"p-tabs-counter paragraph-3-medium\">\r\n        <span class=\"hidden-text\">counter is</span>\r\n        <span class=\"p-tabs-counter-value\">\r\n          {{tab.tabButton.labelCounter}}\r\n        </span>\r\n      </span>\r\n    </ng-template>\r\n    {{tab.tabPanel}}\r\n  </mat-tab>\r\n</mat-tab-group>\r\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-8ba0d0dfa43a3c58bb0c1ab6ec509711",
            "file": "projects/design-system-lib/src/lib/input/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "errorMessage",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "matcher",
                    "line": 21,
                    "type": "ErrorStateMatcher"
                },
                {
                    "name": "placeholder",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "TextareaEnum",
                    "line": 22
                },
                {
                    "name": "validators",
                    "line": 20,
                    "type": "ValidatorFn[]"
                },
                {
                    "name": "value",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formFieldControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sub",
                    "type": "SubscriptionLike",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {FormControl, ValidatorFn} from '@angular/forms';\r\nimport {ErrorStateMatcher} from '@angular/material/core';\r\nimport {SubscriptionLike} from 'rxjs';\r\nimport {TextareaEnum} from './textarea.enum';\r\n\r\n@Component({\r\n  selector: 'p-textarea',\r\n  templateUrl: './textarea.component.html',\r\n  styleUrls: ['./textarea.component.scss'],\r\n})\r\nexport class TextareaComponent implements OnInit, OnDestroy {\r\n  @Input() label: string;\r\n  @Input() ariaLabel: string;\r\n  @Input() placeholder: string;\r\n  @Input() errorMessage: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() readonly: boolean = false;\r\n  @Input() value: string;\r\n  @Input() validators: ValidatorFn[];\r\n  @Input() matcher: ErrorStateMatcher;\r\n  @Input() size = TextareaEnum;\r\n  public formFieldControl: FormControl;\r\n  private sub: SubscriptionLike;\r\n\r\n  public get classes(): string[] {\r\n    const classParams = [];\r\n    this.readonly ? classParams.push('p-input-readonly') : null;\r\n    !this.errorMessage ? classParams.push('no-error-message') : null;\r\n    classParams.push(`${this.size}`);\r\n    return classParams;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.formFieldControl = new FormControl(\r\n      {value: this.value, disabled: this.disabled},\r\n      this.validators);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.sub) {\r\n      this.sub.unsubscribe();\r\n      this.sub = null;\r\n    }\r\n  }\r\n\r\n  clearValue(): void {\r\n    this.formFieldControl.setValue('');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../outline/input-outline.component\";\r\n\r\n.p-textarea {\r\n  width: auto;\r\n  &.small ::ng-deep .mat-form-field-flex {\r\n    width: $input-text-width;\r\n    height: calc(100px);\r\n}\r\n\r\n  &.extendedHeight ::ng-deep .mat-form-field-flex {\r\n    width: $input-text-width;\r\n    height: calc(285px);\r\n  }\r\n\r\n  &.medium ::ng-deep .mat-form-field-flex {\r\n    width: 530px;\r\n    height: 100px;\r\n  }\r\n\r\n  &.large ::ng-deep .mat-form-field-flex {\r\n    width: 1150px;\r\n    height: 100px;\r\n  }\r\n\r\n  ::ng-deep &.mat-form-field-appearance-outline .mat-form-field-infix {\r\n    height: calc(100% - 2px);\r\n    padding-top: $input-text-padding ;\r\n    padding-bottom: $input-text-padding;\r\n  }\r\n\r\n  &-input {\r\n    font-family: $font-family-basic;\r\n    font-size: $small-font-size;\r\n    color: $primary-a-900;\r\n    max-width: calc(100% - #{$input-text-padding} * 2 - 2px);\r\n    height: 100%;\r\n    line-height: 1.3;\r\n    padding-right: $input-text-padding;\r\n    padding-left: $input-text-padding;\r\n    caret-color: $primary-a-900;\r\n    resize: none;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 26
                    }
                }
            },
            "templateData": "<mat-form-field class=\"p-input-outline p-textarea\"\r\n                appearance=\"outline\"\r\n                floatLabel=\"always\"\r\n                [ngClass]=\"classes\">\r\n\r\n  <mat-label class=\"p-input-text-label paragraph-3-default\">{{label}}</mat-label>\r\n\r\n  <textarea matInput\r\n         [placeholder]=\"placeholder\"\r\n         [readonly]=\"readonly\"\r\n         attr.aria-label=\"{{ariaLabel}}\"\r\n         [formControl]=\"formFieldControl\"\r\n         [errorStateMatcher]=\"matcher\"\r\n         autocomplete=\"off\"\r\n         onfocus=\"this.select()\"\r\n         class=\"p-textarea-input\"></textarea>\r\n\r\n  <mat-error *ngIf=\"formFieldControl.invalid\"\r\n             class=\"p-input-text-error\">\r\n    {{errorMessage}}\r\n  </mat-error>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-de3608518d970bbce9bddc253539896d",
            "file": "projects/design-system-lib/src/lib/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "optionsList",
                    "line": 17,
                    "type": "IToggleOption[]"
                },
                {
                    "name": "optionsListName",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {IIcon} from '../icon/icon.interface';\r\n\r\ninterface IToggleOption {\r\n  optionName: string;\r\n  icon: IIcon;\r\n  checked: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'p-toggle',\r\n  templateUrl: './toggle.component.html',\r\n  styleUrls: ['./toggle.component.scss'],\r\n})\r\nexport class ToggleComponent {\r\n  @Input() optionsListName: string;\r\n  @Input() optionsList: IToggleOption[];\r\n  @Input() disabled: boolean;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n$border-radius: 2px;\r\n$min-size: 28px;\r\n\r\n.p-toggle {\r\n  display: inline-flex;\r\n  align-items: center;\r\n\r\n  &-item {\r\n    position: relative;\r\n    &:hover .p-toggle-button:not(:disabled) + .p-toggle-label {\r\n      box-shadow: inset 1px 0 0 $secondary-a-700,\r\n                  inset -1px 0 0 $secondary-a-700,\r\n                  inset 0 -1px 0 $secondary-a-700,\r\n                  inset 0 1px 0 $secondary-a-700;\r\n    }\r\n    .first + &.last:hover .p-toggle-button:not(:checked):not(:disabled) + .p-toggle-label {\r\n      box-shadow: inset 1px 0 0 $secondary-a-700,\r\n                  inset -1px 0 0 $secondary-a-700,\r\n                  inset 0 -1px 0 $secondary-a-700,\r\n                  inset 0 1px 0 $secondary-a-700;\r\n    }\r\n  }\r\n\r\n  &-button {\r\n    position: absolute;\r\n    opacity: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    cursor: pointer;\r\n  }\r\n\r\n  &-label {\r\n    display: block;\r\n    font-family: $font-family-basic;\r\n    font-size: $small-font-size;\r\n    font-weight: 400;\r\n    color: $primary-a-900;\r\n    text-align: center;\r\n    text-transform: capitalize;\r\n    height: $min-size;\r\n    line-height: $min-size;\r\n    background-color: $gray-scale-1;\r\n    transition: all 300ms;\r\n    &:not(.p-toggle-label-icon) {\r\n      padding-right: 16px;\r\n      padding-left: 16px;\r\n    }\r\n\r\n    .first & {\r\n      border-top-left-radius: $border-radius;\r\n      border-bottom-left-radius: $border-radius;\r\n      box-shadow: inset 1px 0 0 $gray-scale-400,\r\n                  inset 0 -1px 0 $gray-scale-400,\r\n                  inset 0 1px 0 $gray-scale-400;\r\n    }\r\n\r\n    .middle & {\r\n      box-shadow: inset 1px 0 0 $gray-scale-400,\r\n                  inset -1px 0 0 $gray-scale-400,\r\n                  inset 0 -1px 0 $gray-scale-400,\r\n                  inset 0 1px 0 $gray-scale-400;\r\n    }\r\n\r\n    .last & {\r\n      border-top-right-radius: $border-radius;\r\n      border-bottom-right-radius: $border-radius;\r\n      box-shadow: inset -1px 0px 0px $gray-scale-400,\r\n                  inset 0px -1px 0px $gray-scale-400,\r\n                  inset 0px 1px 0px $gray-scale-400;\r\n    }\r\n\r\n    .first + .last .p-toggle-button:not(:checked) + &,\r\n    .first + .last .p-toggle-button:checked:disabled + &{\r\n      box-shadow: inset 1px 0 0 $gray-scale-400,\r\n                  inset -1px 0 0 $gray-scale-400,\r\n                  inset 0 -1px 0 $gray-scale-400,\r\n                  inset 0 1px 0 $gray-scale-400;\r\n    }\r\n  }\r\n\r\n  &-button:checked:not(:disabled) + .p-toggle-label {\r\n    color: $gray-scale-1;\r\n    background-color: $secondary-a-700;\r\n    box-shadow: none;\r\n  }\r\n\r\n  &-button:disabled + .p-toggle-label {\r\n    color: $gray-scale-600;\r\n    background-color: $primary-c-50;\r\n  }\r\n\r\n  &-button:checked:disabled + .p-toggle-label {\r\n    color: $gray-scale-600;\r\n    background-color: $secondary-a-100;\r\n  }\r\n\r\n  &-icon {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-width: $min-size;\r\n    height: 100%;\r\n    padding-right: 6px;\r\n    padding-left: 6px;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"p-toggle\">\r\n  <div *ngFor=\"let option of optionsList; let i = index\"\r\n       class=\"p-toggle-item\"\r\n       [ngClass]=\"i === 0 ? 'first' : i === optionsList.length - 1 ? 'last' : 'middle'\">\r\n    <input [id]=\"'toggle-' + option.optionName\"\r\n           [name]=\"optionsListName\"\r\n           [value]=\"option.optionName\"\r\n           [checked]=\"option.checked\"\r\n           [disabled]=\"disabled\"\r\n           type=\"radio\"\r\n           class=\"p-toggle-button\"/>\r\n    <label [attr.for]=\"'toggle-' + option.optionName\" class=\"p-toggle-label\"\r\n          [class.p-toggle-label-icon]=\"option.icon?.iconName\">\r\n      <ng-template [ngIf]=\"!option.icon?.iconName && !option.icon?.iconName\"\r\n                   [ngIfElse]=\"icon\">\r\n        <span class=\"p-toggle-text\">{{option.optionName}}</span>\r\n      </ng-template>\r\n\r\n      <ng-template #icon>\r\n        <span class=\"p-toggle-icon\" attr.aria-label=\"{{option.optionName}}\">\r\n          <p-icon class=\"p-toggle-icon-comp\"\r\n              [iconName]=\"option.icon.iconName\"\r\n              [width]=\"option.icon?.width\"\r\n              [height]=\"option.icon?.height\"\r\n              [fill]=\"option.icon?.fill\"\r\n              [stroke]=\"option.icon?.stroke\"\r\n              [strokeWidth]=\"option.icon?.strokeWidth\"\r\n              [strokeLinecap]=\"option.icon?.strokeLinecap\"\r\n              [strokeLinejoin]=\"option.icon?.strokeLinejoin\"></p-icon>\r\n        </span>\r\n      </ng-template>\r\n    </label>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-61dc37b4b25bb48c75b170b95ab9cb29",
            "file": "projects/design-system-lib/src/lib/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-toolbar",
            "styleUrls": [
                "./toolbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toolbar",
                    "line": 10,
                    "type": "IActionButton[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {IActionButton} from '../action-button/action-button.interface';\r\n\r\n@Component({\r\n  selector: 'p-toolbar',\r\n  templateUrl: './toolbar.component.html',\r\n  styleUrls: ['./toolbar.component.scss'],\r\n})\r\nexport class ToolbarComponent {\r\n  @Input() toolbar: IActionButton[];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../assets/styles/custom\";\r\n\r\n.p-toolbar {\r\n  @include resetUl;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./toolbar.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ul class=\"p-toolbar\">\r\n  <li class=\"p-toolbar-item\" *ngFor=\"let item of toolbar\">\r\n    <p-action-button\r\n      class=\"p-action-item-comp\"\r\n      [label]=\"item.label\"\r\n      [disabled]=\"item.disabled\"\r\n      [iconBeforeName]=\"item.iconBeforeName\"\r\n      [iconBeforeWidth]=\"item.iconBeforeWidth\"\r\n      [iconBeforeHeight]=\"item.iconBeforeHeight\"\r\n      [iconBeforeStrokeWidth]=\"item.iconBeforeStrokeWidth\"\r\n      [iconBeforeStrokeColor]=\"item.iconBeforeStrokeColor\"\r\n      [isMenuTrigger]=\"item.isMenuTrigger\"\r\n      [isStandalone]=\"false\">\r\n    </p-action-button>\r\n  </li>\r\n</ul>\r\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-a066a206278795a393152d6316bb972f",
            "file": "src/stories/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-tooltip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 10,
                    "type": "boolean"
                },
                {
                    "name": "hideDelay",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "message",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "position",
                    "defaultValue": "'above'",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "showDelay",
                    "line": 11,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\r\nimport {TooltipPosition} from '@angular/material/tooltip';\r\n\r\n@Component({\r\n  selector: 'p-tooltip',\r\n  templateUrl: './tooltip.component.html'\r\n})\r\nexport class TooltipComponent {\r\n  @Input() message: string; // matTooltip\r\n  @Input() disabled: boolean = false; // matTooltipDisabled\r\n  @Input() showDelay: number; // matTooltipShowDelay in ms\r\n  @Input() hideDelay: number; // matTooltipHideDelay in ms\r\n  @Input() position: string = 'above'; // matTooltipPosition\r\n  // type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\r\n\r\n  public get classes(): string {\r\n    return `p-tooltip ${this.position}`;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "string",
                        "returnType": "string",
                        "line": 16
                    }
                }
            },
            "templateData": "<p-button class=\"p-tooltip-container\"\r\n          label=\"Hover\"\r\n          buttonType=\"secondary\"\r\n          #tooltip=\"matTooltip\"\r\n          [matTooltip]=\"message\"\r\n          [matTooltipDisabled]=\"disabled\"\r\n          [matTooltipShowDelay]=\"showDelay\"\r\n          [matTooltipHideDelay]=\"hideDelay\"\r\n          [matTooltipPosition]=\"position\"\r\n          [matTooltipClass]=\"classes\">\r\n</p-button>\r\n\r\n"
        },
        {
            "name": "TreeComponent",
            "id": "component-TreeComponent-82250993f80b70bac734e646fe0329a3",
            "file": "projects/design-system-lib/src/lib/tree/tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-tree",
            "styleUrls": [
                "./tree.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "treeNodes",
                    "line": 12,
                    "type": "ITreeNode[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTreeNestedDataSource<ITreeNode>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hasChild",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "treeControl",
                    "defaultValue": "new NestedTreeControl<ITreeNode>(node => node.children)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\r\nimport {ITreeNode} from './tree.interface';\r\nimport {NestedTreeControl} from '@angular/cdk/tree';\r\nimport {MatTreeNestedDataSource} from '@angular/material/tree';\r\n\r\n@Component({\r\n  selector: 'p-tree',\r\n  templateUrl: './tree.component.html',\r\n  styleUrls: ['./tree.component.scss'],\r\n})\r\nexport class TreeComponent implements OnInit {\r\n  @Input() treeNodes: ITreeNode[];\r\n  public treeControl = new NestedTreeControl<ITreeNode>(node => node.children);\r\n  public dataSource = new MatTreeNestedDataSource<ITreeNode>();\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.dataSource.data = this.treeNodes;\r\n  }\r\n\r\n  hasChild = (_: number, node: ITreeNode) => !!node.children && node.children.length > 0;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../labels/label-sub/label-sub.component\";\r\n\r\n$node-height: 30px;\r\n$node-padding: 24px;\r\n\r\n.p-tree {\r\n  &-nested-node {\r\n    display: flex;\r\n    align-items: center;\r\n    height: $node-height;\r\n  }\r\n\r\n  ::ng-deep .mat-tree-node {\r\n    min-height: unset;\r\n    height: $node-height;\r\n  }\r\n\r\n  &-node-invisible {\r\n    display: none;\r\n  }\r\n\r\n  &-button {\r\n    @include resetButton;\r\n    padding: 3px;\r\n  }\r\n\r\n  &-button-icon {\r\n    transform: rotate(-90deg);\r\n    transition: transform 180ms ease-in-out;\r\n    &.expanded {\r\n      transform: rotate(0);\r\n    }\r\n  }\r\n\r\n  &-node-icon {\r\n    margin-right: $gap-small;\r\n    &.not-expandable {\r\n      padding-left: $node-padding;\r\n    }\r\n  }\r\n\r\n  &-node-label {\r\n    font-size: 0;\r\n    margin-right: $gap-small;\r\n  }\r\n\r\n  &-expandable {\r\n    padding-left: $node-padding;\r\n  }\r\n\r\n  .child-selected {\r\n    font-weight: 700;\r\n    background-color: $primary-c-50;\r\n    position: relative;\r\n    &:before {\r\n      content: 'Selected';\r\n      display: block;\r\n      font-size: 0;\r\n      width: 4px;\r\n      height: 100%;\r\n      background-color: $primary-a-900;\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n    }\r\n  }\r\n\r\n  .parent-selected .p-tree-nested-node .p-tree-node-name{\r\n    font-weight: 700;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./tree.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-tree [dataSource]=\"dataSource\"\r\n          [treeControl]=\"treeControl\"\r\n          class=\"p-tree\">\r\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle\r\n                 [class.child-selected]=\"node.selected\">\r\n    <ng-container [ngTemplateOutlet]=\"nodeContent\"\r\n                  [ngTemplateOutletContext]=\"{node: node}\"></ng-container>\r\n  </mat-tree-node>\r\n\r\n  <mat-nested-tree-node *matTreeNodeDef=\"let node; when: hasChild\"\r\n                        [class.parent-selected]=\"node.selected\">\r\n    <div class=\"p-tree-nested-node\">\r\n      <button class=\"p-tree-button\"\r\n              mat-icon-button\r\n              matTreeNodeToggle\r\n              [attr.aria-label]=\"'Toggle ' + node.name\">\r\n        <p-icon class=\"p-tree-button-icon\"\r\n                [class.expanded]=\"treeControl.isExpanded(node)\"\r\n                iconName=\"chevron-down\"\r\n                width=\"16\"></p-icon>\r\n      </button>\r\n\r\n      <ng-container [ngTemplateOutlet]=\"nodeContent\"\r\n                    [ngTemplateOutletContext]=\"{node: node}\"></ng-container>\r\n    </div>\r\n\r\n    <div class=\"p-tree-expandable\"\r\n         [class.p-tree-node-invisible]=\"!treeControl.isExpanded(node)\"\r\n         role=\"group\">\r\n      <ng-container matTreeNodeOutlet></ng-container>\r\n    </div>\r\n\r\n  </mat-nested-tree-node>\r\n</mat-tree>\r\n\r\n<ng-template #nodeContent let-node=\"node\">\r\n  <ng-template [ngIf]=\"!node.isCycle && node.children?.length && treeControl.isExpanded(node)\" [ngIfElse]=\"closedNode\">\r\n    <p-icon class=\"p-tree-node-icon\"\r\n            iconName=\"folder-open\"\r\n            width=\"16\"\r\n            height=\"16\">\r\n    </p-icon>\r\n  </ng-template>\r\n\r\n  <ng-template #closedNode>\r\n    <p-icon class=\"p-tree-node-icon\"\r\n            [class.not-expandable]=\"!node.children?.length\"\r\n            [iconName]=\"node.isCycle ? 'circle' : node.children?.length ? 'folder' : 'file-text'\"\r\n            width=\"16\">\r\n    </p-icon>\r\n  </ng-template>\r\n\r\n  <span *ngIf=\"node.label\"\r\n        class=\"p-tree-node-label p-label-small-indicator\"\r\n        [ngClass]=\"'p-label-small-indicator-' + node.label\">\r\n    {{node.label}}\r\n  </span>\r\n\r\n  <span class=\"p-tree-node-name paragraph-3-default\">\r\n    {{node.name}}\r\n  </span>\r\n</ng-template>\r\n"
        },
        {
            "name": "TypographyFontFamilyComponent",
            "id": "component-TypographyFontFamilyComponent-7e114aa45068f95ee12d7ba8ac8ae279",
            "file": "src/stories/typography/font-family/typography-font-family.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-typography-font-family",
            "styleUrls": [
                "./typography-font-family.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./typography-font-family.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'p-typography-font-family',\r\n  templateUrl: './typography-font-family.component.html',\r\n  styleUrls: ['./typography-font-family.component.scss'],\r\n})\r\nexport default class TypographyFontFamilyComponent {\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n.page {\r\n  width: 1440px;\r\n}\r\n\r\n.font-family {\r\n  display: flex;\r\n  justify-content: stretch;\r\n  width: 1800px;\r\n  font-size: 18px;\r\n  color: $primary-a-900;\r\n  line-height: 24.44px;\r\n\r\n  &-accent-container {\r\n    font-family: $font-family-accent;\r\n    width: 530px;\r\n    margin-right: 75px;\r\n  }\r\n\r\n  &-basic-container {\r\n    font-family: $font-family-basic;\r\n    width: 605px;\r\n  }\r\n\r\n  &-title {\r\n    font-weight: 700;\r\n    font-size: 40px;\r\n    line-height: 40.72px;\r\n    margin-bottom: 26px;\r\n  }\r\n\r\n  &-list {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  &-example {\r\n    width: 159px;\r\n    margin-top: 64px;\r\n    margin-right: 78px;\r\n  }\r\n\r\n  &-weight {\r\n    margin-bottom: 26px;\r\n  }\r\n\r\n  &-sample {\r\n    line-break: anywhere;\r\n  }\r\n\r\n  &-class {\r\n    font-weight: 400;\r\n    color: $gray-scale-700;\r\n    margin-top: 20px;\r\n  }\r\n\r\n}\r\n\r\n",
                    "styleUrl": "./typography-font-family.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"page\">\r\n  <header class=\"page-header\">\r\n    <h1 class=\"page-title\">Typography / <span class=\"page-title-highlighted\">Font families</span></h1>\r\n  </header>\r\n\r\n  <main class=\"page-main\">\r\n    <div class=\"font-family\">\r\n    <div class=\"font-family-accent font-family-accent-container\">\r\n      <h2 class=\"font-family-title\">Source Sans Pro</h2>\r\n      <p class=\"font-family-description\">Used only in caps, bold and 5% letter spacing, on headlines and highlighted areas such as menus, tabs, page titles, etc.</p>\r\n      <div class=\"font-family-list\">\r\n        <div class=\"font-family-example weight-bold\">\r\n          <h3 class=\"font-family-weight\">Bold</h3>\r\n          <p class=\"font-family-sample\">ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890/?.,<>’”;:!@#$%^&*()~`</p>\r\n          <p class=\"font-family-class\">\r\n            $font-family-accent\r\n            <br/>\r\n            .font-family-accent\r\n            <br/>\r\n            .weight-bold\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"font-family-basic font-family-basic-container\">\r\n      <h2 class=\"font-family-title\">Inter</h2>\r\n      <p class=\"font-family-description\">Used in all the text of the paragraphs and wherever there is text in the lower case such as subheadings, buttons, etc.</p>\r\n      <div class=\"font-family-list\">\r\n        <div class=\"font-family-example weight-regular\">\r\n          <h3 class=\"font-family-weight\">Regular</h3>\r\n          <p class=\"font-family-sample\">ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890/?.,<>’”;:!@#$%^&*()~`</p>\r\n          <p class=\"font-family-class\">\r\n            $font-family-basic\r\n            <br/>\r\n            .font-family-basic\r\n            <br/>\r\n            .weight-regular\r\n          </p>\r\n        </div>\r\n        <div class=\"font-family-example weight-medium\">\r\n          <h3 class=\"font-family-weight\">Medium</h3>\r\n          <p class=\"font-family-sample\">ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890/?.,<>’”;:!@#$%^&*()~`</p>\r\n          <p class=\"font-family-class\">\r\n            $font-family-basic\r\n            <br/>\r\n            .font-family-basic\r\n            <br/>\r\n            .weight-medium\r\n          </p>\r\n        </div>\r\n        <div class=\"font-family-example weight-semi-bold\">\r\n          <h3 class=\"font-family-weight\">Semi Bold</h3>\r\n          <p class=\"font-family-sample\">ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890/?.,<>’”;:!@#$%^&*()~`</p>\r\n          <p class=\"font-family-class\">\r\n            $font-family-basic\r\n            <br/>\r\n            .font-family-basic\r\n            <br/>\r\n            .weight-semi-bold\r\n          </p>\r\n        </div>\r\n        <div class=\"font-family-example weight-bold\">\r\n          <h3 class=\"font-family-weight\">Bold</h3>\r\n          <p class=\"font-family-sample\">ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890/?.,<>’”;:!@#$%^&*()~`</p>\r\n          <p class=\"font-family-class\">\r\n            $font-family-basic\r\n            <br/>\r\n            .font-family-basic\r\n            <br/>\r\n            .weight-bold\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </main>\r\n</div>\r\n"
        },
        {
            "name": "TypographyStylesComponent",
            "id": "component-TypographyStylesComponent-43fc760e51c6fc00d7c24c492f08435d",
            "file": "src/stories/typography/styles/typography-styles.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "p-typography-styles",
            "styleUrls": [
                "./typography-styles.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./typography-styles.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "originalOrder",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "reverseKeyOrder",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "typographyStyles",
                    "defaultValue": "typographyStyles",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 158,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\r\nimport {KeyValue} from '@angular/common';\r\n\r\n// class' properties are defined in typography.scss\r\nconst typographyStyles = {\r\n  h1: {\r\n    title: 'Headline 1',\r\n    description: 'page header level 1',\r\n    sets: {\r\n      family: 'Source Sans Pro - Bold',\r\n      size: '18px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Page titles - level 1'\r\n    },\r\n    classes: ['headline-1-bold', 'headline-1-bold headline-contrast']\r\n  },\r\n  h1sub: {\r\n    title: 'Headline 1-sub',\r\n    description: 'page header level 2',\r\n    sets: {\r\n      family: 'Inter - SemiBold',\r\n      size: '16px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'No',\r\n      useCase: 'Page titles - level 2'\r\n    },\r\n    classes: ['headline-1-sub-semibold']\r\n  },\r\n  h2: {\r\n    title: 'Headline 2',\r\n    description: 'masthead menu',\r\n    sets: {\r\n      family: 'Source Sans Pro - Bold + SemiBold',\r\n      size: '15px',\r\n      letterSpacing: '8%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Masthead items. SemiBold for default text, Bold for selected, Bold green for Hover.',\r\n    },\r\n    classes: ['headline-2-bold', 'headline-2-semibold', 'headline-2-bold headline-contrast']\r\n  },\r\n  h3: {\r\n    title: 'Headline 3',\r\n    description: 'masthead sub menu',\r\n    sets: {\r\n      family: 'Source Sans Pro - Regular + SemiBold',\r\n      size: '15px',\r\n      letterSpacing: '8%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'No',\r\n      useCase: 'Masthead sub menu items. Regular for default text, SemiBold green for hover and selected.'\r\n    },\r\n    classes: ['headline-3-regular', 'headline-3-semibold headline-contrast']\r\n  },\r\n  h4: {\r\n    title: 'Headline 4',\r\n    description: 'table header, status labels',\r\n    sets: {\r\n      family: 'Inter - Bold',\r\n      size: '12px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Table header row (black), Status labels (white)'\r\n    },\r\n    classes: ['headline-4-bold']\r\n  },\r\n  h5: {\r\n    title: 'Headline 5',\r\n    description: 'expansion panel title',\r\n    sets: {\r\n      family: 'Source Sans Pro - Bold',\r\n      size: '15px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Expansion panel title',\r\n    },\r\n    classes: ['headline-5-bold']\r\n  },\r\n  h6: {\r\n    title: 'Headline 6',\r\n    description: 'tabs',\r\n    family: 'Inter Bold / Semi Bold',\r\n    sets: {\r\n      size: '12px',\r\n      letterSpacing: '8%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Default tab - Bold, Selected tab - SemiBold'\r\n    },\r\n    classes: ['headline-6-bold', 'headline-3-semibold']\r\n  },\r\n  h7: {\r\n    title: 'Headline 7',\r\n    description: 'modal title',\r\n    sets: {\r\n      family: 'Inter Bold',\r\n      size: '22px',\r\n      letterSpacing: '0%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'No',\r\n      useCase: 'Modal title',\r\n    },\r\n    classes: ['headline-7-bold']\r\n  },\r\n  p1: {\r\n    title: 'Paragraph 1',\r\n    description: '',\r\n    sets: {\r\n      family: 'Inter - Regular',\r\n      size: '14px',\r\n      letterSpacing: '0%',\r\n      lineHeight: '20px',\r\n      capitals: 'No',\r\n      useCase: 'Paragraphs, Input text',\r\n    },\r\n    classes: ['paragraph-1-default', 'paragraph-1-link', 'paragraph-1-large-label']\r\n  },\r\n  p2: {\r\n    title: 'Paragraph 2',\r\n    description: '',\r\n    sets: {\r\n      family: 'Inter - Regular',\r\n      size: '13px',\r\n      letterSpacing: '0%',\r\n      lineHeight: '20px',\r\n      capitals: 'No',\r\n      useCase: 'Buttons, Actions, Filter, Drop down menu items, Notifications',\r\n    },\r\n    classes: ['paragraph-2-default', 'paragraph-2-link', 'paragraph-2-actions']\r\n  },\r\n  p3: {\r\n    title: 'Paragraph 3',\r\n    description: 'table content',\r\n    sets: {\r\n      family: 'Inter - Regular',\r\n      size: '12px',\r\n      letterSpacing: '0%',\r\n      lineHeight: '20px',\r\n      capitals: 'No',\r\n      useCase: 'Table content, Input top label',\r\n    },\r\n    classes: ['paragraph-3-default', 'paragraph-3-link', 'paragraph-3-medium', 'paragraph-3-semibold']\r\n  }\r\n};\r\n\r\n\r\n@Component({\r\n  selector: 'p-typography-styles',\r\n  templateUrl: './typography-styles.component.html',\r\n  styleUrls: ['./typography-styles.component.scss'],\r\n})\r\nexport default class TypographyStylesComponent {\r\n  public typographyStyles = typographyStyles;\r\n\r\n  originalOrder = (a: KeyValue<number, string>, b: KeyValue<number, string>): number => {\r\n    return 0;\r\n  }\r\n\r\n  reverseKeyOrder = (a: KeyValue<number, string>, b: KeyValue<number, string>): number => {\r\n    return -1;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/custom\";\r\n\r\n.page {\r\n  width: 1440px;\r\n}\r\n\r\n.font-style {\r\n  @include resetUl;\r\n\r\n  &-item {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    border-bottom: 1px solid $gray-scale-100;\r\n    margin-bottom: 32px;\r\n  }\r\n\r\n  &-top {\r\n    flex-basis: 100%;\r\n    margin-bottom: 15px;\r\n  }\r\n\r\n  &-title {\r\n    display: inline;\r\n    font-size: 24px;\r\n    font-weight: 900;\r\n    line-height: 29.26px;\r\n  }\r\n\r\n  &-description {\r\n    display: inline;\r\n    font-size: 24px;\r\n    font-weight: 600;\r\n    line-height: 29.26px;\r\n  }\r\n\r\n  &-desc {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 600px;\r\n    margin-right: 110px;\r\n  }\r\n\r\n  &-desc-set {\r\n    font-size: 14px;\r\n    line-height: 19.07px;\r\n    margin-top: 0;\r\n    margin-right: 40px;\r\n    margin-bottom: 25px;\r\n    &.family {\r\n      width: 145px;\r\n    }\r\n  }\r\n\r\n  &-desc-title {\r\n    color: $gray-scale-700;\r\n    margin-bottom: 10px;\r\n    .font-style-desc & {\r\n      text-transform: capitalize;\r\n    }\r\n  }\r\n\r\n  &-desc-data {\r\n    margin-left: 0;\r\n    .font-style-desc & {\r\n      font-weight: 600;\r\n    }\r\n  }\r\n\r\n  &-ex-title {\r\n    font-size: 14px;\r\n    color: $gray-scale-700;\r\n    line-height: 19.07px;\r\n    margin-bottom: 10px;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./typography-styles.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"page\">\r\n  <header class=\"page-header\">\r\n    <h1 class=\"page-title\">Typography / <span class=\"page-title-highlighted\">Styles</span></h1>\r\n  </header>\r\n\r\n  <main class=\"page-main\">\r\n    <ul *ngIf=\"typographyStyles\" class=\"font-style\">\r\n      <li *ngFor=\"let item of typographyStyles | keyvalue: originalOrder\"\r\n          class=\"font-style-item\">\r\n        <div class=\"font-style-top\">\r\n          <h2 class=\"font-style-title\">{{ item.value.title }} </h2>\r\n          <p *ngIf=\"item.value.description\" class=\"font-style-description\">\r\n            ({{ item.value.description }})\r\n          </p>\r\n        </div>\r\n        <div class=\"font-style-desc\">\r\n          <dl *ngFor=\"let set of item.value.sets | keyvalue: originalOrder\"\r\n              class=\"font-style-desc-set {{ set.key }}\">\r\n            <dt class=\"font-style-desc-title\">{{ set.key }}</dt>\r\n            <dd class=\"font-style-desc-data\">{{ set.value}}</dd>\r\n          </dl>\r\n        </div>\r\n        <div class=\"font-style-preview\">\r\n          <div *ngFor=\"let example of item.value.classes\"\r\n               class=\"font-style-example\">\r\n            <dl class=\"font-style-desc-set\">\r\n              <dt class=\"font-style-desc-title\">.{{ example }}</dt>\r\n              <dd class=\"font-style-desc-data {{ example }}\">Lorem ipsum dolor sit amet</dd>\r\n            </dl>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </main>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "ActionButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActionButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AlertModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "MenuModule"
                        },
                        {
                            "name": "ToggleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "SplitButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "SplitButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChipsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChipButtonComponent"
                        },
                        {
                            "name": "ChipsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChipButtonComponent"
                        },
                        {
                            "name": "ChipsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComboModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ComboComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActionButtonModule"
                        },
                        {
                            "name": "ChipsModule"
                        },
                        {
                            "name": "HashtagModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "MenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ComboComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EntityHeaderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EntityHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EntityHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExpansionPanelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExpansionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExpansionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HashtagModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HashtagBarComponent"
                        },
                        {
                            "name": "HashtagComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HashtagBarComponent"
                        },
                        {
                            "name": "HashtagComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatepickerComponent"
                        },
                        {
                            "name": "DaterangeComponent"
                        },
                        {
                            "name": "InputHeaderComponent"
                        },
                        {
                            "name": "InputLinkComponent"
                        },
                        {
                            "name": "InputNumericComponent"
                        },
                        {
                            "name": "InputOutlineComponent"
                        },
                        {
                            "name": "InputTextComponent"
                        },
                        {
                            "name": "InputTextTableLayoutComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ModalModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DatepickerComponent"
                        },
                        {
                            "name": "DaterangeComponent"
                        },
                        {
                            "name": "InputHeaderComponent"
                        },
                        {
                            "name": "InputLinkComponent"
                        },
                        {
                            "name": "InputNumericComponent"
                        },
                        {
                            "name": "InputOutlineComponent"
                        },
                        {
                            "name": "InputTextComponent"
                        },
                        {
                            "name": "InputTextTableLayoutComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LabelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LabelMainComponent"
                        },
                        {
                            "name": "LabelSubComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LabelMainComponent"
                        },
                        {
                            "name": "LabelSubComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MastheadModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MastheadComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MastheadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MenuModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MenuFreeTextComponent"
                        },
                        {
                            "name": "MenuMultiSelectComponent"
                        },
                        {
                            "name": "MenuRadioGroupComponent"
                        },
                        {
                            "name": "MenuRangeComponent"
                        },
                        {
                            "name": "MenuSingleSelectComponent"
                        },
                        {
                            "name": "MenuTabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "RadioButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuFreeTextComponent"
                        },
                        {
                            "name": "MenuMultiSelectComponent"
                        },
                        {
                            "name": "MenuRadioGroupComponent"
                        },
                        {
                            "name": "MenuRangeComponent"
                        },
                        {
                            "name": "MenuSingleSelectComponent"
                        },
                        {
                            "name": "MenuTabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginatorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "MenuModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RadioButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioButtonGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioButtonGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SidenavModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SidenavInnerComponent"
                        },
                        {
                            "name": "SidenavMainComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SidenavInnerComponent"
                        },
                        {
                            "name": "SidenavMainComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SlideToggleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SlideToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SlideToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabGroupModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToggleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ToolbarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ActionButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TreeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TreeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TreeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/checkbox/checkbox-page/checkbox-page.stories.ts",
                "type": "",
                "defaultValue": "PageTemplate.bind({})"
            },
            {
                "name": "CheckboxGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/checkbox/checkbox-group/checkbox-group.stories.ts",
                "type": "",
                "defaultValue": "PageTemplate.bind({})"
            },
            {
                "name": "CheckboxTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/checkbox/checkbox.stories.ts",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "ColorPalette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/colors/Color-palette.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system-lib/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Examples",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/checkbox/checkbox-group-page/checkbox-group-page.stories.ts",
                "type": "",
                "defaultValue": "PageTemplate.bind({})"
            },
            {
                "name": "Fonts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/typography/font-family/typography-font-family.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "inputObj",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input/inputObj.ts",
                "type": "object",
                "defaultValue": "{\r\n  ariaLabel: 'Cell long long Label',\r\n  value: 'Input text',\r\n  validators: Validators.required,\r\n  matcher: new CustomErrorStateMatcher()\r\n}"
            },
            {
                "name": "inputTable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input/inputTable.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    tableHeader: { name: 'Cell Label' },\r\n    tableData: {...inputObj }\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell long long long long long long long long long long long long Label', attention: true },\r\n    tableData: {...inputObj}\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell long long Label' },\r\n    tableData: {...inputObj}\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell Label', attention: true },\r\n    tableData: {...inputObj}\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell Label', required: true },\r\n    tableData: {...inputObj, value: ''}\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell long long long long long long long long long long long long Label', required: true },\r\n    tableData: {...inputObj}\r\n  }\r\n]"
            },
            {
                "name": "loremIpsum",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/expansion-panel/loremIpsum.ts",
                "type": "string",
                "defaultValue": "'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Volutpat ornare lobortis varius luctus nisl. Dui odio pellentesque ultricies ut nibh risus. Sed ultrices diam eget enim fringilla arcu odio vitae condimentum. Facilisi bibendum malesuada id aliquam sed rhoncus, a. Amet elit purus ultrices feugiat adipiscing eu. Tempus cursus leo nec enim sed arcu, at dignissim sagittis. Erat non ut nulla dignissim tristique non. Commodo egestas sed mi egestas augue.'"
            },
            {
                "name": "loremIpsum",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/modal/loremIpsum.ts",
                "type": "",
                "defaultValue": "'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus eros in lectus feugiat, ut congue felis ullamcorper. Sed diam enim, commodo quis ultricies eleifend, euismod vitae risus. Nulla non vestibulum metus. Pellentesque placerat rutrum turpis ac mollis. Sed est ante, condimentum eu fermentum quis, suscipit sit amet ligula. Nullam risus justo, tincidunt vel sem ac, vulputate molestie tortor. Suspendisse dui risus, venenatis et hendrerit ac, pharetra eu nunc. Sed ultricies eleifend lectus vitae hendrerit. Pellentesque non pellentesque dolor. Donec ac purus mattis, aliquet nisi id, maximus velit. Curabitur arcu sapien, suscipit nec lorem eu, consequat congue orci. Donec egestas nec nunc id placerat. Donec non laoreet arcu, non lobortis orci. Maecenas vel dapibus odio. Proin eu odio sem. Fusce porta rutrum ipsum quis venenatis.\\n' +\r\n  '\\n' +\r\n  'Integer ac diam vel justo euismod aliquet quis eget nisi. Mauris maximus pulvinar malesuada. Nulla facilisi. In sollicitudin malesuada eleifend. Nam iaculis elementum ex, sed gravida mauris dapibus vel. Mauris sed massa in nibh ornare ullamcorper non et odio. Duis porttitor tempus velit, nec facilisis libero imperdiet et. Donec scelerisque, felis nec pellentesque hendrerit, nulla nisi iaculis dolor, ac ullamcorper libero mi sed purus. Mauris metus leo, euismod id molestie quis, convallis suscipit ante. Suspendisse eu neque ut turpis porttitor condimentum in quis arcu.\\n' +\r\n  '\\n' +\r\n  'Phasellus laoreet tempor diam, in iaculis massa elementum quis. Integer vehicula neque quis nibh molestie tempor. Morbi hendrerit velit a porta feugiat. Quisque non eros ut neque varius elementum non at ex. Pellentesque vestibulum nunc ac gravida accumsan. Nulla id ipsum at libero aliquet ullamcorper nec et massa. Cras congue finibus risus a porttitor.\\n' +\r\n  '\\n' +\r\n  'Sed massa ligula, lacinia non libero non, condimentum commodo turpis. Etiam cursus turpis vel turpis consequat accumsan. Fusce nunc mauris, ultricies nec egestas vitae, interdum at felis. Quisque massa quam, consectetur ac turpis in, vehicula lacinia tortor. Etiam accumsan arcu nulla, ac semper tortor commodo ac. Nunc tempor nisl id molestie ultricies. Nullam vehicula libero sodales metus lobortis sollicitudin.\\n' +\r\n  '\\n' +\r\n  'Etiam commodo sapien mi, ultricies egestas felis tincidunt eu. Nullam vitae mi et tellus dignissim eleifend. Nullam aliquam, sapien sed blandit venenatis, dui lorem vulputate felis, a porta massa purus sodales dui. Nunc commodo lacinia diam, quis dapibus mauris vehicula ut. Integer porttitor, urna at consectetur vehicula, justo nulla euismod leo, egestas porttitor lorem lacus vel dui. Donec feugiat sollicitudin leo quis facilisis. Pellentesque vel ultrices metus. Donec et condimentum odio. In porta, lectus facilisis auctor iaculis, sem odio consequat urna, eget tincidunt mauris diam molestie lorem. In viverra justo vel justo pharetra placerat. Donec tincidunt libero ante, id consectetur arcu pulvinar sed. Curabitur eget augue imperdiet lectus viverra luctus ut in quam. Cras eget lacus non odio gravida feugiat ut nec odio. Integer vel volutpat magna, quis consequat magna. Proin non malesuada enim, eget porttitor risus.'"
            },
            {
                "name": "NoLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "CheckboxTemplate.bind({})"
            },
            {
                "name": "NoLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "",
                "defaultValue": "SlideToggleTemplate.bind({})"
            },
            {
                "name": "PageTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/checkbox/checkbox-group/checkbox-group.stories.ts",
                "type": "Story<CheckboxGroupComponent>",
                "defaultValue": "(args: CheckboxGroupComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "PageTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/checkbox/checkbox-group-page/checkbox-group-page.stories.ts",
                "type": "Story<CheckboxGroupPageComponent>",
                "defaultValue": "(args: CheckboxGroupPageComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "PageTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/checkbox/checkbox-page/checkbox-page.stories.ts",
                "type": "Story<CheckboxPageComponent>",
                "defaultValue": "(args: CheckboxPageComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "PageTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "Story<SlideTogglePageComponent>",
                "defaultValue": "(args: SlideTogglePageComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "palette",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/colors/color-palette.component.ts",
                "type": "object",
                "defaultValue": "{\r\n  primary: {\r\n    a: {\r\n      900: {name: 'P-A 900', labelColor: 'white'}\r\n    },\r\n    b: {\r\n      300: { name: 'P-B 300', labelColor: 'white' }\r\n    },\r\n    c: {\r\n      50: {name: 'P-C 50', labelColor: 'black'}\r\n    }\r\n  },\r\n  secondary: {\r\n    a: { 800: { name: 'S-A 800', labelColor: 'white' },\r\n      700: { name: 'S-A 700', labelColor: 'white' },\r\n      600: { name: 'S-A 600', labelColor: 'white' },\r\n      500: { name: 'S-A 500', labelColor: 'black' },\r\n      200: { name: 'S-A 200', labelColor: 'black' },\r\n      100: { name: 'S-A 100', labelColor: 'black' },\r\n      50: { name: 'S-A 50', labelColor: 'black' } },\r\n    b: { 700: { name: 'S-B 700', labelColor: 'white' },\r\n      500: { name: 'S-B 500', labelColor: 'white' },\r\n      400: { name: 'S-B 400', labelColor: 'white' },\r\n      300: { name: 'S-B 300', labelColor: 'white' },\r\n      200: { name: 'S-B 200', labelColor: 'black' },\r\n      100: { name: 'S-B 100', labelColor: 'black' },\r\n      50: { name: 'S-B 500', labelColor: 'black' }\r\n    }\r\n  },\r\n  gray: {\r\n    scale: { 800: { name: 'grayscale 800', labelColor: 'white' },\r\n        700: { name: 'grayscale 700', labelColor: 'white' },\r\n        600: { name: 'grayscale 600', labelColor: 'white' },\r\n        500: { name: 'grayscale 500', labelColor: 'white' },\r\n        400: { name: 'grayscale 400', labelColor: 'black' },\r\n        100: { name: 'grayscale 100', labelColor: 'black' },\r\n        50: { name: 'grayscale 50', labelColor: 'black' },\r\n        5: { name: 'grayscale 5', labelColor: 'black' },\r\n        1: { name: 'grayscale 1', labelColor: 'black' }\r\n    }\r\n  },\r\n  supportive: {\r\n    alert: {\r\n      800: { name: 'Alert 800', labelColor: 'white' },\r\n      700: { name: 'Alert 700', labelColor: 'white' },\r\n      600: { name: 'Alert 600', labelColor: 'black' },\r\n      500: { name: 'Alert 500', labelColor: 'black' },\r\n      50: { name: 'Alert 50', labelColor: 'black' }\r\n    },\r\n    low: {\r\n      400: { name: 'Low 400', labelColor: 'black' },\r\n      300: { name: 'Low 300', labelColor: 'black' }\r\n    },\r\n    medium: {\r\n      500: { name: 'Medium 500', labelColor: 'black' },\r\n      400: { name: 'Medium 400', labelColor: 'black' },\r\n      50: { name: 'Medium 50', labelColor: 'black' }\r\n    },\r\n    success: {\r\n      500: { name: 'Success 500', labelColor: 'black' },\r\n      400: { name: 'Success 400', labelColor: 'black' },\r\n      50: { name: 'Success 50', labelColor: 'black' }\r\n    }\r\n  },\r\n  dev: {\r\n    a: {\r\n      200: { name: 'A 200', labelColor: 'white' },\r\n      100: { name: 'A 100', labelColor: 'white' }\r\n    },\r\n    b: {\r\n      300: { name: 'B 300', labelColor: 'white' },\r\n      200: { name: 'B 200', labelColor: 'white' }\r\n    },\r\n    c: {\r\n      400: { name: 'C 400', labelColor: 'white' },\r\n      300: { name: 'C 300', labelColor: 'white' }\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons/icon.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-system-lib/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SlideToggleTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "Story<SlideToggleComponent>",
                "defaultValue": "(args: SlideToggleComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "stateGroups",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/menu/stateGroups.ts",
                "type": "[]",
                "defaultValue": "[{\r\n  letter: 'States A',\r\n  names: [ {name: 'Alabama'}, {name: 'Alaska', disabled: true}, {name: 'Arizona'}, {name: 'Arkansas'}]\r\n}, {\r\n  letter: 'States C',\r\n  names: [{name: 'California', selected: true}, {name: 'Colorado'}, {name: 'Connecticut'}]\r\n}, {\r\n  letter: 'States D',\r\n  names: [{name: 'Delaware'}]\r\n}, {\r\n  letter: 'States F',\r\n  names: [{name: 'Florida'}]\r\n}, {\r\n  letter: 'States G',\r\n  names: [{name: 'Georgia'}]\r\n}, {\r\n  letter: 'States H',\r\n  names: [{name: 'Hawaii'}]\r\n}, {\r\n  letter: 'States I',\r\n  names: [{name: 'Idaho'}, {name: 'Illinois'}, {name: 'Indiana'}, {name: 'Iowa'}]\r\n}, {\r\n  letter: 'States K',\r\n  names: [{name: 'Kansas'}, {name: 'Kentucky'}]\r\n}, {\r\n  letter: 'States L',\r\n  names: [{name: 'Louisiana'}]\r\n}, {\r\n  letter: 'States M',\r\n  names: [{name: 'Maine'}, {name: 'Maryland'}, {name: 'Massachusetts'}, {name: 'Michigan'},\r\n    {name: 'Minnesota'}, {name: 'Mississippi'}, {name: 'Missouri'}, {name: 'Montana'}]\r\n}, {\r\n  letter: 'States N',\r\n  names: [{name: 'Nebraska'}, {name: 'Nevada'}, {name: 'New Hampshire'}, {name: 'New Jersey'},\r\n    {name: 'New Mexico'}, {name: 'New York'}, {name: 'North Carolina'}, {name: 'North Dakota'}]\r\n}, {\r\n  letter: 'States O',\r\n  names: [{name: 'Ohio'}, {name: 'Oklahoma'}, {name: 'Oregon'}]\r\n}\r\n]"
            },
            {
                "name": "Styles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/typography/styles/typography-styles.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/colors/Color-palette.stories.ts",
                "type": "Story<ColorPaletteComponent>",
                "defaultValue": "(args: ColorPaletteComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/icons/icon.stories.ts",
                "type": "Story<IconComponent>",
                "defaultValue": "(args: IconComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/typography/font-family/typography-font-family.stories.ts",
                "type": "Story<TypographyFontFamilyComponent>",
                "defaultValue": "(args: TypographyFontFamilyComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/typography/styles/typography-styles.stories.ts",
                "type": "Story<TypographyStylesComponent>",
                "defaultValue": "(args: TypographyStylesComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Toggles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "",
                "defaultValue": "PageTemplate.bind({})"
            },
            {
                "name": "typographyStyles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/typography/styles/typography-styles.component.ts",
                "type": "object",
                "defaultValue": "{\r\n  h1: {\r\n    title: 'Headline 1',\r\n    description: 'page header level 1',\r\n    sets: {\r\n      family: 'Source Sans Pro - Bold',\r\n      size: '18px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Page titles - level 1'\r\n    },\r\n    classes: ['headline-1-bold', 'headline-1-bold headline-contrast']\r\n  },\r\n  h1sub: {\r\n    title: 'Headline 1-sub',\r\n    description: 'page header level 2',\r\n    sets: {\r\n      family: 'Inter - SemiBold',\r\n      size: '16px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'No',\r\n      useCase: 'Page titles - level 2'\r\n    },\r\n    classes: ['headline-1-sub-semibold']\r\n  },\r\n  h2: {\r\n    title: 'Headline 2',\r\n    description: 'masthead menu',\r\n    sets: {\r\n      family: 'Source Sans Pro - Bold + SemiBold',\r\n      size: '15px',\r\n      letterSpacing: '8%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Masthead items. SemiBold for default text, Bold for selected, Bold green for Hover.',\r\n    },\r\n    classes: ['headline-2-bold', 'headline-2-semibold', 'headline-2-bold headline-contrast']\r\n  },\r\n  h3: {\r\n    title: 'Headline 3',\r\n    description: 'masthead sub menu',\r\n    sets: {\r\n      family: 'Source Sans Pro - Regular + SemiBold',\r\n      size: '15px',\r\n      letterSpacing: '8%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'No',\r\n      useCase: 'Masthead sub menu items. Regular for default text, SemiBold green for hover and selected.'\r\n    },\r\n    classes: ['headline-3-regular', 'headline-3-semibold headline-contrast']\r\n  },\r\n  h4: {\r\n    title: 'Headline 4',\r\n    description: 'table header, status labels',\r\n    sets: {\r\n      family: 'Inter - Bold',\r\n      size: '12px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Table header row (black), Status labels (white)'\r\n    },\r\n    classes: ['headline-4-bold']\r\n  },\r\n  h5: {\r\n    title: 'Headline 5',\r\n    description: 'expansion panel title',\r\n    sets: {\r\n      family: 'Source Sans Pro - Bold',\r\n      size: '15px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Expansion panel title',\r\n    },\r\n    classes: ['headline-5-bold']\r\n  },\r\n  h6: {\r\n    title: 'Headline 6',\r\n    description: 'tabs',\r\n    family: 'Inter Bold / Semi Bold',\r\n    sets: {\r\n      size: '12px',\r\n      letterSpacing: '8%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Default tab - Bold, Selected tab - SemiBold'\r\n    },\r\n    classes: ['headline-6-bold', 'headline-3-semibold']\r\n  },\r\n  h7: {\r\n    title: 'Headline 7',\r\n    description: 'modal title',\r\n    sets: {\r\n      family: 'Inter Bold',\r\n      size: '22px',\r\n      letterSpacing: '0%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'No',\r\n      useCase: 'Modal title',\r\n    },\r\n    classes: ['headline-7-bold']\r\n  },\r\n  p1: {\r\n    title: 'Paragraph 1',\r\n    description: '',\r\n    sets: {\r\n      family: 'Inter - Regular',\r\n      size: '14px',\r\n      letterSpacing: '0%',\r\n      lineHeight: '20px',\r\n      capitals: 'No',\r\n      useCase: 'Paragraphs, Input text',\r\n    },\r\n    classes: ['paragraph-1-default', 'paragraph-1-link', 'paragraph-1-large-label']\r\n  },\r\n  p2: {\r\n    title: 'Paragraph 2',\r\n    description: '',\r\n    sets: {\r\n      family: 'Inter - Regular',\r\n      size: '13px',\r\n      letterSpacing: '0%',\r\n      lineHeight: '20px',\r\n      capitals: 'No',\r\n      useCase: 'Buttons, Actions, Filter, Drop down menu items, Notifications',\r\n    },\r\n    classes: ['paragraph-2-default', 'paragraph-2-link', 'paragraph-2-actions']\r\n  },\r\n  p3: {\r\n    title: 'Paragraph 3',\r\n    description: 'table content',\r\n    sets: {\r\n      family: 'Inter - Regular',\r\n      size: '12px',\r\n      letterSpacing: '0%',\r\n      lineHeight: '20px',\r\n      capitals: 'No',\r\n      useCase: 'Table content, Input top label',\r\n    },\r\n    classes: ['paragraph-3-default', 'paragraph-3-link', 'paragraph-3-medium', 'paragraph-3-semibold']\r\n  }\r\n}"
            },
            {
                "name": "WithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/checkbox/checkbox.stories.ts",
                "type": "",
                "defaultValue": "CheckboxTemplate.bind({})"
            },
            {
                "name": "WithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "",
                "defaultValue": "SlideToggleTemplate.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "AlertEnum",
                "childs": [
                    {
                        "name": "Primary",
                        "value": "primary"
                    },
                    {
                        "name": "Secondary",
                        "value": "secondary"
                    },
                    {
                        "name": "Warning",
                        "value": "warning"
                    },
                    {
                        "name": "Medium",
                        "value": "medium"
                    },
                    {
                        "name": "Success",
                        "value": "success"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/design-system-lib/src/lib/alert/alert.enum.ts"
            },
            {
                "name": "ButtonTypeEnum",
                "childs": [
                    {
                        "name": "Primary",
                        "value": "primary"
                    },
                    {
                        "name": "Secondary",
                        "value": "secondary"
                    },
                    {
                        "name": "Tertiary",
                        "value": "tertiary"
                    },
                    {
                        "name": "Distructive",
                        "value": "distructive"
                    },
                    {
                        "name": "IsIcon",
                        "value": "isIcon"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/design-system-lib/src/lib/button/button-type.enum.ts"
            },
            {
                "name": "InputNumericSizeEnum",
                "childs": [
                    {
                        "name": "Small",
                        "value": "small"
                    },
                    {
                        "name": "Medium",
                        "value": "medium"
                    },
                    {
                        "name": "Large",
                        "value": "large"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/design-system-lib/src/lib/input/numeric/input-numeric-size.enum.ts"
            },
            {
                "name": "LabelTypesEnum",
                "childs": [
                    {
                        "name": "CRITICAL",
                        "value": "critical"
                    },
                    {
                        "name": "DANGER",
                        "value": "danger"
                    },
                    {
                        "name": "SUCCESS",
                        "value": "success"
                    },
                    {
                        "name": "MEDIUM",
                        "value": "medium"
                    },
                    {
                        "name": "LOW",
                        "value": "low"
                    },
                    {
                        "name": "LIGHTGRAY",
                        "value": "lightGray"
                    },
                    {
                        "name": "DARKGRAY",
                        "value": "darkGray"
                    },
                    {
                        "name": "DEV1",
                        "value": "dev1"
                    },
                    {
                        "name": "DEV2",
                        "value": "dev2"
                    },
                    {
                        "name": "DEV3",
                        "value": "dev3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/design-system-lib/src/lib/labels/label-types.enum.ts"
            },
            {
                "name": "ModalEnum",
                "childs": [
                    {
                        "name": "Small",
                        "value": "small"
                    },
                    {
                        "name": "Medium",
                        "value": "medium"
                    },
                    {
                        "name": "Large",
                        "value": "large"
                    },
                    {
                        "name": "FullScreen",
                        "value": "fullScreen"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/design-system-lib/src/lib/modal/modal.enum.ts"
            },
            {
                "name": "ProgressBarEnum",
                "childs": [
                    {
                        "name": "Small",
                        "value": "small"
                    },
                    {
                        "name": "FullSize",
                        "value": "fullSize"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/design-system-lib/src/lib/progress-bar/progress-bar.enum.ts"
            },
            {
                "name": "ProgressChartEnum",
                "childs": [
                    {
                        "name": "SUCCESS",
                        "value": "success"
                    },
                    {
                        "name": "LOW",
                        "value": "low"
                    },
                    {
                        "name": "MEDIUM",
                        "value": "medium"
                    },
                    {
                        "name": "HIGH",
                        "value": "high"
                    },
                    {
                        "name": "VERYHIGH",
                        "value": "veryHigh"
                    },
                    {
                        "name": "INCOMPLETE",
                        "value": "incomplete"
                    },
                    {
                        "name": "COMPLETE",
                        "value": "complete"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/design-system-lib/src/lib/progress-chart/progress-chart.enum.ts"
            },
            {
                "name": "TextareaEnum",
                "childs": [
                    {
                        "name": "Small",
                        "value": "small"
                    },
                    {
                        "name": "ExtendedHeight",
                        "value": "extendedHeight"
                    },
                    {
                        "name": "Medium",
                        "value": "medium"
                    },
                    {
                        "name": "Large",
                        "value": "large"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/design-system-lib/src/lib/input/textarea/textarea.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/checkbox/checkbox-page/checkbox-page.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/checkbox/checkbox-page/checkbox-page.stories.ts",
                    "type": "",
                    "defaultValue": "PageTemplate.bind({})"
                },
                {
                    "name": "PageTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/checkbox/checkbox-page/checkbox-page.stories.ts",
                    "type": "Story<CheckboxPageComponent>",
                    "defaultValue": "(args: CheckboxPageComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/checkbox/checkbox-group/checkbox-group.stories.ts": [
                {
                    "name": "CheckboxGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/checkbox/checkbox-group/checkbox-group.stories.ts",
                    "type": "",
                    "defaultValue": "PageTemplate.bind({})"
                },
                {
                    "name": "PageTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/checkbox/checkbox-group/checkbox-group.stories.ts",
                    "type": "Story<CheckboxGroupComponent>",
                    "defaultValue": "(args: CheckboxGroupComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/checkbox/checkbox.stories.ts": [
                {
                    "name": "CheckboxTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/checkbox/checkbox.stories.ts",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "NoLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "CheckboxTemplate.bind({})"
                },
                {
                    "name": "WithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/checkbox/checkbox.stories.ts",
                    "type": "",
                    "defaultValue": "CheckboxTemplate.bind({})"
                }
            ],
            "src/stories/colors/Color-palette.stories.ts": [
                {
                    "name": "ColorPalette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/colors/Color-palette.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/colors/Color-palette.stories.ts",
                    "type": "Story<ColorPaletteComponent>",
                    "defaultValue": "(args: ColorPaletteComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/design-system-lib/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system-lib/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-system-lib/src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/stories/checkbox/checkbox-group-page/checkbox-group-page.stories.ts": [
                {
                    "name": "Examples",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/checkbox/checkbox-group-page/checkbox-group-page.stories.ts",
                    "type": "",
                    "defaultValue": "PageTemplate.bind({})"
                },
                {
                    "name": "PageTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/checkbox/checkbox-group-page/checkbox-group-page.stories.ts",
                    "type": "Story<CheckboxGroupPageComponent>",
                    "defaultValue": "(args: CheckboxGroupPageComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/typography/font-family/typography-font-family.stories.ts": [
                {
                    "name": "Fonts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/typography/font-family/typography-font-family.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/typography/font-family/typography-font-family.stories.ts",
                    "type": "Story<TypographyFontFamilyComponent>",
                    "defaultValue": "(args: TypographyFontFamilyComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/input/inputObj.ts": [
                {
                    "name": "inputObj",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input/inputObj.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  ariaLabel: 'Cell long long Label',\r\n  value: 'Input text',\r\n  validators: Validators.required,\r\n  matcher: new CustomErrorStateMatcher()\r\n}"
                }
            ],
            "src/stories/input/inputTable.ts": [
                {
                    "name": "inputTable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input/inputTable.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    tableHeader: { name: 'Cell Label' },\r\n    tableData: {...inputObj }\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell long long long long long long long long long long long long Label', attention: true },\r\n    tableData: {...inputObj}\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell long long Label' },\r\n    tableData: {...inputObj}\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell Label', attention: true },\r\n    tableData: {...inputObj}\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell Label', required: true },\r\n    tableData: {...inputObj, value: ''}\r\n  },\r\n  {\r\n    tableHeader: { name: 'Cell long long long long long long long long long long long long Label', required: true },\r\n    tableData: {...inputObj}\r\n  }\r\n]"
                }
            ],
            "src/stories/expansion-panel/loremIpsum.ts": [
                {
                    "name": "loremIpsum",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/expansion-panel/loremIpsum.ts",
                    "type": "string",
                    "defaultValue": "'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Volutpat ornare lobortis varius luctus nisl. Dui odio pellentesque ultricies ut nibh risus. Sed ultrices diam eget enim fringilla arcu odio vitae condimentum. Facilisi bibendum malesuada id aliquam sed rhoncus, a. Amet elit purus ultrices feugiat adipiscing eu. Tempus cursus leo nec enim sed arcu, at dignissim sagittis. Erat non ut nulla dignissim tristique non. Commodo egestas sed mi egestas augue.'"
                }
            ],
            "src/stories/modal/loremIpsum.ts": [
                {
                    "name": "loremIpsum",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/modal/loremIpsum.ts",
                    "type": "",
                    "defaultValue": "'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus eros in lectus feugiat, ut congue felis ullamcorper. Sed diam enim, commodo quis ultricies eleifend, euismod vitae risus. Nulla non vestibulum metus. Pellentesque placerat rutrum turpis ac mollis. Sed est ante, condimentum eu fermentum quis, suscipit sit amet ligula. Nullam risus justo, tincidunt vel sem ac, vulputate molestie tortor. Suspendisse dui risus, venenatis et hendrerit ac, pharetra eu nunc. Sed ultricies eleifend lectus vitae hendrerit. Pellentesque non pellentesque dolor. Donec ac purus mattis, aliquet nisi id, maximus velit. Curabitur arcu sapien, suscipit nec lorem eu, consequat congue orci. Donec egestas nec nunc id placerat. Donec non laoreet arcu, non lobortis orci. Maecenas vel dapibus odio. Proin eu odio sem. Fusce porta rutrum ipsum quis venenatis.\\n' +\r\n  '\\n' +\r\n  'Integer ac diam vel justo euismod aliquet quis eget nisi. Mauris maximus pulvinar malesuada. Nulla facilisi. In sollicitudin malesuada eleifend. Nam iaculis elementum ex, sed gravida mauris dapibus vel. Mauris sed massa in nibh ornare ullamcorper non et odio. Duis porttitor tempus velit, nec facilisis libero imperdiet et. Donec scelerisque, felis nec pellentesque hendrerit, nulla nisi iaculis dolor, ac ullamcorper libero mi sed purus. Mauris metus leo, euismod id molestie quis, convallis suscipit ante. Suspendisse eu neque ut turpis porttitor condimentum in quis arcu.\\n' +\r\n  '\\n' +\r\n  'Phasellus laoreet tempor diam, in iaculis massa elementum quis. Integer vehicula neque quis nibh molestie tempor. Morbi hendrerit velit a porta feugiat. Quisque non eros ut neque varius elementum non at ex. Pellentesque vestibulum nunc ac gravida accumsan. Nulla id ipsum at libero aliquet ullamcorper nec et massa. Cras congue finibus risus a porttitor.\\n' +\r\n  '\\n' +\r\n  'Sed massa ligula, lacinia non libero non, condimentum commodo turpis. Etiam cursus turpis vel turpis consequat accumsan. Fusce nunc mauris, ultricies nec egestas vitae, interdum at felis. Quisque massa quam, consectetur ac turpis in, vehicula lacinia tortor. Etiam accumsan arcu nulla, ac semper tortor commodo ac. Nunc tempor nisl id molestie ultricies. Nullam vehicula libero sodales metus lobortis sollicitudin.\\n' +\r\n  '\\n' +\r\n  'Etiam commodo sapien mi, ultricies egestas felis tincidunt eu. Nullam vitae mi et tellus dignissim eleifend. Nullam aliquam, sapien sed blandit venenatis, dui lorem vulputate felis, a porta massa purus sodales dui. Nunc commodo lacinia diam, quis dapibus mauris vehicula ut. Integer porttitor, urna at consectetur vehicula, justo nulla euismod leo, egestas porttitor lorem lacus vel dui. Donec feugiat sollicitudin leo quis facilisis. Pellentesque vel ultrices metus. Donec et condimentum odio. In porta, lectus facilisis auctor iaculis, sem odio consequat urna, eget tincidunt mauris diam molestie lorem. In viverra justo vel justo pharetra placerat. Donec tincidunt libero ante, id consectetur arcu pulvinar sed. Curabitur eget augue imperdiet lectus viverra luctus ut in quam. Cras eget lacus non odio gravida feugiat ut nec odio. Integer vel volutpat magna, quis consequat magna. Proin non malesuada enim, eget porttitor risus.'"
                }
            ],
            "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts": [
                {
                    "name": "NoLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                    "type": "",
                    "defaultValue": "SlideToggleTemplate.bind({})"
                },
                {
                    "name": "PageTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                    "type": "Story<SlideTogglePageComponent>",
                    "defaultValue": "(args: SlideTogglePageComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "SlideToggleTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                    "type": "Story<SlideToggleComponent>",
                    "defaultValue": "(args: SlideToggleComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "Toggles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                    "type": "",
                    "defaultValue": "PageTemplate.bind({})"
                },
                {
                    "name": "WithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                    "type": "",
                    "defaultValue": "SlideToggleTemplate.bind({})"
                }
            ],
            "src/stories/colors/color-palette.component.ts": [
                {
                    "name": "palette",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/colors/color-palette.component.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  primary: {\r\n    a: {\r\n      900: {name: 'P-A 900', labelColor: 'white'}\r\n    },\r\n    b: {\r\n      300: { name: 'P-B 300', labelColor: 'white' }\r\n    },\r\n    c: {\r\n      50: {name: 'P-C 50', labelColor: 'black'}\r\n    }\r\n  },\r\n  secondary: {\r\n    a: { 800: { name: 'S-A 800', labelColor: 'white' },\r\n      700: { name: 'S-A 700', labelColor: 'white' },\r\n      600: { name: 'S-A 600', labelColor: 'white' },\r\n      500: { name: 'S-A 500', labelColor: 'black' },\r\n      200: { name: 'S-A 200', labelColor: 'black' },\r\n      100: { name: 'S-A 100', labelColor: 'black' },\r\n      50: { name: 'S-A 50', labelColor: 'black' } },\r\n    b: { 700: { name: 'S-B 700', labelColor: 'white' },\r\n      500: { name: 'S-B 500', labelColor: 'white' },\r\n      400: { name: 'S-B 400', labelColor: 'white' },\r\n      300: { name: 'S-B 300', labelColor: 'white' },\r\n      200: { name: 'S-B 200', labelColor: 'black' },\r\n      100: { name: 'S-B 100', labelColor: 'black' },\r\n      50: { name: 'S-B 500', labelColor: 'black' }\r\n    }\r\n  },\r\n  gray: {\r\n    scale: { 800: { name: 'grayscale 800', labelColor: 'white' },\r\n        700: { name: 'grayscale 700', labelColor: 'white' },\r\n        600: { name: 'grayscale 600', labelColor: 'white' },\r\n        500: { name: 'grayscale 500', labelColor: 'white' },\r\n        400: { name: 'grayscale 400', labelColor: 'black' },\r\n        100: { name: 'grayscale 100', labelColor: 'black' },\r\n        50: { name: 'grayscale 50', labelColor: 'black' },\r\n        5: { name: 'grayscale 5', labelColor: 'black' },\r\n        1: { name: 'grayscale 1', labelColor: 'black' }\r\n    }\r\n  },\r\n  supportive: {\r\n    alert: {\r\n      800: { name: 'Alert 800', labelColor: 'white' },\r\n      700: { name: 'Alert 700', labelColor: 'white' },\r\n      600: { name: 'Alert 600', labelColor: 'black' },\r\n      500: { name: 'Alert 500', labelColor: 'black' },\r\n      50: { name: 'Alert 50', labelColor: 'black' }\r\n    },\r\n    low: {\r\n      400: { name: 'Low 400', labelColor: 'black' },\r\n      300: { name: 'Low 300', labelColor: 'black' }\r\n    },\r\n    medium: {\r\n      500: { name: 'Medium 500', labelColor: 'black' },\r\n      400: { name: 'Medium 400', labelColor: 'black' },\r\n      50: { name: 'Medium 50', labelColor: 'black' }\r\n    },\r\n    success: {\r\n      500: { name: 'Success 500', labelColor: 'black' },\r\n      400: { name: 'Success 400', labelColor: 'black' },\r\n      50: { name: 'Success 50', labelColor: 'black' }\r\n    }\r\n  },\r\n  dev: {\r\n    a: {\r\n      200: { name: 'A 200', labelColor: 'white' },\r\n      100: { name: 'A 100', labelColor: 'white' }\r\n    },\r\n    b: {\r\n      300: { name: 'B 300', labelColor: 'white' },\r\n      200: { name: 'B 200', labelColor: 'white' }\r\n    },\r\n    c: {\r\n      400: { name: 'C 400', labelColor: 'white' },\r\n      300: { name: 'C 300', labelColor: 'white' }\r\n    }\r\n  }\r\n}"
                }
            ],
            "src/stories/icons/icon.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons/icon.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/icons/icon.stories.ts",
                    "type": "Story<IconComponent>",
                    "defaultValue": "(args: IconComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/menu/stateGroups.ts": [
                {
                    "name": "stateGroups",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/menu/stateGroups.ts",
                    "type": "[]",
                    "defaultValue": "[{\r\n  letter: 'States A',\r\n  names: [ {name: 'Alabama'}, {name: 'Alaska', disabled: true}, {name: 'Arizona'}, {name: 'Arkansas'}]\r\n}, {\r\n  letter: 'States C',\r\n  names: [{name: 'California', selected: true}, {name: 'Colorado'}, {name: 'Connecticut'}]\r\n}, {\r\n  letter: 'States D',\r\n  names: [{name: 'Delaware'}]\r\n}, {\r\n  letter: 'States F',\r\n  names: [{name: 'Florida'}]\r\n}, {\r\n  letter: 'States G',\r\n  names: [{name: 'Georgia'}]\r\n}, {\r\n  letter: 'States H',\r\n  names: [{name: 'Hawaii'}]\r\n}, {\r\n  letter: 'States I',\r\n  names: [{name: 'Idaho'}, {name: 'Illinois'}, {name: 'Indiana'}, {name: 'Iowa'}]\r\n}, {\r\n  letter: 'States K',\r\n  names: [{name: 'Kansas'}, {name: 'Kentucky'}]\r\n}, {\r\n  letter: 'States L',\r\n  names: [{name: 'Louisiana'}]\r\n}, {\r\n  letter: 'States M',\r\n  names: [{name: 'Maine'}, {name: 'Maryland'}, {name: 'Massachusetts'}, {name: 'Michigan'},\r\n    {name: 'Minnesota'}, {name: 'Mississippi'}, {name: 'Missouri'}, {name: 'Montana'}]\r\n}, {\r\n  letter: 'States N',\r\n  names: [{name: 'Nebraska'}, {name: 'Nevada'}, {name: 'New Hampshire'}, {name: 'New Jersey'},\r\n    {name: 'New Mexico'}, {name: 'New York'}, {name: 'North Carolina'}, {name: 'North Dakota'}]\r\n}, {\r\n  letter: 'States O',\r\n  names: [{name: 'Ohio'}, {name: 'Oklahoma'}, {name: 'Oregon'}]\r\n}\r\n]"
                }
            ],
            "src/stories/typography/styles/typography-styles.stories.ts": [
                {
                    "name": "Styles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/typography/styles/typography-styles.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/typography/styles/typography-styles.stories.ts",
                    "type": "Story<TypographyStylesComponent>",
                    "defaultValue": "(args: TypographyStylesComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/typography/styles/typography-styles.component.ts": [
                {
                    "name": "typographyStyles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/typography/styles/typography-styles.component.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  h1: {\r\n    title: 'Headline 1',\r\n    description: 'page header level 1',\r\n    sets: {\r\n      family: 'Source Sans Pro - Bold',\r\n      size: '18px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Page titles - level 1'\r\n    },\r\n    classes: ['headline-1-bold', 'headline-1-bold headline-contrast']\r\n  },\r\n  h1sub: {\r\n    title: 'Headline 1-sub',\r\n    description: 'page header level 2',\r\n    sets: {\r\n      family: 'Inter - SemiBold',\r\n      size: '16px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'No',\r\n      useCase: 'Page titles - level 2'\r\n    },\r\n    classes: ['headline-1-sub-semibold']\r\n  },\r\n  h2: {\r\n    title: 'Headline 2',\r\n    description: 'masthead menu',\r\n    sets: {\r\n      family: 'Source Sans Pro - Bold + SemiBold',\r\n      size: '15px',\r\n      letterSpacing: '8%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Masthead items. SemiBold for default text, Bold for selected, Bold green for Hover.',\r\n    },\r\n    classes: ['headline-2-bold', 'headline-2-semibold', 'headline-2-bold headline-contrast']\r\n  },\r\n  h3: {\r\n    title: 'Headline 3',\r\n    description: 'masthead sub menu',\r\n    sets: {\r\n      family: 'Source Sans Pro - Regular + SemiBold',\r\n      size: '15px',\r\n      letterSpacing: '8%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'No',\r\n      useCase: 'Masthead sub menu items. Regular for default text, SemiBold green for hover and selected.'\r\n    },\r\n    classes: ['headline-3-regular', 'headline-3-semibold headline-contrast']\r\n  },\r\n  h4: {\r\n    title: 'Headline 4',\r\n    description: 'table header, status labels',\r\n    sets: {\r\n      family: 'Inter - Bold',\r\n      size: '12px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Table header row (black), Status labels (white)'\r\n    },\r\n    classes: ['headline-4-bold']\r\n  },\r\n  h5: {\r\n    title: 'Headline 5',\r\n    description: 'expansion panel title',\r\n    sets: {\r\n      family: 'Source Sans Pro - Bold',\r\n      size: '15px',\r\n      letterSpacing: '5%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Expansion panel title',\r\n    },\r\n    classes: ['headline-5-bold']\r\n  },\r\n  h6: {\r\n    title: 'Headline 6',\r\n    description: 'tabs',\r\n    family: 'Inter Bold / Semi Bold',\r\n    sets: {\r\n      size: '12px',\r\n      letterSpacing: '8%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'Yes',\r\n      useCase: 'Default tab - Bold, Selected tab - SemiBold'\r\n    },\r\n    classes: ['headline-6-bold', 'headline-3-semibold']\r\n  },\r\n  h7: {\r\n    title: 'Headline 7',\r\n    description: 'modal title',\r\n    sets: {\r\n      family: 'Inter Bold',\r\n      size: '22px',\r\n      letterSpacing: '0%',\r\n      lineHeight: 'Auto',\r\n      capitals: 'No',\r\n      useCase: 'Modal title',\r\n    },\r\n    classes: ['headline-7-bold']\r\n  },\r\n  p1: {\r\n    title: 'Paragraph 1',\r\n    description: '',\r\n    sets: {\r\n      family: 'Inter - Regular',\r\n      size: '14px',\r\n      letterSpacing: '0%',\r\n      lineHeight: '20px',\r\n      capitals: 'No',\r\n      useCase: 'Paragraphs, Input text',\r\n    },\r\n    classes: ['paragraph-1-default', 'paragraph-1-link', 'paragraph-1-large-label']\r\n  },\r\n  p2: {\r\n    title: 'Paragraph 2',\r\n    description: '',\r\n    sets: {\r\n      family: 'Inter - Regular',\r\n      size: '13px',\r\n      letterSpacing: '0%',\r\n      lineHeight: '20px',\r\n      capitals: 'No',\r\n      useCase: 'Buttons, Actions, Filter, Drop down menu items, Notifications',\r\n    },\r\n    classes: ['paragraph-2-default', 'paragraph-2-link', 'paragraph-2-actions']\r\n  },\r\n  p3: {\r\n    title: 'Paragraph 3',\r\n    description: 'table content',\r\n    sets: {\r\n      family: 'Inter - Regular',\r\n      size: '12px',\r\n      letterSpacing: '0%',\r\n      lineHeight: '20px',\r\n      capitals: 'No',\r\n      useCase: 'Table content, Input top label',\r\n    },\r\n    classes: ['paragraph-3-default', 'paragraph-3-link', 'paragraph-3-medium', 'paragraph-3-semibold']\r\n  }\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/design-system-lib/src/lib/alert/alert.enum.ts": [
                {
                    "name": "AlertEnum",
                    "childs": [
                        {
                            "name": "Primary",
                            "value": "primary"
                        },
                        {
                            "name": "Secondary",
                            "value": "secondary"
                        },
                        {
                            "name": "Warning",
                            "value": "warning"
                        },
                        {
                            "name": "Medium",
                            "value": "medium"
                        },
                        {
                            "name": "Success",
                            "value": "success"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/design-system-lib/src/lib/alert/alert.enum.ts"
                }
            ],
            "projects/design-system-lib/src/lib/button/button-type.enum.ts": [
                {
                    "name": "ButtonTypeEnum",
                    "childs": [
                        {
                            "name": "Primary",
                            "value": "primary"
                        },
                        {
                            "name": "Secondary",
                            "value": "secondary"
                        },
                        {
                            "name": "Tertiary",
                            "value": "tertiary"
                        },
                        {
                            "name": "Distructive",
                            "value": "distructive"
                        },
                        {
                            "name": "IsIcon",
                            "value": "isIcon"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/design-system-lib/src/lib/button/button-type.enum.ts"
                }
            ],
            "projects/design-system-lib/src/lib/input/numeric/input-numeric-size.enum.ts": [
                {
                    "name": "InputNumericSizeEnum",
                    "childs": [
                        {
                            "name": "Small",
                            "value": "small"
                        },
                        {
                            "name": "Medium",
                            "value": "medium"
                        },
                        {
                            "name": "Large",
                            "value": "large"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/design-system-lib/src/lib/input/numeric/input-numeric-size.enum.ts"
                }
            ],
            "projects/design-system-lib/src/lib/labels/label-types.enum.ts": [
                {
                    "name": "LabelTypesEnum",
                    "childs": [
                        {
                            "name": "CRITICAL",
                            "value": "critical"
                        },
                        {
                            "name": "DANGER",
                            "value": "danger"
                        },
                        {
                            "name": "SUCCESS",
                            "value": "success"
                        },
                        {
                            "name": "MEDIUM",
                            "value": "medium"
                        },
                        {
                            "name": "LOW",
                            "value": "low"
                        },
                        {
                            "name": "LIGHTGRAY",
                            "value": "lightGray"
                        },
                        {
                            "name": "DARKGRAY",
                            "value": "darkGray"
                        },
                        {
                            "name": "DEV1",
                            "value": "dev1"
                        },
                        {
                            "name": "DEV2",
                            "value": "dev2"
                        },
                        {
                            "name": "DEV3",
                            "value": "dev3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/design-system-lib/src/lib/labels/label-types.enum.ts"
                }
            ],
            "projects/design-system-lib/src/lib/modal/modal.enum.ts": [
                {
                    "name": "ModalEnum",
                    "childs": [
                        {
                            "name": "Small",
                            "value": "small"
                        },
                        {
                            "name": "Medium",
                            "value": "medium"
                        },
                        {
                            "name": "Large",
                            "value": "large"
                        },
                        {
                            "name": "FullScreen",
                            "value": "fullScreen"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/design-system-lib/src/lib/modal/modal.enum.ts"
                }
            ],
            "projects/design-system-lib/src/lib/progress-bar/progress-bar.enum.ts": [
                {
                    "name": "ProgressBarEnum",
                    "childs": [
                        {
                            "name": "Small",
                            "value": "small"
                        },
                        {
                            "name": "FullSize",
                            "value": "fullSize"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/design-system-lib/src/lib/progress-bar/progress-bar.enum.ts"
                }
            ],
            "projects/design-system-lib/src/lib/progress-chart/progress-chart.enum.ts": [
                {
                    "name": "ProgressChartEnum",
                    "childs": [
                        {
                            "name": "SUCCESS",
                            "value": "success"
                        },
                        {
                            "name": "LOW",
                            "value": "low"
                        },
                        {
                            "name": "MEDIUM",
                            "value": "medium"
                        },
                        {
                            "name": "HIGH",
                            "value": "high"
                        },
                        {
                            "name": "VERYHIGH",
                            "value": "veryHigh"
                        },
                        {
                            "name": "INCOMPLETE",
                            "value": "incomplete"
                        },
                        {
                            "name": "COMPLETE",
                            "value": "complete"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/design-system-lib/src/lib/progress-chart/progress-chart.enum.ts"
                }
            ],
            "projects/design-system-lib/src/lib/input/textarea/textarea.enum.ts": [
                {
                    "name": "TextareaEnum",
                    "childs": [
                        {
                            "name": "Small",
                            "value": "small"
                        },
                        {
                            "name": "ExtendedHeight",
                            "value": "extendedHeight"
                        },
                        {
                            "name": "Medium",
                            "value": "medium"
                        },
                        {
                            "name": "Large",
                            "value": "large"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/design-system-lib/src/lib/input/textarea/textarea.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/action-button/action-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/action-button/action-button.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/alert/alert.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAlertData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/button/button.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IButton",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/button/split-button/split-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SplitButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/checkbox/checkbox.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/chips/bar/chips.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/chips/button/chip-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/chips/chip-button.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChip",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/entity-header/entity-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EntityHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/entity-header/entity-type.enum.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EntityTypeEnum",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/entity-header/entity.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEntity",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/expansion-panel/expansion-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/expansion-panel/expansion-panel.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IExpansionPanel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/file-upload/file-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/hashtag/bar/hashtag-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HashtagBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/hashtag/button/hashtag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HashtagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/hashtag/hashtag.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHashtag",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/icon/icon.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIcon",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/datepicker/datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatepickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/datepicker/datepicker.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatepicker",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/daterange/daterange.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DaterangeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/daterange/daterange.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDaterange",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/header/input-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/link/input-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/numeric/input-numeric.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputNumericComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/numeric/input-numeric.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInputNumeric",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/outline/input-outline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputOutlineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/table-layout/input-text-table-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputTextTableLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/table-layout/input-text-table-line.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInputTextTableLine",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/text/input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/text/input-text.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInputText",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/input/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/labels/label-main/label-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelMainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/labels/label-sub/label-sub.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelSubComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/masthead/masthead.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MastheadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu-button.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuButton",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu-free-text/menu-free-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuFreeTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu-free-text/menu-free-text.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuFreeTextItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu-multi-select/menu-multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuMultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu-radio-group/menu-radio-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuRadioGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu-radio-group/menu-radio-group.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuRadioOption",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu-range/menu-range.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuRangeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu-single-select/menu-single-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuSingleSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu-tabs/menu-tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuTabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/menu/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/modal/modal.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IModalData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/progress-chart/progress-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/radio-button/radio-button-group/radio-button-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/radio-button/radio-button.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRadioButton",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/radio-button/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/sidenav/inner/sidenav-inner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavInnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/sidenav/inner/sidenav-inner.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISidenavInner",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/sidenav/main/sidenav-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidenavMainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/sidenav/main/sidenav-main.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISidenavMain",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/slide-toggle/slide-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SlideToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/tab-group/tab-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/tab-group/tab.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITab",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/toggle/toggle.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToggleOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/lib/tree/tree.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITreeNode",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-system-lib/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/alert/alert-trigger.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertTriggerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-group-page/checkbox-group-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxGroupPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-group-page/checkbox-group-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Examples",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-group-page/checkbox-group-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PageTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-group/checkbox-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-group/checkbox-group.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckboxGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-group/checkbox-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-group/checkbox-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PageTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-page/checkbox-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-page/checkbox-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox-page/checkbox-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PageTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/chips/chips-with-action-buttons/chips-with-action-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipsWithActionButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/colors/Color-palette.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorPalette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/colors/Color-palette.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/colors/color-palette.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPaletteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/colors/color-palette.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "palette",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/entity-header/custom-error-state-matcher.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomErrorStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/expansion-panel/loremIpsum.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loremIpsum",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/icons/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/input/custom-error-state-matcher.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomErrorStateMatcher",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/input/inputObj.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputObj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/input/inputTable.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputTable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/menu/combobox/combo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ComboComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/stories/menu/stateGroups.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stateGroups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/modal/loremIpsum.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loremIpsum",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/modal/modal-trigger.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalTriggerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SlideTogglePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PageTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SlideToggleTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Toggles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/slide-toggle/slide-toggle-page/slide-toggle-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/stories/typography/font-family/typography-font-family.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyFontFamilyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/typography/font-family/typography-font-family.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Fonts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/typography/font-family/typography-font-family.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/typography/styles/typography-styles.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypographyStylesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/typography/styles/typography-styles.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "typographyStyles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/typography/styles/typography-styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Styles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/typography/styles/typography-styles.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}